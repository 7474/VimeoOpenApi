/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// UploadAttempt
    /// </summary>
    [DataContract]
    public partial class UploadAttempt :  IEquatable<UploadAttempt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadAttempt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadAttempt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadAttempt" /> class.
        /// </summary>
        /// <param name="clip">The video to upload..</param>
        /// <param name="completeUri">The completion URI of the upload..</param>
        /// <param name="form">The HTML upload form..</param>
        /// <param name="ticketId">The ticket identifier string for the upload. (required).</param>
        /// <param name="uploadLink">The upload URL. (required).</param>
        /// <param name="uri">The upload URI. (required).</param>
        /// <param name="user">The owner of the uploaded video. (required).</param>
        public UploadAttempt(Video clip = default(Video), string completeUri = default(string), string form = default(string), string ticketId = default(string), string uploadLink = default(string), string uri = default(string), User user = default(User))
        {
            // to ensure "ticketId" is required (not null)
            this.TicketId = ticketId ?? throw new ArgumentNullException("ticketId is a required property for UploadAttempt and cannot be null");
            // to ensure "uploadLink" is required (not null)
            this.UploadLink = uploadLink ?? throw new ArgumentNullException("uploadLink is a required property for UploadAttempt and cannot be null");
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for UploadAttempt and cannot be null");
            // to ensure "user" is required (not null)
            this.User = user ?? throw new ArgumentNullException("user is a required property for UploadAttempt and cannot be null");
            this.Clip = clip;
            this.CompleteUri = completeUri;
            this.Form = form;
        }
        
        /// <summary>
        /// The video to upload.
        /// </summary>
        /// <value>The video to upload.</value>
        [DataMember(Name="clip", EmitDefaultValue=false)]
        public Video Clip { get; set; }

        /// <summary>
        /// The completion URI of the upload.
        /// </summary>
        /// <value>The completion URI of the upload.</value>
        [DataMember(Name="complete_uri", EmitDefaultValue=false)]
        public string CompleteUri { get; set; }

        /// <summary>
        /// The HTML upload form.
        /// </summary>
        /// <value>The HTML upload form.</value>
        [DataMember(Name="form", EmitDefaultValue=false)]
        public string Form { get; set; }

        /// <summary>
        /// The ticket identifier string for the upload.
        /// </summary>
        /// <value>The ticket identifier string for the upload.</value>
        [DataMember(Name="ticket_id", EmitDefaultValue=false)]
        public string TicketId { get; set; }

        /// <summary>
        /// The upload URL.
        /// </summary>
        /// <value>The upload URL.</value>
        [DataMember(Name="upload_link", EmitDefaultValue=false)]
        public string UploadLink { get; set; }

        /// <summary>
        /// The upload URI.
        /// </summary>
        /// <value>The upload URI.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The owner of the uploaded video.
        /// </summary>
        /// <value>The owner of the uploaded video.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadAttempt {\n");
            sb.Append("  Clip: ").Append(Clip).Append("\n");
            sb.Append("  CompleteUri: ").Append(CompleteUri).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("  TicketId: ").Append(TicketId).Append("\n");
            sb.Append("  UploadLink: ").Append(UploadLink).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadAttempt);
        }

        /// <summary>
        /// Returns true if UploadAttempt instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadAttempt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadAttempt input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Clip == input.Clip ||
                    (this.Clip != null &&
                    this.Clip.Equals(input.Clip))
                ) && 
                (
                    this.CompleteUri == input.CompleteUri ||
                    (this.CompleteUri != null &&
                    this.CompleteUri.Equals(input.CompleteUri))
                ) && 
                (
                    this.Form == input.Form ||
                    (this.Form != null &&
                    this.Form.Equals(input.Form))
                ) && 
                (
                    this.TicketId == input.TicketId ||
                    (this.TicketId != null &&
                    this.TicketId.Equals(input.TicketId))
                ) && 
                (
                    this.UploadLink == input.UploadLink ||
                    (this.UploadLink != null &&
                    this.UploadLink.Equals(input.UploadLink))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Clip != null)
                    hashCode = hashCode * 59 + this.Clip.GetHashCode();
                if (this.CompleteUri != null)
                    hashCode = hashCode * 59 + this.CompleteUri.GetHashCode();
                if (this.Form != null)
                    hashCode = hashCode * 59 + this.Form.GetHashCode();
                if (this.TicketId != null)
                    hashCode = hashCode * 59 + this.TicketId.GetHashCode();
                if (this.UploadLink != null)
                    hashCode = hashCode * 59 + this.UploadLink.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
