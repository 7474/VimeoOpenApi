/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// VideoVersions
    /// </summary>
    [DataContract]
    public partial class VideoVersions :  IEquatable<VideoVersions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoVersions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VideoVersions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoVersions" /> class.
        /// </summary>
        /// <param name="active">Whether this video version is the currently active one. (required).</param>
        /// <param name="app">The API app associated with the video version. (required).</param>
        /// <param name="createdTime">The time in ISO 8601 for when the video version was created. (required).</param>
        /// <param name="duration">The duration of the video version in seconds. (required).</param>
        /// <param name="filename">The file name of the video version. (required).</param>
        /// <param name="filesize">The size in byes of the video version file. (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="modifiedTime">The time in ISO 8601 format when the video version was last modified. (required).</param>
        /// <param name="upload">upload (required).</param>
        /// <param name="uploadDate">The time in ISO 8601 format when the video version was uploaded. (required).</param>
        /// <param name="uri">The version&#39;s canonical relative URI. (required).</param>
        /// <param name="user">The owner of the video version. (required).</param>
        public VideoVersions(bool active = default(bool), ApiApp app = default(ApiApp), string createdTime = default(string), decimal? duration = default(decimal?), string filename = default(string), decimal? filesize = default(decimal?), VideoVersionsMetadata metadata = default(VideoVersionsMetadata), string modifiedTime = default(string), VideoVersionsUpload upload = default(VideoVersionsUpload), string uploadDate = default(string), string uri = default(string), User user = default(User))
        {
            this.Active = active;
            // to ensure "app" is required (not null)
            this.App = app ?? throw new ArgumentNullException("app is a required property for VideoVersions and cannot be null");
            // to ensure "createdTime" is required (not null)
            this.CreatedTime = createdTime ?? throw new ArgumentNullException("createdTime is a required property for VideoVersions and cannot be null");
            // to ensure "duration" is required (not null)
            this.Duration = duration ?? throw new ArgumentNullException("duration is a required property for VideoVersions and cannot be null");
            // to ensure "filename" is required (not null)
            this.Filename = filename ?? throw new ArgumentNullException("filename is a required property for VideoVersions and cannot be null");
            // to ensure "filesize" is required (not null)
            this.Filesize = filesize ?? throw new ArgumentNullException("filesize is a required property for VideoVersions and cannot be null");
            // to ensure "metadata" is required (not null)
            this.Metadata = metadata ?? throw new ArgumentNullException("metadata is a required property for VideoVersions and cannot be null");
            // to ensure "modifiedTime" is required (not null)
            this.ModifiedTime = modifiedTime ?? throw new ArgumentNullException("modifiedTime is a required property for VideoVersions and cannot be null");
            // to ensure "upload" is required (not null)
            this.Upload = upload ?? throw new ArgumentNullException("upload is a required property for VideoVersions and cannot be null");
            // to ensure "uploadDate" is required (not null)
            this.UploadDate = uploadDate ?? throw new ArgumentNullException("uploadDate is a required property for VideoVersions and cannot be null");
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for VideoVersions and cannot be null");
            // to ensure "user" is required (not null)
            this.User = user ?? throw new ArgumentNullException("user is a required property for VideoVersions and cannot be null");
        }
        
        /// <summary>
        /// Whether this video version is the currently active one.
        /// </summary>
        /// <value>Whether this video version is the currently active one.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// The API app associated with the video version.
        /// </summary>
        /// <value>The API app associated with the video version.</value>
        [DataMember(Name="app", EmitDefaultValue=false)]
        public ApiApp App { get; set; }

        /// <summary>
        /// The time in ISO 8601 for when the video version was created.
        /// </summary>
        /// <value>The time in ISO 8601 for when the video version was created.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public string CreatedTime { get; set; }

        /// <summary>
        /// The duration of the video version in seconds.
        /// </summary>
        /// <value>The duration of the video version in seconds.</value>
        [DataMember(Name="duration", EmitDefaultValue=true)]
        public decimal? Duration { get; set; }

        /// <summary>
        /// The file name of the video version.
        /// </summary>
        /// <value>The file name of the video version.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// The size in byes of the video version file.
        /// </summary>
        /// <value>The size in byes of the video version file.</value>
        [DataMember(Name="filesize", EmitDefaultValue=true)]
        public decimal? Filesize { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public VideoVersionsMetadata Metadata { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the video version was last modified.
        /// </summary>
        /// <value>The time in ISO 8601 format when the video version was last modified.</value>
        [DataMember(Name="modified_time", EmitDefaultValue=false)]
        public string ModifiedTime { get; set; }

        /// <summary>
        /// Gets or Sets Upload
        /// </summary>
        [DataMember(Name="upload", EmitDefaultValue=true)]
        public VideoVersionsUpload Upload { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the video version was uploaded.
        /// </summary>
        /// <value>The time in ISO 8601 format when the video version was uploaded.</value>
        [DataMember(Name="upload_date", EmitDefaultValue=true)]
        public string UploadDate { get; set; }

        /// <summary>
        /// The version&#39;s canonical relative URI.
        /// </summary>
        /// <value>The version&#39;s canonical relative URI.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The owner of the video version.
        /// </summary>
        /// <value>The owner of the video version.</value>
        [DataMember(Name="user", EmitDefaultValue=true)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideoVersions {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Filesize: ").Append(Filesize).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  Upload: ").Append(Upload).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoVersions);
        }

        /// <summary>
        /// Returns true if VideoVersions instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoVersions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoVersions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.App == input.App ||
                    (this.App != null &&
                    this.App.Equals(input.App))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Filesize == input.Filesize ||
                    (this.Filesize != null &&
                    this.Filesize.Equals(input.Filesize))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.Upload == input.Upload ||
                    (this.Upload != null &&
                    this.Upload.Equals(input.Upload))
                ) && 
                (
                    this.UploadDate == input.UploadDate ||
                    (this.UploadDate != null &&
                    this.UploadDate.Equals(input.UploadDate))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.App != null)
                    hashCode = hashCode * 59 + this.App.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Filesize != null)
                    hashCode = hashCode * 59 + this.Filesize.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.Upload != null)
                    hashCode = hashCode * 59 + this.Upload.GetHashCode();
                if (this.UploadDate != null)
                    hashCode = hashCode * 59 + this.UploadDate.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
