/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// OnDemandPromotionCode
    /// </summary>
    [DataContract]
    public partial class OnDemandPromotionCode :  IEquatable<OnDemandPromotionCode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPromotionCode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OnDemandPromotionCode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPromotionCode" /> class.
        /// </summary>
        /// <param name="code">A promotion code that can be redeemed on Vimeo. (required).</param>
        /// <param name="link">A link to redeem the promotion code instantly. (required).</param>
        /// <param name="maxUses">The total amount of times this code can be used. (required).</param>
        /// <param name="uses">The number of times that this code has been used. (required).</param>
        public OnDemandPromotionCode(string code = default(string), string link = default(string), decimal maxUses = default(decimal), decimal uses = default(decimal))
        {
            // to ensure "code" is required (not null)
            this.Code = code ?? throw new ArgumentNullException("code is a required property for OnDemandPromotionCode and cannot be null");
            // to ensure "link" is required (not null)
            this.Link = link ?? throw new ArgumentNullException("link is a required property for OnDemandPromotionCode and cannot be null");
            this.MaxUses = maxUses;
            this.Uses = uses;
        }
        
        /// <summary>
        /// A promotion code that can be redeemed on Vimeo.
        /// </summary>
        /// <value>A promotion code that can be redeemed on Vimeo.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// A link to redeem the promotion code instantly.
        /// </summary>
        /// <value>A link to redeem the promotion code instantly.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// The total amount of times this code can be used.
        /// </summary>
        /// <value>The total amount of times this code can be used.</value>
        [DataMember(Name="max_uses", EmitDefaultValue=false)]
        public decimal MaxUses { get; set; }

        /// <summary>
        /// The number of times that this code has been used.
        /// </summary>
        /// <value>The number of times that this code has been used.</value>
        [DataMember(Name="uses", EmitDefaultValue=false)]
        public decimal Uses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnDemandPromotionCode {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  MaxUses: ").Append(MaxUses).Append("\n");
            sb.Append("  Uses: ").Append(Uses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnDemandPromotionCode);
        }

        /// <summary>
        /// Returns true if OnDemandPromotionCode instances are equal
        /// </summary>
        /// <param name="input">Instance of OnDemandPromotionCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnDemandPromotionCode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.MaxUses == input.MaxUses ||
                    this.MaxUses.Equals(input.MaxUses)
                ) && 
                (
                    this.Uses == input.Uses ||
                    this.Uses.Equals(input.Uses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                hashCode = hashCode * 59 + this.MaxUses.GetHashCode();
                hashCode = hashCode * 59 + this.Uses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
