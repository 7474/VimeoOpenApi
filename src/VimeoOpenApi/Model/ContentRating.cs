/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// ContentRating
    /// </summary>
    [DataContract]
    public partial class ContentRating :  IEquatable<ContentRating>, IValidatableObject
    {
        /// <summary>
        /// The reason for the content rating.  Option descriptions:  * &#x60;drugs&#x60; - Drug or alcohol use.  * &#x60;language&#x60; - Profanity or sexually suggestive content.  * &#x60;nudity&#x60; - Nudity.  * &#x60;safe&#x60; - Suitable for all audiences.  * &#x60;unrated&#x60; - No rating.  * &#x60;violence&#x60; - Violent or graphic content. 
        /// </summary>
        /// <value>The reason for the content rating.  Option descriptions:  * &#x60;drugs&#x60; - Drug or alcohol use.  * &#x60;language&#x60; - Profanity or sexually suggestive content.  * &#x60;nudity&#x60; - Nudity.  * &#x60;safe&#x60; - Suitable for all audiences.  * &#x60;unrated&#x60; - No rating.  * &#x60;violence&#x60; - Violent or graphic content. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum Drugs for value: drugs
            /// </summary>
            [EnumMember(Value = "drugs")]
            Drugs = 1,

            /// <summary>
            /// Enum Language for value: language
            /// </summary>
            [EnumMember(Value = "language")]
            Language = 2,

            /// <summary>
            /// Enum Nudity for value: nudity
            /// </summary>
            [EnumMember(Value = "nudity")]
            Nudity = 3,

            /// <summary>
            /// Enum Safe for value: safe
            /// </summary>
            [EnumMember(Value = "safe")]
            Safe = 4,

            /// <summary>
            /// Enum Unrated for value: unrated
            /// </summary>
            [EnumMember(Value = "unrated")]
            Unrated = 5,

            /// <summary>
            /// Enum Violence for value: violence
            /// </summary>
            [EnumMember(Value = "violence")]
            Violence = 6

        }

        /// <summary>
        /// The reason for the content rating.  Option descriptions:  * &#x60;drugs&#x60; - Drug or alcohol use.  * &#x60;language&#x60; - Profanity or sexually suggestive content.  * &#x60;nudity&#x60; - Nudity.  * &#x60;safe&#x60; - Suitable for all audiences.  * &#x60;unrated&#x60; - No rating.  * &#x60;violence&#x60; - Violent or graphic content. 
        /// </summary>
        /// <value>The reason for the content rating.  Option descriptions:  * &#x60;drugs&#x60; - Drug or alcohol use.  * &#x60;language&#x60; - Profanity or sexually suggestive content.  * &#x60;nudity&#x60; - Nudity.  * &#x60;safe&#x60; - Suitable for all audiences.  * &#x60;unrated&#x60; - No rating.  * &#x60;violence&#x60; - Violent or graphic content. </value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public CodeEnum Code { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentRating" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContentRating() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentRating" /> class.
        /// </summary>
        /// <param name="code">The reason for the content rating.  Option descriptions:  * &#x60;drugs&#x60; - Drug or alcohol use.  * &#x60;language&#x60; - Profanity or sexually suggestive content.  * &#x60;nudity&#x60; - Nudity.  * &#x60;safe&#x60; - Suitable for all audiences.  * &#x60;unrated&#x60; - No rating.  * &#x60;violence&#x60; - Violent or graphic content.  (required).</param>
        /// <param name="name">The description of the content rating. (required).</param>
        /// <param name="uri">The canonical relative URI of the content rating. (required).</param>
        public ContentRating(CodeEnum code = default(CodeEnum), string name = default(string), string uri = default(string))
        {
            this.Code = code;
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for ContentRating and cannot be null");
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for ContentRating and cannot be null");
        }
        
        /// <summary>
        /// The description of the content rating.
        /// </summary>
        /// <value>The description of the content rating.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The canonical relative URI of the content rating.
        /// </summary>
        /// <value>The canonical relative URI of the content rating.</value>
        [DataMember(Name="uri", EmitDefaultValue=true)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentRating {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContentRating);
        }

        /// <summary>
        /// Returns true if ContentRating instances are equal
        /// </summary>
        /// <param name="input">Instance of ContentRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentRating input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    this.Code.Equals(input.Code)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
