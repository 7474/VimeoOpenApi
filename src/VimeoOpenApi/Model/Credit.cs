/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Credit
    /// </summary>
    [DataContract]
    public partial class Credit :  IEquatable<Credit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Credit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Credit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Credit" /> class.
        /// </summary>
        /// <param name="name">The name of the person credited. (required).</param>
        /// <param name="role">The character that the person portrayed, or the job that the person performed. (required).</param>
        /// <param name="uri">The unique identifier to access the credit resource. (required).</param>
        /// <param name="user">The Vimeo user associated with the credit..</param>
        /// <param name="video">The video associated with the credit..</param>
        public Credit(string name = default(string), string role = default(string), string uri = default(string), User user = default(User), Video video = default(Video))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Credit and cannot be null");
            // to ensure "role" is required (not null)
            this.Role = role ?? throw new ArgumentNullException("role is a required property for Credit and cannot be null");
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for Credit and cannot be null");
            this.User = user;
            this.Video = video;
        }
        
        /// <summary>
        /// The name of the person credited.
        /// </summary>
        /// <value>The name of the person credited.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The character that the person portrayed, or the job that the person performed.
        /// </summary>
        /// <value>The character that the person portrayed, or the job that the person performed.</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// The unique identifier to access the credit resource.
        /// </summary>
        /// <value>The unique identifier to access the credit resource.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The Vimeo user associated with the credit.
        /// </summary>
        /// <value>The Vimeo user associated with the credit.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// The video associated with the credit.
        /// </summary>
        /// <value>The video associated with the credit.</value>
        [DataMember(Name="video", EmitDefaultValue=false)]
        public Video Video { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Credit {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Credit);
        }

        /// <summary>
        /// Returns true if Credit instances are equal
        /// </summary>
        /// <param name="input">Instance of Credit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Credit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Video == input.Video ||
                    (this.Video != null &&
                    this.Video.Equals(input.Video))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Video != null)
                    hashCode = hashCode * 59 + this.Video.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
