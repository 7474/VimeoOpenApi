/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// A list of resource URIs related to the showcase.
    /// </summary>
    [DataContract]
    public partial class AlbumMetadataInteractions :  IEquatable<AlbumMetadataInteractions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumMetadataInteractions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AlbumMetadataInteractions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumMetadataInteractions" /> class.
        /// </summary>
        /// <param name="addCustomThumbnails">addCustomThumbnails (required).</param>
        /// <param name="addLiveEvents">addLiveEvents (required).</param>
        /// <param name="addLogos">addLogos (required).</param>
        /// <param name="addTo">addTo (required).</param>
        /// <param name="addVideos">addVideos (required).</param>
        public AlbumMetadataInteractions(AlbumMetadataInteractionsAddCustomThumbnails addCustomThumbnails = default(AlbumMetadataInteractionsAddCustomThumbnails), AlbumMetadataInteractionsAddLiveEvents addLiveEvents = default(AlbumMetadataInteractionsAddLiveEvents), AlbumMetadataInteractionsAddLogos addLogos = default(AlbumMetadataInteractionsAddLogos), AlbumMetadataInteractionsAddTo addTo = default(AlbumMetadataInteractionsAddTo), AlbumMetadataInteractionsAddVideos addVideos = default(AlbumMetadataInteractionsAddVideos))
        {
            // to ensure "addCustomThumbnails" is required (not null)
            this.AddCustomThumbnails = addCustomThumbnails ?? throw new ArgumentNullException("addCustomThumbnails is a required property for AlbumMetadataInteractions and cannot be null");
            // to ensure "addLiveEvents" is required (not null)
            this.AddLiveEvents = addLiveEvents ?? throw new ArgumentNullException("addLiveEvents is a required property for AlbumMetadataInteractions and cannot be null");
            // to ensure "addLogos" is required (not null)
            this.AddLogos = addLogos ?? throw new ArgumentNullException("addLogos is a required property for AlbumMetadataInteractions and cannot be null");
            // to ensure "addTo" is required (not null)
            this.AddTo = addTo ?? throw new ArgumentNullException("addTo is a required property for AlbumMetadataInteractions and cannot be null");
            // to ensure "addVideos" is required (not null)
            this.AddVideos = addVideos ?? throw new ArgumentNullException("addVideos is a required property for AlbumMetadataInteractions and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets AddCustomThumbnails
        /// </summary>
        [DataMember(Name="add_custom_thumbnails", EmitDefaultValue=false)]
        public AlbumMetadataInteractionsAddCustomThumbnails AddCustomThumbnails { get; set; }

        /// <summary>
        /// Gets or Sets AddLiveEvents
        /// </summary>
        [DataMember(Name="add_live_events", EmitDefaultValue=false)]
        public AlbumMetadataInteractionsAddLiveEvents AddLiveEvents { get; set; }

        /// <summary>
        /// Gets or Sets AddLogos
        /// </summary>
        [DataMember(Name="add_logos", EmitDefaultValue=false)]
        public AlbumMetadataInteractionsAddLogos AddLogos { get; set; }

        /// <summary>
        /// Gets or Sets AddTo
        /// </summary>
        [DataMember(Name="add_to", EmitDefaultValue=true)]
        public AlbumMetadataInteractionsAddTo AddTo { get; set; }

        /// <summary>
        /// Gets or Sets AddVideos
        /// </summary>
        [DataMember(Name="add_videos", EmitDefaultValue=false)]
        public AlbumMetadataInteractionsAddVideos AddVideos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlbumMetadataInteractions {\n");
            sb.Append("  AddCustomThumbnails: ").Append(AddCustomThumbnails).Append("\n");
            sb.Append("  AddLiveEvents: ").Append(AddLiveEvents).Append("\n");
            sb.Append("  AddLogos: ").Append(AddLogos).Append("\n");
            sb.Append("  AddTo: ").Append(AddTo).Append("\n");
            sb.Append("  AddVideos: ").Append(AddVideos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlbumMetadataInteractions);
        }

        /// <summary>
        /// Returns true if AlbumMetadataInteractions instances are equal
        /// </summary>
        /// <param name="input">Instance of AlbumMetadataInteractions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlbumMetadataInteractions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddCustomThumbnails == input.AddCustomThumbnails ||
                    (this.AddCustomThumbnails != null &&
                    this.AddCustomThumbnails.Equals(input.AddCustomThumbnails))
                ) && 
                (
                    this.AddLiveEvents == input.AddLiveEvents ||
                    (this.AddLiveEvents != null &&
                    this.AddLiveEvents.Equals(input.AddLiveEvents))
                ) && 
                (
                    this.AddLogos == input.AddLogos ||
                    (this.AddLogos != null &&
                    this.AddLogos.Equals(input.AddLogos))
                ) && 
                (
                    this.AddTo == input.AddTo ||
                    (this.AddTo != null &&
                    this.AddTo.Equals(input.AddTo))
                ) && 
                (
                    this.AddVideos == input.AddVideos ||
                    (this.AddVideos != null &&
                    this.AddVideos.Equals(input.AddVideos))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddCustomThumbnails != null)
                    hashCode = hashCode * 59 + this.AddCustomThumbnails.GetHashCode();
                if (this.AddLiveEvents != null)
                    hashCode = hashCode * 59 + this.AddLiveEvents.GetHashCode();
                if (this.AddLogos != null)
                    hashCode = hashCode * 59 + this.AddLogos.GetHashCode();
                if (this.AddTo != null)
                    hashCode = hashCode * 59 + this.AddTo.GetHashCode();
                if (this.AddVideos != null)
                    hashCode = hashCode * 59 + this.AddVideos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
