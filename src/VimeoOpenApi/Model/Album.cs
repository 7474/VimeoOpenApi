/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Album
    /// </summary>
    [DataContract]
    public partial class Album :  IEquatable<Album>, IValidatableObject
    {
        /// <summary>
        /// The state of the SSL certificate that is associated with the showcase&#39;s domain.  Option descriptions:  * &#x60;null&#x60; - There is no associated HTTPS domain with this showcase.  * &#x60;0&#x60; - The new certificate has yet to be processed.  * &#x60;1&#x60; - The new certificate is being processed in the queue.  * &#x60;2&#x60; - The certificate is being processed for renewal in the queue.  * &#x60;3&#x60; - The new certificate has failed to be issued in the queue.  * &#x60;4&#x60; - The certificate has failed to be renewed in the queue.  * &#x60;5&#x60; - The certificate has been successfully issued.  * &#x60;6&#x60; - The certificate has been successfully renewed.  * &#x60;7&#x60; - The certificate has failed in the polling flow.  * &#x60;8&#x60; - The certificate has failed to be renewed in the polling flow. 
        /// </summary>
        /// <value>The state of the SSL certificate that is associated with the showcase&#39;s domain.  Option descriptions:  * &#x60;null&#x60; - There is no associated HTTPS domain with this showcase.  * &#x60;0&#x60; - The new certificate has yet to be processed.  * &#x60;1&#x60; - The new certificate is being processed in the queue.  * &#x60;2&#x60; - The certificate is being processed for renewal in the queue.  * &#x60;3&#x60; - The new certificate has failed to be issued in the queue.  * &#x60;4&#x60; - The certificate has failed to be renewed in the queue.  * &#x60;5&#x60; - The certificate has been successfully issued.  * &#x60;6&#x60; - The certificate has been successfully renewed.  * &#x60;7&#x60; - The certificate has failed in the polling flow.  * &#x60;8&#x60; - The certificate has failed to be renewed in the polling flow. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DomainCertificateStateEnum
        {
            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 1,

            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            _0 = 2,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 3,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 4,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 5,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 6,

            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 7,

            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 8,

            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 9,

            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 10

        }

        /// <summary>
        /// The state of the SSL certificate that is associated with the showcase&#39;s domain.  Option descriptions:  * &#x60;null&#x60; - There is no associated HTTPS domain with this showcase.  * &#x60;0&#x60; - The new certificate has yet to be processed.  * &#x60;1&#x60; - The new certificate is being processed in the queue.  * &#x60;2&#x60; - The certificate is being processed for renewal in the queue.  * &#x60;3&#x60; - The new certificate has failed to be issued in the queue.  * &#x60;4&#x60; - The certificate has failed to be renewed in the queue.  * &#x60;5&#x60; - The certificate has been successfully issued.  * &#x60;6&#x60; - The certificate has been successfully renewed.  * &#x60;7&#x60; - The certificate has failed in the polling flow.  * &#x60;8&#x60; - The certificate has failed to be renewed in the polling flow. 
        /// </summary>
        /// <value>The state of the SSL certificate that is associated with the showcase&#39;s domain.  Option descriptions:  * &#x60;null&#x60; - There is no associated HTTPS domain with this showcase.  * &#x60;0&#x60; - The new certificate has yet to be processed.  * &#x60;1&#x60; - The new certificate is being processed in the queue.  * &#x60;2&#x60; - The certificate is being processed for renewal in the queue.  * &#x60;3&#x60; - The new certificate has failed to be issued in the queue.  * &#x60;4&#x60; - The certificate has failed to be renewed in the queue.  * &#x60;5&#x60; - The certificate has been successfully issued.  * &#x60;6&#x60; - The certificate has been successfully renewed.  * &#x60;7&#x60; - The certificate has failed in the polling flow.  * &#x60;8&#x60; - The certificate has failed to be renewed in the polling flow. </value>
        [DataMember(Name="domain_certificate_state", EmitDefaultValue=false)]
        public DomainCertificateStateEnum DomainCertificateState { get; set; }
        /// <summary>
        /// The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The showcase videos appear in a grid.  * &#x60;player&#x60; - The showcase videos appear in the player. 
        /// </summary>
        /// <value>The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The showcase videos appear in a grid.  * &#x60;player&#x60; - The showcase videos appear in the player. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LayoutEnum
        {
            /// <summary>
            /// Enum Grid for value: grid
            /// </summary>
            [EnumMember(Value = "grid")]
            Grid = 1,

            /// <summary>
            /// Enum Player for value: player
            /// </summary>
            [EnumMember(Value = "player")]
            Player = 2

        }

        /// <summary>
        /// The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The showcase videos appear in a grid.  * &#x60;player&#x60; - The showcase videos appear in the player. 
        /// </summary>
        /// <value>The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The showcase videos appear in a grid.  * &#x60;player&#x60; - The showcase videos appear in the player. </value>
        [DataMember(Name="layout", EmitDefaultValue=false)]
        public LayoutEnum Layout { get; set; }
        /// <summary>
        /// The sort order of the showcase.  Option descriptions:  * &#x60;added_first&#x60; - Sort the showcase videos in order of those most recently added.  * &#x60;added_last&#x60; - Sort the showcase videos in order of those least recently added.  * &#x60;alphabetical&#x60; - Sort the showcase videos alphabetically.  * &#x60;arranged&#x60; - Sort the showcase videos according to their custom arrangement.  * &#x60;comments&#x60; - Sort the showcase videos by number of comments.  * &#x60;likes&#x60; - Sort the showcase videos by number of likes.  * &#x60;newest&#x60; - Sort the showcase videos in order of creation date with the newest first.  * &#x60;oldest&#x60; - Sort the showcase videos in order of creation date with the oldest first.  * &#x60;plays&#x60; - Sort the showcase videos by number of plays. 
        /// </summary>
        /// <value>The sort order of the showcase.  Option descriptions:  * &#x60;added_first&#x60; - Sort the showcase videos in order of those most recently added.  * &#x60;added_last&#x60; - Sort the showcase videos in order of those least recently added.  * &#x60;alphabetical&#x60; - Sort the showcase videos alphabetically.  * &#x60;arranged&#x60; - Sort the showcase videos according to their custom arrangement.  * &#x60;comments&#x60; - Sort the showcase videos by number of comments.  * &#x60;likes&#x60; - Sort the showcase videos by number of likes.  * &#x60;newest&#x60; - Sort the showcase videos in order of creation date with the newest first.  * &#x60;oldest&#x60; - Sort the showcase videos in order of creation date with the oldest first.  * &#x60;plays&#x60; - Sort the showcase videos by number of plays. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortEnum
        {
            /// <summary>
            /// Enum Addedfirst for value: added_first
            /// </summary>
            [EnumMember(Value = "added_first")]
            Addedfirst = 1,

            /// <summary>
            /// Enum Addedlast for value: added_last
            /// </summary>
            [EnumMember(Value = "added_last")]
            Addedlast = 2,

            /// <summary>
            /// Enum Alphabetical for value: alphabetical
            /// </summary>
            [EnumMember(Value = "alphabetical")]
            Alphabetical = 3,

            /// <summary>
            /// Enum Arranged for value: arranged
            /// </summary>
            [EnumMember(Value = "arranged")]
            Arranged = 4,

            /// <summary>
            /// Enum Comments for value: comments
            /// </summary>
            [EnumMember(Value = "comments")]
            Comments = 5,

            /// <summary>
            /// Enum Likes for value: likes
            /// </summary>
            [EnumMember(Value = "likes")]
            Likes = 6,

            /// <summary>
            /// Enum Newest for value: newest
            /// </summary>
            [EnumMember(Value = "newest")]
            Newest = 7,

            /// <summary>
            /// Enum Oldest for value: oldest
            /// </summary>
            [EnumMember(Value = "oldest")]
            Oldest = 8,

            /// <summary>
            /// Enum Plays for value: plays
            /// </summary>
            [EnumMember(Value = "plays")]
            Plays = 9

        }

        /// <summary>
        /// The sort order of the showcase.  Option descriptions:  * &#x60;added_first&#x60; - Sort the showcase videos in order of those most recently added.  * &#x60;added_last&#x60; - Sort the showcase videos in order of those least recently added.  * &#x60;alphabetical&#x60; - Sort the showcase videos alphabetically.  * &#x60;arranged&#x60; - Sort the showcase videos according to their custom arrangement.  * &#x60;comments&#x60; - Sort the showcase videos by number of comments.  * &#x60;likes&#x60; - Sort the showcase videos by number of likes.  * &#x60;newest&#x60; - Sort the showcase videos in order of creation date with the newest first.  * &#x60;oldest&#x60; - Sort the showcase videos in order of creation date with the oldest first.  * &#x60;plays&#x60; - Sort the showcase videos by number of plays. 
        /// </summary>
        /// <value>The sort order of the showcase.  Option descriptions:  * &#x60;added_first&#x60; - Sort the showcase videos in order of those most recently added.  * &#x60;added_last&#x60; - Sort the showcase videos in order of those least recently added.  * &#x60;alphabetical&#x60; - Sort the showcase videos alphabetically.  * &#x60;arranged&#x60; - Sort the showcase videos according to their custom arrangement.  * &#x60;comments&#x60; - Sort the showcase videos by number of comments.  * &#x60;likes&#x60; - Sort the showcase videos by number of likes.  * &#x60;newest&#x60; - Sort the showcase videos in order of creation date with the newest first.  * &#x60;oldest&#x60; - Sort the showcase videos in order of creation date with the oldest first.  * &#x60;plays&#x60; - Sort the showcase videos by number of plays. </value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public SortEnum Sort { get; set; }
        /// <summary>
        /// The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme. 
        /// </summary>
        /// <value>The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThemeEnum
        {
            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            [EnumMember(Value = "dark")]
            Dark = 1,

            /// <summary>
            /// Enum Standard for value: standard
            /// </summary>
            [EnumMember(Value = "standard")]
            Standard = 2

        }

        /// <summary>
        /// The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme. 
        /// </summary>
        /// <value>The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme. </value>
        [DataMember(Name="theme", EmitDefaultValue=false)]
        public ThemeEnum Theme { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Album" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Album() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Album" /> class.
        /// </summary>
        /// <param name="allowContinuousPlay">Whether the showcase permits continuous play. (required).</param>
        /// <param name="allowDownloads">Whether the showcase permits downloads. (required).</param>
        /// <param name="allowShare">Whether the showcase permits sharing. (required).</param>
        /// <param name="autoplay">Whether to start playback of the next video in the showcase&#39;s embedded playlist immediately after the previous video finishes. (required).</param>
        /// <param name="brandColor">The hexadecimal code for the color of the player buttons and showcase controls. (required).</param>
        /// <param name="createdTime">The time in ISO 8601 format when the showcase was created. (required).</param>
        /// <param name="customLogo">The custom logo of the showcase. (required).</param>
        /// <param name="description">A brief description of the showcase&#39;s content. (required).</param>
        /// <param name="domain">The custom domain of the showcase. (required).</param>
        /// <param name="domainCertificateState">The state of the SSL certificate that is associated with the showcase&#39;s domain.  Option descriptions:  * &#x60;null&#x60; - There is no associated HTTPS domain with this showcase.  * &#x60;0&#x60; - The new certificate has yet to be processed.  * &#x60;1&#x60; - The new certificate is being processed in the queue.  * &#x60;2&#x60; - The certificate is being processed for renewal in the queue.  * &#x60;3&#x60; - The new certificate has failed to be issued in the queue.  * &#x60;4&#x60; - The certificate has failed to be renewed in the queue.  * &#x60;5&#x60; - The certificate has been successfully issued.  * &#x60;6&#x60; - The certificate has been successfully renewed.  * &#x60;7&#x60; - The certificate has failed in the polling flow.  * &#x60;8&#x60; - The certificate has failed to be renewed in the polling flow.  (required).</param>
        /// <param name="duration">The total duration in seconds of all the videos in the showcase. (required).</param>
        /// <param name="embed">embed (required).</param>
        /// <param name="embedBrandColor">Whether to show the showcase&#39;s custom brand color in the player of the showcase&#39;s embedded playlist. (required).</param>
        /// <param name="embedCustomLogo">Whether to show the showcase&#39;s custom logo in the player of the showcase&#39;s embedded playlist. (required).</param>
        /// <param name="hideNav">Whether to hide Vimeo navigation when displaying the showcase. (required).</param>
        /// <param name="hideUpcoming">Whether to include the upcoming live event in the showcase. (required).</param>
        /// <param name="hideVimeoLogo">Whether to hide the Vimeo logo in the player of the showcase&#39;s embedded playlist. (required).</param>
        /// <param name="layout">The type of layout for presenting the showcase.  Option descriptions:  * &#x60;grid&#x60; - The showcase videos appear in a grid.  * &#x60;player&#x60; - The showcase videos appear in the player.  (required).</param>
        /// <param name="link">The URL of the showcase. (required).</param>
        /// <param name="loop">Whether automatic playback restarts at the top of the showcase&#39;s embedded playlist after reaching the end of the last video in the playlist. (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="modifiedTime">The time in ISO 8601 format when the showcase was last modified. (required).</param>
        /// <param name="name">The display name of the showcase. (required).</param>
        /// <param name="pictures">The active image of the showcase. This field defaults to the thumbnail of the last video added to the showcase. (required).</param>
        /// <param name="privacy">privacy (required).</param>
        /// <param name="resourceKey">The resource key of the showcase. (required).</param>
        /// <param name="reviewMode">Whether showcase videos use the review mode URL. (required).</param>
        /// <param name="seoAllowIndexed">Whether search engines can index the showcase. (required).</param>
        /// <param name="seoDescription">The SEO description of the showcase. (required).</param>
        /// <param name="seoKeywords">The SEO keywords of the showcase. (required).</param>
        /// <param name="seoTitle">The SEO title of the showcase. (required).</param>
        /// <param name="shareLink">The URL for sharing the showcase. (required).</param>
        /// <param name="sort">The sort order of the showcase.  Option descriptions:  * &#x60;added_first&#x60; - Sort the showcase videos in order of those most recently added.  * &#x60;added_last&#x60; - Sort the showcase videos in order of those least recently added.  * &#x60;alphabetical&#x60; - Sort the showcase videos alphabetically.  * &#x60;arranged&#x60; - Sort the showcase videos according to their custom arrangement.  * &#x60;comments&#x60; - Sort the showcase videos by number of comments.  * &#x60;likes&#x60; - Sort the showcase videos by number of likes.  * &#x60;newest&#x60; - Sort the showcase videos in order of creation date with the newest first.  * &#x60;oldest&#x60; - Sort the showcase videos in order of creation date with the oldest first.  * &#x60;plays&#x60; - Sort the showcase videos by number of plays.  (required).</param>
        /// <param name="theme">The color theme of the showcase.  Option descriptions:  * &#x60;dark&#x60; - The showcase uses the dark theme.  * &#x60;standard&#x60; - The showcase uses the standard theme.  (required).</param>
        /// <param name="uri">The URI of the showcase. (required).</param>
        /// <param name="url">The custom Vimeo URL of the showcase. (required).</param>
        /// <param name="useCustomDomain">Whether the showcase uses a custom domain. (required).</param>
        /// <param name="user">The owner of the showcase. (required).</param>
        /// <param name="webBrandColor">Whether to use the showcase&#39;s brand color in the web layout. (required).</param>
        /// <param name="webCustomLogo">Whether to use the showcase&#39;s custom logo in the web layout. (required).</param>
        public Album(bool allowContinuousPlay = default(bool), bool allowDownloads = default(bool), bool allowShare = default(bool), bool autoplay = default(bool), string brandColor = default(string), string createdTime = default(string), Picture customLogo = default(Picture), string description = default(string), string domain = default(string), DomainCertificateStateEnum domainCertificateState = default(DomainCertificateStateEnum), decimal duration = default(decimal), AlbumEmbed embed = default(AlbumEmbed), bool? embedBrandColor = default(bool?), bool? embedCustomLogo = default(bool?), bool hideNav = default(bool), bool hideUpcoming = default(bool), bool? hideVimeoLogo = default(bool?), LayoutEnum layout = default(LayoutEnum), string link = default(string), bool loop = default(bool), AlbumMetadata metadata = default(AlbumMetadata), string modifiedTime = default(string), string name = default(string), Picture pictures = default(Picture), AlbumPrivacy privacy = default(AlbumPrivacy), string resourceKey = default(string), bool reviewMode = default(bool), bool seoAllowIndexed = default(bool), string seoDescription = default(string), List<string> seoKeywords = default(List<string>), string seoTitle = default(string), string shareLink = default(string), SortEnum sort = default(SortEnum), ThemeEnum theme = default(ThemeEnum), string uri = default(string), string url = default(string), bool useCustomDomain = default(bool), User user = default(User), bool webBrandColor = default(bool), bool webCustomLogo = default(bool))
        {
            this.AllowContinuousPlay = allowContinuousPlay;
            this.AllowDownloads = allowDownloads;
            this.AllowShare = allowShare;
            this.Autoplay = autoplay;
            // to ensure "brandColor" is required (not null)
            this.BrandColor = brandColor ?? throw new ArgumentNullException("brandColor is a required property for Album and cannot be null");
            // to ensure "createdTime" is required (not null)
            this.CreatedTime = createdTime ?? throw new ArgumentNullException("createdTime is a required property for Album and cannot be null");
            // to ensure "customLogo" is required (not null)
            this.CustomLogo = customLogo ?? throw new ArgumentNullException("customLogo is a required property for Album and cannot be null");
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for Album and cannot be null");
            // to ensure "domain" is required (not null)
            this.Domain = domain ?? throw new ArgumentNullException("domain is a required property for Album and cannot be null");
            this.DomainCertificateState = domainCertificateState;
            this.Duration = duration;
            // to ensure "embed" is required (not null)
            this.Embed = embed ?? throw new ArgumentNullException("embed is a required property for Album and cannot be null");
            // to ensure "embedBrandColor" is required (not null)
            this.EmbedBrandColor = embedBrandColor ?? throw new ArgumentNullException("embedBrandColor is a required property for Album and cannot be null");
            // to ensure "embedCustomLogo" is required (not null)
            this.EmbedCustomLogo = embedCustomLogo ?? throw new ArgumentNullException("embedCustomLogo is a required property for Album and cannot be null");
            this.HideNav = hideNav;
            this.HideUpcoming = hideUpcoming;
            // to ensure "hideVimeoLogo" is required (not null)
            this.HideVimeoLogo = hideVimeoLogo ?? throw new ArgumentNullException("hideVimeoLogo is a required property for Album and cannot be null");
            this.Layout = layout;
            // to ensure "link" is required (not null)
            this.Link = link ?? throw new ArgumentNullException("link is a required property for Album and cannot be null");
            this.Loop = loop;
            // to ensure "metadata" is required (not null)
            this.Metadata = metadata ?? throw new ArgumentNullException("metadata is a required property for Album and cannot be null");
            // to ensure "modifiedTime" is required (not null)
            this.ModifiedTime = modifiedTime ?? throw new ArgumentNullException("modifiedTime is a required property for Album and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Album and cannot be null");
            // to ensure "pictures" is required (not null)
            this.Pictures = pictures ?? throw new ArgumentNullException("pictures is a required property for Album and cannot be null");
            // to ensure "privacy" is required (not null)
            this.Privacy = privacy ?? throw new ArgumentNullException("privacy is a required property for Album and cannot be null");
            // to ensure "resourceKey" is required (not null)
            this.ResourceKey = resourceKey ?? throw new ArgumentNullException("resourceKey is a required property for Album and cannot be null");
            this.ReviewMode = reviewMode;
            this.SeoAllowIndexed = seoAllowIndexed;
            // to ensure "seoDescription" is required (not null)
            this.SeoDescription = seoDescription ?? throw new ArgumentNullException("seoDescription is a required property for Album and cannot be null");
            // to ensure "seoKeywords" is required (not null)
            this.SeoKeywords = seoKeywords ?? throw new ArgumentNullException("seoKeywords is a required property for Album and cannot be null");
            // to ensure "seoTitle" is required (not null)
            this.SeoTitle = seoTitle ?? throw new ArgumentNullException("seoTitle is a required property for Album and cannot be null");
            // to ensure "shareLink" is required (not null)
            this.ShareLink = shareLink ?? throw new ArgumentNullException("shareLink is a required property for Album and cannot be null");
            this.Sort = sort;
            this.Theme = theme;
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for Album and cannot be null");
            // to ensure "url" is required (not null)
            this.Url = url ?? throw new ArgumentNullException("url is a required property for Album and cannot be null");
            this.UseCustomDomain = useCustomDomain;
            // to ensure "user" is required (not null)
            this.User = user ?? throw new ArgumentNullException("user is a required property for Album and cannot be null");
            this.WebBrandColor = webBrandColor;
            this.WebCustomLogo = webCustomLogo;
        }
        
        /// <summary>
        /// Whether the showcase permits continuous play.
        /// </summary>
        /// <value>Whether the showcase permits continuous play.</value>
        [DataMember(Name="allow_continuous_play", EmitDefaultValue=false)]
        public bool AllowContinuousPlay { get; set; }

        /// <summary>
        /// Whether the showcase permits downloads.
        /// </summary>
        /// <value>Whether the showcase permits downloads.</value>
        [DataMember(Name="allow_downloads", EmitDefaultValue=false)]
        public bool AllowDownloads { get; set; }

        /// <summary>
        /// Whether the showcase permits sharing.
        /// </summary>
        /// <value>Whether the showcase permits sharing.</value>
        [DataMember(Name="allow_share", EmitDefaultValue=false)]
        public bool AllowShare { get; set; }

        /// <summary>
        /// Whether to start playback of the next video in the showcase&#39;s embedded playlist immediately after the previous video finishes.
        /// </summary>
        /// <value>Whether to start playback of the next video in the showcase&#39;s embedded playlist immediately after the previous video finishes.</value>
        [DataMember(Name="autoplay", EmitDefaultValue=false)]
        public bool Autoplay { get; set; }

        /// <summary>
        /// The hexadecimal code for the color of the player buttons and showcase controls.
        /// </summary>
        /// <value>The hexadecimal code for the color of the player buttons and showcase controls.</value>
        [DataMember(Name="brand_color", EmitDefaultValue=true)]
        public string BrandColor { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the showcase was created.
        /// </summary>
        /// <value>The time in ISO 8601 format when the showcase was created.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public string CreatedTime { get; set; }

        /// <summary>
        /// The custom logo of the showcase.
        /// </summary>
        /// <value>The custom logo of the showcase.</value>
        [DataMember(Name="custom_logo", EmitDefaultValue=true)]
        public Picture CustomLogo { get; set; }

        /// <summary>
        /// A brief description of the showcase&#39;s content.
        /// </summary>
        /// <value>A brief description of the showcase&#39;s content.</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// The custom domain of the showcase.
        /// </summary>
        /// <value>The custom domain of the showcase.</value>
        [DataMember(Name="domain", EmitDefaultValue=true)]
        public string Domain { get; set; }

        /// <summary>
        /// The total duration in seconds of all the videos in the showcase.
        /// </summary>
        /// <value>The total duration in seconds of all the videos in the showcase.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public decimal Duration { get; set; }

        /// <summary>
        /// Gets or Sets Embed
        /// </summary>
        [DataMember(Name="embed", EmitDefaultValue=false)]
        public AlbumEmbed Embed { get; set; }

        /// <summary>
        /// Whether to show the showcase&#39;s custom brand color in the player of the showcase&#39;s embedded playlist.
        /// </summary>
        /// <value>Whether to show the showcase&#39;s custom brand color in the player of the showcase&#39;s embedded playlist.</value>
        [DataMember(Name="embed_brand_color", EmitDefaultValue=true)]
        public bool? EmbedBrandColor { get; set; }

        /// <summary>
        /// Whether to show the showcase&#39;s custom logo in the player of the showcase&#39;s embedded playlist.
        /// </summary>
        /// <value>Whether to show the showcase&#39;s custom logo in the player of the showcase&#39;s embedded playlist.</value>
        [DataMember(Name="embed_custom_logo", EmitDefaultValue=true)]
        public bool? EmbedCustomLogo { get; set; }

        /// <summary>
        /// Whether to hide Vimeo navigation when displaying the showcase.
        /// </summary>
        /// <value>Whether to hide Vimeo navigation when displaying the showcase.</value>
        [DataMember(Name="hide_nav", EmitDefaultValue=false)]
        public bool HideNav { get; set; }

        /// <summary>
        /// Whether to include the upcoming live event in the showcase.
        /// </summary>
        /// <value>Whether to include the upcoming live event in the showcase.</value>
        [DataMember(Name="hide_upcoming", EmitDefaultValue=false)]
        public bool HideUpcoming { get; set; }

        /// <summary>
        /// Whether to hide the Vimeo logo in the player of the showcase&#39;s embedded playlist.
        /// </summary>
        /// <value>Whether to hide the Vimeo logo in the player of the showcase&#39;s embedded playlist.</value>
        [DataMember(Name="hide_vimeo_logo", EmitDefaultValue=true)]
        public bool? HideVimeoLogo { get; set; }

        /// <summary>
        /// The URL of the showcase.
        /// </summary>
        /// <value>The URL of the showcase.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Whether automatic playback restarts at the top of the showcase&#39;s embedded playlist after reaching the end of the last video in the playlist.
        /// </summary>
        /// <value>Whether automatic playback restarts at the top of the showcase&#39;s embedded playlist after reaching the end of the last video in the playlist.</value>
        [DataMember(Name="loop", EmitDefaultValue=false)]
        public bool Loop { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public AlbumMetadata Metadata { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the showcase was last modified.
        /// </summary>
        /// <value>The time in ISO 8601 format when the showcase was last modified.</value>
        [DataMember(Name="modified_time", EmitDefaultValue=false)]
        public string ModifiedTime { get; set; }

        /// <summary>
        /// The display name of the showcase.
        /// </summary>
        /// <value>The display name of the showcase.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The active image of the showcase. This field defaults to the thumbnail of the last video added to the showcase.
        /// </summary>
        /// <value>The active image of the showcase. This field defaults to the thumbnail of the last video added to the showcase.</value>
        [DataMember(Name="pictures", EmitDefaultValue=false)]
        public Picture Pictures { get; set; }

        /// <summary>
        /// Gets or Sets Privacy
        /// </summary>
        [DataMember(Name="privacy", EmitDefaultValue=false)]
        public AlbumPrivacy Privacy { get; set; }

        /// <summary>
        /// The resource key of the showcase.
        /// </summary>
        /// <value>The resource key of the showcase.</value>
        [DataMember(Name="resource_key", EmitDefaultValue=false)]
        public string ResourceKey { get; set; }

        /// <summary>
        /// Whether showcase videos use the review mode URL.
        /// </summary>
        /// <value>Whether showcase videos use the review mode URL.</value>
        [DataMember(Name="review_mode", EmitDefaultValue=false)]
        public bool ReviewMode { get; set; }

        /// <summary>
        /// Whether search engines can index the showcase.
        /// </summary>
        /// <value>Whether search engines can index the showcase.</value>
        [DataMember(Name="seo_allow_indexed", EmitDefaultValue=false)]
        public bool SeoAllowIndexed { get; set; }

        /// <summary>
        /// The SEO description of the showcase.
        /// </summary>
        /// <value>The SEO description of the showcase.</value>
        [DataMember(Name="seo_description", EmitDefaultValue=true)]
        public string SeoDescription { get; set; }

        /// <summary>
        /// The SEO keywords of the showcase.
        /// </summary>
        /// <value>The SEO keywords of the showcase.</value>
        [DataMember(Name="seo_keywords", EmitDefaultValue=false)]
        public List<string> SeoKeywords { get; set; }

        /// <summary>
        /// The SEO title of the showcase.
        /// </summary>
        /// <value>The SEO title of the showcase.</value>
        [DataMember(Name="seo_title", EmitDefaultValue=true)]
        public string SeoTitle { get; set; }

        /// <summary>
        /// The URL for sharing the showcase.
        /// </summary>
        /// <value>The URL for sharing the showcase.</value>
        [DataMember(Name="share_link", EmitDefaultValue=false)]
        public string ShareLink { get; set; }

        /// <summary>
        /// The URI of the showcase.
        /// </summary>
        /// <value>The URI of the showcase.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The custom Vimeo URL of the showcase.
        /// </summary>
        /// <value>The custom Vimeo URL of the showcase.</value>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Whether the showcase uses a custom domain.
        /// </summary>
        /// <value>Whether the showcase uses a custom domain.</value>
        [DataMember(Name="use_custom_domain", EmitDefaultValue=false)]
        public bool UseCustomDomain { get; set; }

        /// <summary>
        /// The owner of the showcase.
        /// </summary>
        /// <value>The owner of the showcase.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Whether to use the showcase&#39;s brand color in the web layout.
        /// </summary>
        /// <value>Whether to use the showcase&#39;s brand color in the web layout.</value>
        [DataMember(Name="web_brand_color", EmitDefaultValue=false)]
        public bool WebBrandColor { get; set; }

        /// <summary>
        /// Whether to use the showcase&#39;s custom logo in the web layout.
        /// </summary>
        /// <value>Whether to use the showcase&#39;s custom logo in the web layout.</value>
        [DataMember(Name="web_custom_logo", EmitDefaultValue=false)]
        public bool WebCustomLogo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Album {\n");
            sb.Append("  AllowContinuousPlay: ").Append(AllowContinuousPlay).Append("\n");
            sb.Append("  AllowDownloads: ").Append(AllowDownloads).Append("\n");
            sb.Append("  AllowShare: ").Append(AllowShare).Append("\n");
            sb.Append("  Autoplay: ").Append(Autoplay).Append("\n");
            sb.Append("  BrandColor: ").Append(BrandColor).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  CustomLogo: ").Append(CustomLogo).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  DomainCertificateState: ").Append(DomainCertificateState).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Embed: ").Append(Embed).Append("\n");
            sb.Append("  EmbedBrandColor: ").Append(EmbedBrandColor).Append("\n");
            sb.Append("  EmbedCustomLogo: ").Append(EmbedCustomLogo).Append("\n");
            sb.Append("  HideNav: ").Append(HideNav).Append("\n");
            sb.Append("  HideUpcoming: ").Append(HideUpcoming).Append("\n");
            sb.Append("  HideVimeoLogo: ").Append(HideVimeoLogo).Append("\n");
            sb.Append("  Layout: ").Append(Layout).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Loop: ").Append(Loop).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("  ResourceKey: ").Append(ResourceKey).Append("\n");
            sb.Append("  ReviewMode: ").Append(ReviewMode).Append("\n");
            sb.Append("  SeoAllowIndexed: ").Append(SeoAllowIndexed).Append("\n");
            sb.Append("  SeoDescription: ").Append(SeoDescription).Append("\n");
            sb.Append("  SeoKeywords: ").Append(SeoKeywords).Append("\n");
            sb.Append("  SeoTitle: ").Append(SeoTitle).Append("\n");
            sb.Append("  ShareLink: ").Append(ShareLink).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UseCustomDomain: ").Append(UseCustomDomain).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  WebBrandColor: ").Append(WebBrandColor).Append("\n");
            sb.Append("  WebCustomLogo: ").Append(WebCustomLogo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Album);
        }

        /// <summary>
        /// Returns true if Album instances are equal
        /// </summary>
        /// <param name="input">Instance of Album to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Album input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowContinuousPlay == input.AllowContinuousPlay ||
                    this.AllowContinuousPlay.Equals(input.AllowContinuousPlay)
                ) && 
                (
                    this.AllowDownloads == input.AllowDownloads ||
                    this.AllowDownloads.Equals(input.AllowDownloads)
                ) && 
                (
                    this.AllowShare == input.AllowShare ||
                    this.AllowShare.Equals(input.AllowShare)
                ) && 
                (
                    this.Autoplay == input.Autoplay ||
                    this.Autoplay.Equals(input.Autoplay)
                ) && 
                (
                    this.BrandColor == input.BrandColor ||
                    (this.BrandColor != null &&
                    this.BrandColor.Equals(input.BrandColor))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.CustomLogo == input.CustomLogo ||
                    (this.CustomLogo != null &&
                    this.CustomLogo.Equals(input.CustomLogo))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.DomainCertificateState == input.DomainCertificateState ||
                    this.DomainCertificateState.Equals(input.DomainCertificateState)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.Embed == input.Embed ||
                    (this.Embed != null &&
                    this.Embed.Equals(input.Embed))
                ) && 
                (
                    this.EmbedBrandColor == input.EmbedBrandColor ||
                    (this.EmbedBrandColor != null &&
                    this.EmbedBrandColor.Equals(input.EmbedBrandColor))
                ) && 
                (
                    this.EmbedCustomLogo == input.EmbedCustomLogo ||
                    (this.EmbedCustomLogo != null &&
                    this.EmbedCustomLogo.Equals(input.EmbedCustomLogo))
                ) && 
                (
                    this.HideNav == input.HideNav ||
                    this.HideNav.Equals(input.HideNav)
                ) && 
                (
                    this.HideUpcoming == input.HideUpcoming ||
                    this.HideUpcoming.Equals(input.HideUpcoming)
                ) && 
                (
                    this.HideVimeoLogo == input.HideVimeoLogo ||
                    (this.HideVimeoLogo != null &&
                    this.HideVimeoLogo.Equals(input.HideVimeoLogo))
                ) && 
                (
                    this.Layout == input.Layout ||
                    this.Layout.Equals(input.Layout)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Loop == input.Loop ||
                    this.Loop.Equals(input.Loop)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Pictures == input.Pictures ||
                    (this.Pictures != null &&
                    this.Pictures.Equals(input.Pictures))
                ) && 
                (
                    this.Privacy == input.Privacy ||
                    (this.Privacy != null &&
                    this.Privacy.Equals(input.Privacy))
                ) && 
                (
                    this.ResourceKey == input.ResourceKey ||
                    (this.ResourceKey != null &&
                    this.ResourceKey.Equals(input.ResourceKey))
                ) && 
                (
                    this.ReviewMode == input.ReviewMode ||
                    this.ReviewMode.Equals(input.ReviewMode)
                ) && 
                (
                    this.SeoAllowIndexed == input.SeoAllowIndexed ||
                    this.SeoAllowIndexed.Equals(input.SeoAllowIndexed)
                ) && 
                (
                    this.SeoDescription == input.SeoDescription ||
                    (this.SeoDescription != null &&
                    this.SeoDescription.Equals(input.SeoDescription))
                ) && 
                (
                    this.SeoKeywords == input.SeoKeywords ||
                    this.SeoKeywords != null &&
                    input.SeoKeywords != null &&
                    this.SeoKeywords.SequenceEqual(input.SeoKeywords)
                ) && 
                (
                    this.SeoTitle == input.SeoTitle ||
                    (this.SeoTitle != null &&
                    this.SeoTitle.Equals(input.SeoTitle))
                ) && 
                (
                    this.ShareLink == input.ShareLink ||
                    (this.ShareLink != null &&
                    this.ShareLink.Equals(input.ShareLink))
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort.Equals(input.Sort)
                ) && 
                (
                    this.Theme == input.Theme ||
                    this.Theme.Equals(input.Theme)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.UseCustomDomain == input.UseCustomDomain ||
                    this.UseCustomDomain.Equals(input.UseCustomDomain)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.WebBrandColor == input.WebBrandColor ||
                    this.WebBrandColor.Equals(input.WebBrandColor)
                ) && 
                (
                    this.WebCustomLogo == input.WebCustomLogo ||
                    this.WebCustomLogo.Equals(input.WebCustomLogo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowContinuousPlay.GetHashCode();
                hashCode = hashCode * 59 + this.AllowDownloads.GetHashCode();
                hashCode = hashCode * 59 + this.AllowShare.GetHashCode();
                hashCode = hashCode * 59 + this.Autoplay.GetHashCode();
                if (this.BrandColor != null)
                    hashCode = hashCode * 59 + this.BrandColor.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.CustomLogo != null)
                    hashCode = hashCode * 59 + this.CustomLogo.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                hashCode = hashCode * 59 + this.DomainCertificateState.GetHashCode();
                hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Embed != null)
                    hashCode = hashCode * 59 + this.Embed.GetHashCode();
                if (this.EmbedBrandColor != null)
                    hashCode = hashCode * 59 + this.EmbedBrandColor.GetHashCode();
                if (this.EmbedCustomLogo != null)
                    hashCode = hashCode * 59 + this.EmbedCustomLogo.GetHashCode();
                hashCode = hashCode * 59 + this.HideNav.GetHashCode();
                hashCode = hashCode * 59 + this.HideUpcoming.GetHashCode();
                if (this.HideVimeoLogo != null)
                    hashCode = hashCode * 59 + this.HideVimeoLogo.GetHashCode();
                hashCode = hashCode * 59 + this.Layout.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                hashCode = hashCode * 59 + this.Loop.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Pictures != null)
                    hashCode = hashCode * 59 + this.Pictures.GetHashCode();
                if (this.Privacy != null)
                    hashCode = hashCode * 59 + this.Privacy.GetHashCode();
                if (this.ResourceKey != null)
                    hashCode = hashCode * 59 + this.ResourceKey.GetHashCode();
                hashCode = hashCode * 59 + this.ReviewMode.GetHashCode();
                hashCode = hashCode * 59 + this.SeoAllowIndexed.GetHashCode();
                if (this.SeoDescription != null)
                    hashCode = hashCode * 59 + this.SeoDescription.GetHashCode();
                if (this.SeoKeywords != null)
                    hashCode = hashCode * 59 + this.SeoKeywords.GetHashCode();
                if (this.SeoTitle != null)
                    hashCode = hashCode * 59 + this.SeoTitle.GetHashCode();
                if (this.ShareLink != null)
                    hashCode = hashCode * 59 + this.ShareLink.GetHashCode();
                hashCode = hashCode * 59 + this.Sort.GetHashCode();
                hashCode = hashCode * 59 + this.Theme.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                hashCode = hashCode * 59 + this.UseCustomDomain.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                hashCode = hashCode * 59 + this.WebBrandColor.GetHashCode();
                hashCode = hashCode * 59 + this.WebCustomLogo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
