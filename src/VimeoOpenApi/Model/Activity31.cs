/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Activity31
    /// </summary>
    [DataContract]
    public partial class Activity31 :  IEquatable<Activity31>, IValidatableObject
    {
        /// <summary>
        /// The activity type.  Option descriptions:  * &#x60;appearance&#x60; - The activity is an appearance action.  * &#x60;category&#x60; - The activity is a category action.  * &#x60;channel&#x60; - The activity is a channel action.  * &#x60;facebook_feed&#x60; - The activity is a Facebook feed action.  * &#x60;group&#x60; - The activity is a group action.  * &#x60;like&#x60; - The activity is a like action.  * &#x60;ondemand&#x60; - The activity is a Vimeo On Demand action.  * &#x60;share&#x60; - The activity is a share action.  * &#x60;tag&#x60; - The activity is a tag action.  * &#x60;twitter_timeline&#x60; - The activity is a Twitter timeline action.  * &#x60;upload&#x60; - The activity is an upload action. 
        /// </summary>
        /// <value>The activity type.  Option descriptions:  * &#x60;appearance&#x60; - The activity is an appearance action.  * &#x60;category&#x60; - The activity is a category action.  * &#x60;channel&#x60; - The activity is a channel action.  * &#x60;facebook_feed&#x60; - The activity is a Facebook feed action.  * &#x60;group&#x60; - The activity is a group action.  * &#x60;like&#x60; - The activity is a like action.  * &#x60;ondemand&#x60; - The activity is a Vimeo On Demand action.  * &#x60;share&#x60; - The activity is a share action.  * &#x60;tag&#x60; - The activity is a tag action.  * &#x60;twitter_timeline&#x60; - The activity is a Twitter timeline action.  * &#x60;upload&#x60; - The activity is an upload action. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Appearance for value: appearance
            /// </summary>
            [EnumMember(Value = "appearance")]
            Appearance = 1,

            /// <summary>
            /// Enum Category for value: category
            /// </summary>
            [EnumMember(Value = "category")]
            Category = 2,

            /// <summary>
            /// Enum Channel for value: channel
            /// </summary>
            [EnumMember(Value = "channel")]
            Channel = 3,

            /// <summary>
            /// Enum Facebookfeed for value: facebook_feed
            /// </summary>
            [EnumMember(Value = "facebook_feed")]
            Facebookfeed = 4,

            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 5,

            /// <summary>
            /// Enum Like for value: like
            /// </summary>
            [EnumMember(Value = "like")]
            Like = 6,

            /// <summary>
            /// Enum Ondemand for value: ondemand
            /// </summary>
            [EnumMember(Value = "ondemand")]
            Ondemand = 7,

            /// <summary>
            /// Enum Share for value: share
            /// </summary>
            [EnumMember(Value = "share")]
            Share = 8,

            /// <summary>
            /// Enum Tag for value: tag
            /// </summary>
            [EnumMember(Value = "tag")]
            Tag = 9,

            /// <summary>
            /// Enum Twittertimeline for value: twitter_timeline
            /// </summary>
            [EnumMember(Value = "twitter_timeline")]
            Twittertimeline = 10,

            /// <summary>
            /// Enum Upload for value: upload
            /// </summary>
            [EnumMember(Value = "upload")]
            Upload = 11

        }

        /// <summary>
        /// The activity type.  Option descriptions:  * &#x60;appearance&#x60; - The activity is an appearance action.  * &#x60;category&#x60; - The activity is a category action.  * &#x60;channel&#x60; - The activity is a channel action.  * &#x60;facebook_feed&#x60; - The activity is a Facebook feed action.  * &#x60;group&#x60; - The activity is a group action.  * &#x60;like&#x60; - The activity is a like action.  * &#x60;ondemand&#x60; - The activity is a Vimeo On Demand action.  * &#x60;share&#x60; - The activity is a share action.  * &#x60;tag&#x60; - The activity is a tag action.  * &#x60;twitter_timeline&#x60; - The activity is a Twitter timeline action.  * &#x60;upload&#x60; - The activity is an upload action. 
        /// </summary>
        /// <value>The activity type.  Option descriptions:  * &#x60;appearance&#x60; - The activity is an appearance action.  * &#x60;category&#x60; - The activity is a category action.  * &#x60;channel&#x60; - The activity is a channel action.  * &#x60;facebook_feed&#x60; - The activity is a Facebook feed action.  * &#x60;group&#x60; - The activity is a group action.  * &#x60;like&#x60; - The activity is a like action.  * &#x60;ondemand&#x60; - The activity is a Vimeo On Demand action.  * &#x60;share&#x60; - The activity is a share action.  * &#x60;tag&#x60; - The activity is a tag action.  * &#x60;twitter_timeline&#x60; - The activity is a Twitter timeline action.  * &#x60;upload&#x60; - The activity is an upload action. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity31" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Activity31() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity31" /> class.
        /// </summary>
        /// <param name="category">The category associated with the event. This field is present only when the activity type is &#x60;category&#x60;..</param>
        /// <param name="channel">The channel associated with the event. This field is present only when the activity type is &#x60;channel&#x60;..</param>
        /// <param name="clip">The video associated with the activity. (required).</param>
        /// <param name="group">The group associated with the event. This field is present only when the activity type is &#x60;group&#x60;..</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="tag">The tag associated with the event. This field is present only when the activity type is &#x60;tag&#x60;..</param>
        /// <param name="time">The time that the event occurred. (required).</param>
        /// <param name="type">The activity type.  Option descriptions:  * &#x60;appearance&#x60; - The activity is an appearance action.  * &#x60;category&#x60; - The activity is a category action.  * &#x60;channel&#x60; - The activity is a channel action.  * &#x60;facebook_feed&#x60; - The activity is a Facebook feed action.  * &#x60;group&#x60; - The activity is a group action.  * &#x60;like&#x60; - The activity is a like action.  * &#x60;ondemand&#x60; - The activity is a Vimeo On Demand action.  * &#x60;share&#x60; - The activity is a share action.  * &#x60;tag&#x60; - The activity is a tag action.  * &#x60;twitter_timeline&#x60; - The activity is a Twitter timeline action.  * &#x60;upload&#x60; - The activity is an upload action.  (required).</param>
        /// <param name="user">The user associated with the event. This field is present only when the activity type is &#x60;like&#x60;, &#x60;appearance&#x60;, or &#x60;share&#x60;..</param>
        public Activity31(Category category = default(Category), Channel channel = default(Channel), Video clip = default(Video), Group group = default(Group), Activity31Metadata metadata = default(Activity31Metadata), Tag tag = default(Tag), string time = default(string), TypeEnum type = default(TypeEnum), User user = default(User))
        {
            // to ensure "clip" is required (not null)
            this.Clip = clip ?? throw new ArgumentNullException("clip is a required property for Activity31 and cannot be null");
            // to ensure "metadata" is required (not null)
            this.Metadata = metadata ?? throw new ArgumentNullException("metadata is a required property for Activity31 and cannot be null");
            // to ensure "time" is required (not null)
            this.Time = time ?? throw new ArgumentNullException("time is a required property for Activity31 and cannot be null");
            this.Type = type;
            this.Category = category;
            this.Channel = channel;
            this.Group = group;
            this.Tag = tag;
            this.User = user;
        }
        
        /// <summary>
        /// The category associated with the event. This field is present only when the activity type is &#x60;category&#x60;.
        /// </summary>
        /// <value>The category associated with the event. This field is present only when the activity type is &#x60;category&#x60;.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public Category Category { get; set; }

        /// <summary>
        /// The channel associated with the event. This field is present only when the activity type is &#x60;channel&#x60;.
        /// </summary>
        /// <value>The channel associated with the event. This field is present only when the activity type is &#x60;channel&#x60;.</value>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public Channel Channel { get; set; }

        /// <summary>
        /// The video associated with the activity.
        /// </summary>
        /// <value>The video associated with the activity.</value>
        [DataMember(Name="clip", EmitDefaultValue=false)]
        public Video Clip { get; set; }

        /// <summary>
        /// The group associated with the event. This field is present only when the activity type is &#x60;group&#x60;.
        /// </summary>
        /// <value>The group associated with the event. This field is present only when the activity type is &#x60;group&#x60;.</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public Group Group { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Activity31Metadata Metadata { get; set; }

        /// <summary>
        /// The tag associated with the event. This field is present only when the activity type is &#x60;tag&#x60;.
        /// </summary>
        /// <value>The tag associated with the event. This field is present only when the activity type is &#x60;tag&#x60;.</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public Tag Tag { get; set; }

        /// <summary>
        /// The time that the event occurred.
        /// </summary>
        /// <value>The time that the event occurred.</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }

        /// <summary>
        /// The user associated with the event. This field is present only when the activity type is &#x60;like&#x60;, &#x60;appearance&#x60;, or &#x60;share&#x60;.
        /// </summary>
        /// <value>The user associated with the event. This field is present only when the activity type is &#x60;like&#x60;, &#x60;appearance&#x60;, or &#x60;share&#x60;.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Activity31 {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Clip: ").Append(Clip).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Activity31);
        }

        /// <summary>
        /// Returns true if Activity31 instances are equal
        /// </summary>
        /// <param name="input">Instance of Activity31 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Activity31 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.Clip == input.Clip ||
                    (this.Clip != null &&
                    this.Clip.Equals(input.Clip))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.Clip != null)
                    hashCode = hashCode * 59 + this.Clip.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
