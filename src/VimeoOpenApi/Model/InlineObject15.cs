/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// InlineObject15
    /// </summary>
    [DataContract]
    public partial class InlineObject15 :  IEquatable<InlineObject15>, IValidatableObject
    {
        /// <summary>
        /// The authenticated user&#39;s gender.  Option descriptions:  * &#x60;f&#x60; - The user&#39;s preferred pronouns are she and her.  * &#x60;m&#x60; - The user&#39;s preferred pronouns are he and him.  * &#x60;n&#x60; - The user would rather not give preferred pronouns.  * &#x60;o&#x60; - The user&#39;s preferred pronouns are they and them. 
        /// </summary>
        /// <value>The authenticated user&#39;s gender.  Option descriptions:  * &#x60;f&#x60; - The user&#39;s preferred pronouns are she and her.  * &#x60;m&#x60; - The user&#39;s preferred pronouns are he and him.  * &#x60;n&#x60; - The user would rather not give preferred pronouns.  * &#x60;o&#x60; - The user&#39;s preferred pronouns are they and them. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            /// <summary>
            /// Enum F for value: f
            /// </summary>
            [EnumMember(Value = "f")]
            F = 1,

            /// <summary>
            /// Enum M for value: m
            /// </summary>
            [EnumMember(Value = "m")]
            M = 2,

            /// <summary>
            /// Enum N for value: n
            /// </summary>
            [EnumMember(Value = "n")]
            N = 3,

            /// <summary>
            /// Enum O for value: o
            /// </summary>
            [EnumMember(Value = "o")]
            O = 4

        }

        /// <summary>
        /// The authenticated user&#39;s gender.  Option descriptions:  * &#x60;f&#x60; - The user&#39;s preferred pronouns are she and her.  * &#x60;m&#x60; - The user&#39;s preferred pronouns are he and him.  * &#x60;n&#x60; - The user would rather not give preferred pronouns.  * &#x60;o&#x60; - The user&#39;s preferred pronouns are they and them. 
        /// </summary>
        /// <value>The authenticated user&#39;s gender.  Option descriptions:  * &#x60;f&#x60; - The user&#39;s preferred pronouns are she and her.  * &#x60;m&#x60; - The user&#39;s preferred pronouns are he and him.  * &#x60;n&#x60; - The user would rather not give preferred pronouns.  * &#x60;o&#x60; - The user&#39;s preferred pronouns are they and them. </value>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject15" /> class.
        /// </summary>
        /// <param name="bio">The user&#39;s bio..</param>
        /// <param name="contentFilter">A list of values describing the content in the user&#39;s videos. Find the full list in the [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. You must provide a comma-separated list if you&#39;re using a query string or an array if you&#39;re using JSON..</param>
        /// <param name="gender">The authenticated user&#39;s gender.  Option descriptions:  * &#x60;f&#x60; - The user&#39;s preferred pronouns are she and her.  * &#x60;m&#x60; - The user&#39;s preferred pronouns are he and him.  * &#x60;n&#x60; - The user would rather not give preferred pronouns.  * &#x60;o&#x60; - The user&#39;s preferred pronouns are they and them. .</param>
        /// <param name="link">The user&#39;s custom Vimeo URL..</param>
        /// <param name="location">The user&#39;s location..</param>
        /// <param name="name">The user&#39;s display name..</param>
        /// <param name="password">The default password for all future videos that this user uploads. To use this field, the **videos.privacy.view** field must be &#x60;password&#x60;..</param>
        /// <param name="videos">videos.</param>
        public InlineObject15(string bio = default(string), List<string> contentFilter = default(List<string>), GenderEnum? gender = default(GenderEnum?), string link = default(string), string location = default(string), string name = default(string), string password = default(string), MeVideos videos = default(MeVideos))
        {
            this.Bio = bio;
            this.ContentFilter = contentFilter;
            this.Gender = gender;
            this.Link = link;
            this.Location = location;
            this.Name = name;
            this.Password = password;
            this.Videos = videos;
        }
        
        /// <summary>
        /// The user&#39;s bio.
        /// </summary>
        /// <value>The user&#39;s bio.</value>
        [DataMember(Name="bio", EmitDefaultValue=false)]
        public string Bio { get; set; }

        /// <summary>
        /// A list of values describing the content in the user&#39;s videos. Find the full list in the [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. You must provide a comma-separated list if you&#39;re using a query string or an array if you&#39;re using JSON.
        /// </summary>
        /// <value>A list of values describing the content in the user&#39;s videos. Find the full list in the [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. You must provide a comma-separated list if you&#39;re using a query string or an array if you&#39;re using JSON.</value>
        [DataMember(Name="content_filter", EmitDefaultValue=false)]
        public List<string> ContentFilter { get; set; }

        /// <summary>
        /// The user&#39;s custom Vimeo URL.
        /// </summary>
        /// <value>The user&#39;s custom Vimeo URL.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// The user&#39;s location.
        /// </summary>
        /// <value>The user&#39;s location.</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// The user&#39;s display name.
        /// </summary>
        /// <value>The user&#39;s display name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The default password for all future videos that this user uploads. To use this field, the **videos.privacy.view** field must be &#x60;password&#x60;.
        /// </summary>
        /// <value>The default password for all future videos that this user uploads. To use this field, the **videos.privacy.view** field must be &#x60;password&#x60;.</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Videos
        /// </summary>
        [DataMember(Name="videos", EmitDefaultValue=false)]
        public MeVideos Videos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject15 {\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  ContentFilter: ").Append(ContentFilter).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject15);
        }

        /// <summary>
        /// Returns true if InlineObject15 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject15 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject15 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bio == input.Bio ||
                    (this.Bio != null &&
                    this.Bio.Equals(input.Bio))
                ) && 
                (
                    this.ContentFilter == input.ContentFilter ||
                    this.ContentFilter != null &&
                    input.ContentFilter != null &&
                    this.ContentFilter.SequenceEqual(input.ContentFilter)
                ) && 
                (
                    this.Gender == input.Gender ||
                    this.Gender.Equals(input.Gender)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Videos == input.Videos ||
                    (this.Videos != null &&
                    this.Videos.Equals(input.Videos))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bio != null)
                    hashCode = hashCode * 59 + this.Bio.GetHashCode();
                if (this.ContentFilter != null)
                    hashCode = hashCode * 59 + this.ContentFilter.GetHashCode();
                hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Videos != null)
                    hashCode = hashCode * 59 + this.Videos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
