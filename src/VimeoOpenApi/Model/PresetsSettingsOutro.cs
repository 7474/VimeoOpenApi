/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// PresetsSettingsOutro
    /// </summary>
    [DataContract]
    public partial class PresetsSettingsOutro :  IEquatable<PresetsSettingsOutro>, IValidatableObject
    {
        /// <summary>
        /// The preset outro type:
        /// </summary>
        /// <value>The preset outro type:</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Link for value: link
            /// </summary>
            [EnumMember(Value = "link")]
            Link = 1,

            /// <summary>
            /// Enum Noidea for value: no idea
            /// </summary>
            [EnumMember(Value = "no idea")]
            Noidea = 2,

            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 3,

            /// <summary>
            /// Enum Uploadedclips for value: uploaded_clips
            /// </summary>
            [EnumMember(Value = "uploaded_clips")]
            Uploadedclips = 4,

            /// <summary>
            /// Enum Uploadedvideos for value: uploaded_videos
            /// </summary>
            [EnumMember(Value = "uploaded_videos")]
            Uploadedvideos = 5

        }

        /// <summary>
        /// The preset outro type:
        /// </summary>
        /// <value>The preset outro type:</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PresetsSettingsOutro" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PresetsSettingsOutro() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PresetsSettingsOutro" /> class.
        /// </summary>
        /// <param name="clips">A comma-separated list of video URIs. Present only if the type is &#x60;uploaded_clips&#x60;..</param>
        /// <param name="link">link.</param>
        /// <param name="text">The outro text. Present only if the type is &#x60;text&#x60;..</param>
        /// <param name="type">The preset outro type: (required).</param>
        /// <param name="videos">A comma-separated list of video URIs. Present only if type is &#x60;no idea&#x60;..</param>
        public PresetsSettingsOutro(string clips = default(string), PresetsSettingsOutroLink link = default(PresetsSettingsOutroLink), string text = default(string), TypeEnum type = default(TypeEnum), string videos = default(string))
        {
            this.Type = type;
            this.Clips = clips;
            this.Link = link;
            this.Text = text;
            this.Videos = videos;
        }
        
        /// <summary>
        /// A comma-separated list of video URIs. Present only if the type is &#x60;uploaded_clips&#x60;.
        /// </summary>
        /// <value>A comma-separated list of video URIs. Present only if the type is &#x60;uploaded_clips&#x60;.</value>
        [DataMember(Name="clips", EmitDefaultValue=true)]
        public string Clips { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name="link", EmitDefaultValue=true)]
        public PresetsSettingsOutroLink Link { get; set; }

        /// <summary>
        /// The outro text. Present only if the type is &#x60;text&#x60;.
        /// </summary>
        /// <value>The outro text. Present only if the type is &#x60;text&#x60;.</value>
        [DataMember(Name="text", EmitDefaultValue=true)]
        public string Text { get; set; }

        /// <summary>
        /// A comma-separated list of video URIs. Present only if type is &#x60;no idea&#x60;.
        /// </summary>
        /// <value>A comma-separated list of video URIs. Present only if type is &#x60;no idea&#x60;.</value>
        [DataMember(Name="videos", EmitDefaultValue=true)]
        public string Videos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PresetsSettingsOutro {\n");
            sb.Append("  Clips: ").Append(Clips).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PresetsSettingsOutro);
        }

        /// <summary>
        /// Returns true if PresetsSettingsOutro instances are equal
        /// </summary>
        /// <param name="input">Instance of PresetsSettingsOutro to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PresetsSettingsOutro input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Clips == input.Clips ||
                    (this.Clips != null &&
                    this.Clips.Equals(input.Clips))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Videos == input.Videos ||
                    (this.Videos != null &&
                    this.Videos.Equals(input.Videos))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Clips != null)
                    hashCode = hashCode * 59 + this.Clips.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Videos != null)
                    hashCode = hashCode * 59 + this.Videos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
