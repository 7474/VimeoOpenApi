/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// OnDemandPagePreorder
    /// </summary>
    [DataContract]
    public partial class OnDemandPagePreorder :  IEquatable<OnDemandPagePreorder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPagePreorder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OnDemandPagePreorder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPagePreorder" /> class.
        /// </summary>
        /// <param name="active">Whether the On Demand page is available for preorder. (required).</param>
        /// <param name="cancelTime">The time in ISO 8601 format when the preorder was cancelled. (required).</param>
        /// <param name="publishTime">The time in ISO 8601 format when the preorder was released to the public. (required).</param>
        /// <param name="time">The time in ISO 8601 format when the preorder started. (required).</param>
        public OnDemandPagePreorder(bool active = default(bool), string cancelTime = default(string), string publishTime = default(string), string time = default(string))
        {
            this.Active = active;
            // to ensure "cancelTime" is required (not null)
            this.CancelTime = cancelTime ?? throw new ArgumentNullException("cancelTime is a required property for OnDemandPagePreorder and cannot be null");
            // to ensure "publishTime" is required (not null)
            this.PublishTime = publishTime ?? throw new ArgumentNullException("publishTime is a required property for OnDemandPagePreorder and cannot be null");
            // to ensure "time" is required (not null)
            this.Time = time ?? throw new ArgumentNullException("time is a required property for OnDemandPagePreorder and cannot be null");
        }
        
        /// <summary>
        /// Whether the On Demand page is available for preorder.
        /// </summary>
        /// <value>Whether the On Demand page is available for preorder.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the preorder was cancelled.
        /// </summary>
        /// <value>The time in ISO 8601 format when the preorder was cancelled.</value>
        [DataMember(Name="cancel_time", EmitDefaultValue=false)]
        public string CancelTime { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the preorder was released to the public.
        /// </summary>
        /// <value>The time in ISO 8601 format when the preorder was released to the public.</value>
        [DataMember(Name="publish_time", EmitDefaultValue=false)]
        public string PublishTime { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the preorder started.
        /// </summary>
        /// <value>The time in ISO 8601 format when the preorder started.</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnDemandPagePreorder {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CancelTime: ").Append(CancelTime).Append("\n");
            sb.Append("  PublishTime: ").Append(PublishTime).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnDemandPagePreorder);
        }

        /// <summary>
        /// Returns true if OnDemandPagePreorder instances are equal
        /// </summary>
        /// <param name="input">Instance of OnDemandPagePreorder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnDemandPagePreorder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.CancelTime == input.CancelTime ||
                    (this.CancelTime != null &&
                    this.CancelTime.Equals(input.CancelTime))
                ) && 
                (
                    this.PublishTime == input.PublishTime ||
                    (this.PublishTime != null &&
                    this.PublishTime.Equals(input.PublishTime))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.CancelTime != null)
                    hashCode = hashCode * 59 + this.CancelTime.GetHashCode();
                if (this.PublishTime != null)
                    hashCode = hashCode * 59 + this.PublishTime.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
