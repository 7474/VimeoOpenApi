/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Location
    /// </summary>
    [DataContract]
    public partial class Location :  IEquatable<Location>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Location() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="city">The authenticated user&#39;s city. (required).</param>
        /// <param name="country">The authenticated user&#39;s country. (required).</param>
        /// <param name="countryIsoCode">The ISO code of the authenticated user&#39;s country. (required).</param>
        /// <param name="formattedAddress">The authenticated user&#39;s formatted address string. (required).</param>
        /// <param name="latitude">The authenticated user&#39;s latitude. (required).</param>
        /// <param name="longitude">The authenticated user&#39;s longitude. (required).</param>
        /// <param name="neighborhood">The authenticated user&#39;s neighborhood. (required).</param>
        /// <param name="state">The authenticated user&#39;s state. (required).</param>
        /// <param name="stateIsoCode">The ISO code of the authenticated user&#39;s state. (required).</param>
        /// <param name="subLocality">The authenticated user&#39;s sub-locality. (required).</param>
        public Location(string city = default(string), string country = default(string), string countryIsoCode = default(string), string formattedAddress = default(string), decimal latitude = default(decimal), decimal longitude = default(decimal), string neighborhood = default(string), string state = default(string), string stateIsoCode = default(string), string subLocality = default(string))
        {
            // to ensure "city" is required (not null)
            this.City = city ?? throw new ArgumentNullException("city is a required property for Location and cannot be null");
            // to ensure "country" is required (not null)
            this.Country = country ?? throw new ArgumentNullException("country is a required property for Location and cannot be null");
            // to ensure "countryIsoCode" is required (not null)
            this.CountryIsoCode = countryIsoCode ?? throw new ArgumentNullException("countryIsoCode is a required property for Location and cannot be null");
            // to ensure "formattedAddress" is required (not null)
            this.FormattedAddress = formattedAddress ?? throw new ArgumentNullException("formattedAddress is a required property for Location and cannot be null");
            this.Latitude = latitude;
            this.Longitude = longitude;
            // to ensure "neighborhood" is required (not null)
            this.Neighborhood = neighborhood ?? throw new ArgumentNullException("neighborhood is a required property for Location and cannot be null");
            // to ensure "state" is required (not null)
            this.State = state ?? throw new ArgumentNullException("state is a required property for Location and cannot be null");
            // to ensure "stateIsoCode" is required (not null)
            this.StateIsoCode = stateIsoCode ?? throw new ArgumentNullException("stateIsoCode is a required property for Location and cannot be null");
            // to ensure "subLocality" is required (not null)
            this.SubLocality = subLocality ?? throw new ArgumentNullException("subLocality is a required property for Location and cannot be null");
        }
        
        /// <summary>
        /// The authenticated user&#39;s city.
        /// </summary>
        /// <value>The authenticated user&#39;s city.</value>
        [DataMember(Name="city", EmitDefaultValue=true)]
        public string City { get; set; }

        /// <summary>
        /// The authenticated user&#39;s country.
        /// </summary>
        /// <value>The authenticated user&#39;s country.</value>
        [DataMember(Name="country", EmitDefaultValue=true)]
        public string Country { get; set; }

        /// <summary>
        /// The ISO code of the authenticated user&#39;s country.
        /// </summary>
        /// <value>The ISO code of the authenticated user&#39;s country.</value>
        [DataMember(Name="country_iso_code", EmitDefaultValue=false)]
        public string CountryIsoCode { get; set; }

        /// <summary>
        /// The authenticated user&#39;s formatted address string.
        /// </summary>
        /// <value>The authenticated user&#39;s formatted address string.</value>
        [DataMember(Name="formatted_address", EmitDefaultValue=false)]
        public string FormattedAddress { get; set; }

        /// <summary>
        /// The authenticated user&#39;s latitude.
        /// </summary>
        /// <value>The authenticated user&#39;s latitude.</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public decimal Latitude { get; set; }

        /// <summary>
        /// The authenticated user&#39;s longitude.
        /// </summary>
        /// <value>The authenticated user&#39;s longitude.</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public decimal Longitude { get; set; }

        /// <summary>
        /// The authenticated user&#39;s neighborhood.
        /// </summary>
        /// <value>The authenticated user&#39;s neighborhood.</value>
        [DataMember(Name="neighborhood", EmitDefaultValue=true)]
        public string Neighborhood { get; set; }

        /// <summary>
        /// The authenticated user&#39;s state.
        /// </summary>
        /// <value>The authenticated user&#39;s state.</value>
        [DataMember(Name="state", EmitDefaultValue=true)]
        public string State { get; set; }

        /// <summary>
        /// The ISO code of the authenticated user&#39;s state.
        /// </summary>
        /// <value>The ISO code of the authenticated user&#39;s state.</value>
        [DataMember(Name="state_iso_code", EmitDefaultValue=true)]
        public string StateIsoCode { get; set; }

        /// <summary>
        /// The authenticated user&#39;s sub-locality.
        /// </summary>
        /// <value>The authenticated user&#39;s sub-locality.</value>
        [DataMember(Name="sub_locality", EmitDefaultValue=true)]
        public string SubLocality { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryIsoCode: ").Append(CountryIsoCode).Append("\n");
            sb.Append("  FormattedAddress: ").Append(FormattedAddress).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Neighborhood: ").Append(Neighborhood).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateIsoCode: ").Append(StateIsoCode).Append("\n");
            sb.Append("  SubLocality: ").Append(SubLocality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="input">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CountryIsoCode == input.CountryIsoCode ||
                    (this.CountryIsoCode != null &&
                    this.CountryIsoCode.Equals(input.CountryIsoCode))
                ) && 
                (
                    this.FormattedAddress == input.FormattedAddress ||
                    (this.FormattedAddress != null &&
                    this.FormattedAddress.Equals(input.FormattedAddress))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.Neighborhood == input.Neighborhood ||
                    (this.Neighborhood != null &&
                    this.Neighborhood.Equals(input.Neighborhood))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateIsoCode == input.StateIsoCode ||
                    (this.StateIsoCode != null &&
                    this.StateIsoCode.Equals(input.StateIsoCode))
                ) && 
                (
                    this.SubLocality == input.SubLocality ||
                    (this.SubLocality != null &&
                    this.SubLocality.Equals(input.SubLocality))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CountryIsoCode != null)
                    hashCode = hashCode * 59 + this.CountryIsoCode.GetHashCode();
                if (this.FormattedAddress != null)
                    hashCode = hashCode * 59 + this.FormattedAddress.GetHashCode();
                hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.Neighborhood != null)
                    hashCode = hashCode * 59 + this.Neighborhood.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StateIsoCode != null)
                    hashCode = hashCode * 59 + this.StateIsoCode.GetHashCode();
                if (this.SubLocality != null)
                    hashCode = hashCode * 59 + this.SubLocality.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
