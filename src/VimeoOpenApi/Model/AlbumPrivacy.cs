/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// The privacy settings of the showcase.
    /// </summary>
    [DataContract]
    public partial class AlbumPrivacy :  IEquatable<AlbumPrivacy>, IValidatableObject
    {
        /// <summary>
        /// The access level of the showcase.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the showcase.  * &#x60;embed_only&#x60; - The showcase doesn&#39;t appear on Vimeo, but the owner can embed it on other sites.  * &#x60;nobody&#x60; - No one can access the showacse, including the owner.  * &#x60;password&#x60; - Only those with the password can access the showcase.  * &#x60;team&#x60; - Only the owner and members of the owner&#39;s team can access the showcase. 
        /// </summary>
        /// <value>The access level of the showcase.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the showcase.  * &#x60;embed_only&#x60; - The showcase doesn&#39;t appear on Vimeo, but the owner can embed it on other sites.  * &#x60;nobody&#x60; - No one can access the showacse, including the owner.  * &#x60;password&#x60; - Only those with the password can access the showcase.  * &#x60;team&#x60; - Only the owner and members of the owner&#39;s team can access the showcase. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ViewEnum
        {
            /// <summary>
            /// Enum Anybody for value: anybody
            /// </summary>
            [EnumMember(Value = "anybody")]
            Anybody = 1,

            /// <summary>
            /// Enum Embedonly for value: embed_only
            /// </summary>
            [EnumMember(Value = "embed_only")]
            Embedonly = 2,

            /// <summary>
            /// Enum Nobody for value: nobody
            /// </summary>
            [EnumMember(Value = "nobody")]
            Nobody = 3,

            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            [EnumMember(Value = "password")]
            Password = 4,

            /// <summary>
            /// Enum Team for value: team
            /// </summary>
            [EnumMember(Value = "team")]
            Team = 5

        }

        /// <summary>
        /// The access level of the showcase.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the showcase.  * &#x60;embed_only&#x60; - The showcase doesn&#39;t appear on Vimeo, but the owner can embed it on other sites.  * &#x60;nobody&#x60; - No one can access the showacse, including the owner.  * &#x60;password&#x60; - Only those with the password can access the showcase.  * &#x60;team&#x60; - Only the owner and members of the owner&#39;s team can access the showcase. 
        /// </summary>
        /// <value>The access level of the showcase.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the showcase.  * &#x60;embed_only&#x60; - The showcase doesn&#39;t appear on Vimeo, but the owner can embed it on other sites.  * &#x60;nobody&#x60; - No one can access the showacse, including the owner.  * &#x60;password&#x60; - Only those with the password can access the showcase.  * &#x60;team&#x60; - Only the owner and members of the owner&#39;s team can access the showcase. </value>
        [DataMember(Name="view", EmitDefaultValue=false)]
        public ViewEnum View { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumPrivacy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AlbumPrivacy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumPrivacy" /> class.
        /// </summary>
        /// <param name="password">The showcase&#39;s password. This field appears only when **privacy.view** is &#x60;password&#x60;..</param>
        /// <param name="view">The access level of the showcase.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the showcase.  * &#x60;embed_only&#x60; - The showcase doesn&#39;t appear on Vimeo, but the owner can embed it on other sites.  * &#x60;nobody&#x60; - No one can access the showacse, including the owner.  * &#x60;password&#x60; - Only those with the password can access the showcase.  * &#x60;team&#x60; - Only the owner and members of the owner&#39;s team can access the showcase.  (required).</param>
        public AlbumPrivacy(string password = default(string), ViewEnum view = default(ViewEnum))
        {
            this.View = view;
            this.Password = password;
        }
        
        /// <summary>
        /// The showcase&#39;s password. This field appears only when **privacy.view** is &#x60;password&#x60;.
        /// </summary>
        /// <value>The showcase&#39;s password. This field appears only when **privacy.view** is &#x60;password&#x60;.</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlbumPrivacy {\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlbumPrivacy);
        }

        /// <summary>
        /// Returns true if AlbumPrivacy instances are equal
        /// </summary>
        /// <param name="input">Instance of AlbumPrivacy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlbumPrivacy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.View == input.View ||
                    this.View.Equals(input.View)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                hashCode = hashCode * 59 + this.View.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
