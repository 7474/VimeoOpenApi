/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// InlineObject36
    /// </summary>
    [DataContract]
    public partial class InlineObject36 :  IEquatable<InlineObject36>, IValidatableObject
    {
        /// <summary>
        /// The type of the video.
        /// </summary>
        /// <value>The type of the video.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Extra for value: extra
            /// </summary>
            [EnumMember(Value = "extra")]
            Extra = 1,

            /// <summary>
            /// Enum Main for value: main
            /// </summary>
            [EnumMember(Value = "main")]
            Main = 2,

            /// <summary>
            /// Enum Trailer for value: trailer
            /// </summary>
            [EnumMember(Value = "trailer")]
            Trailer = 3

        }

        /// <summary>
        /// The type of the video.
        /// </summary>
        /// <value>The type of the video.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject36" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject36() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject36" /> class.
        /// </summary>
        /// <param name="buy">buy.</param>
        /// <param name="position">The position of the video in the On Demand collection..</param>
        /// <param name="releaseYear">The release year of the video..</param>
        /// <param name="rent">rent.</param>
        /// <param name="type">The type of the video. (required).</param>
        public InlineObject36(OndemandPagesOndemandIdVideosVideoIdBuy buy = default(OndemandPagesOndemandIdVideosVideoIdBuy), decimal position = default(decimal), decimal releaseYear = default(decimal), OndemandPagesOndemandIdVideosVideoIdRent rent = default(OndemandPagesOndemandIdVideosVideoIdRent), TypeEnum type = default(TypeEnum))
        {
            this.Type = type;
            this.Buy = buy;
            this.Position = position;
            this.ReleaseYear = releaseYear;
            this.Rent = rent;
        }
        
        /// <summary>
        /// Gets or Sets Buy
        /// </summary>
        [DataMember(Name="buy", EmitDefaultValue=false)]
        public OndemandPagesOndemandIdVideosVideoIdBuy Buy { get; set; }

        /// <summary>
        /// The position of the video in the On Demand collection.
        /// </summary>
        /// <value>The position of the video in the On Demand collection.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public decimal Position { get; set; }

        /// <summary>
        /// The release year of the video.
        /// </summary>
        /// <value>The release year of the video.</value>
        [DataMember(Name="release_year", EmitDefaultValue=false)]
        public decimal ReleaseYear { get; set; }

        /// <summary>
        /// Gets or Sets Rent
        /// </summary>
        [DataMember(Name="rent", EmitDefaultValue=false)]
        public OndemandPagesOndemandIdVideosVideoIdRent Rent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject36 {\n");
            sb.Append("  Buy: ").Append(Buy).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ReleaseYear: ").Append(ReleaseYear).Append("\n");
            sb.Append("  Rent: ").Append(Rent).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject36);
        }

        /// <summary>
        /// Returns true if InlineObject36 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject36 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject36 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Buy == input.Buy ||
                    (this.Buy != null &&
                    this.Buy.Equals(input.Buy))
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.ReleaseYear == input.ReleaseYear ||
                    this.ReleaseYear.Equals(input.ReleaseYear)
                ) && 
                (
                    this.Rent == input.Rent ||
                    (this.Rent != null &&
                    this.Rent.Equals(input.Rent))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Buy != null)
                    hashCode = hashCode * 59 + this.Buy.GetHashCode();
                hashCode = hashCode * 59 + this.Position.GetHashCode();
                hashCode = hashCode * 59 + this.ReleaseYear.GetHashCode();
                if (this.Rent != null)
                    hashCode = hashCode * 59 + this.Rent.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
