/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// PictureSizes
    /// </summary>
    [DataContract]
    public partial class PictureSizes :  IEquatable<PictureSizes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PictureSizes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PictureSizes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PictureSizes" /> class.
        /// </summary>
        /// <param name="height">The height of the image. (required).</param>
        /// <param name="link">The direct link to the image. (required).</param>
        /// <param name="linkWithPlayButton">The direct link to the image with a play button overlay..</param>
        /// <param name="width">The width of the image. (required).</param>
        public PictureSizes(decimal? height = default(decimal?), string link = default(string), string linkWithPlayButton = default(string), decimal width = default(decimal))
        {
            // to ensure "height" is required (not null)
            this.Height = height ?? throw new ArgumentNullException("height is a required property for PictureSizes and cannot be null");
            // to ensure "link" is required (not null)
            this.Link = link ?? throw new ArgumentNullException("link is a required property for PictureSizes and cannot be null");
            this.Width = width;
            this.LinkWithPlayButton = linkWithPlayButton;
        }
        
        /// <summary>
        /// The height of the image.
        /// </summary>
        /// <value>The height of the image.</value>
        [DataMember(Name="height", EmitDefaultValue=true)]
        public decimal? Height { get; set; }

        /// <summary>
        /// The direct link to the image.
        /// </summary>
        /// <value>The direct link to the image.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// The direct link to the image with a play button overlay.
        /// </summary>
        /// <value>The direct link to the image with a play button overlay.</value>
        [DataMember(Name="link_with_play_button", EmitDefaultValue=false)]
        public string LinkWithPlayButton { get; set; }

        /// <summary>
        /// The width of the image.
        /// </summary>
        /// <value>The width of the image.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public decimal Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PictureSizes {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  LinkWithPlayButton: ").Append(LinkWithPlayButton).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PictureSizes);
        }

        /// <summary>
        /// Returns true if PictureSizes instances are equal
        /// </summary>
        /// <param name="input">Instance of PictureSizes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PictureSizes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.LinkWithPlayButton == input.LinkWithPlayButton ||
                    (this.LinkWithPlayButton != null &&
                    this.LinkWithPlayButton.Equals(input.LinkWithPlayButton))
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.LinkWithPlayButton != null)
                    hashCode = hashCode * 59 + this.LinkWithPlayButton.GetHashCode();
                hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
