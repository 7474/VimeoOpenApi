/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// The group&#39;s privacy settings.
    /// </summary>
    [DataContract]
    public partial class GroupPrivacy :  IEquatable<GroupPrivacy>, IValidatableObject
    {
        /// <summary>
        /// Who can comment on the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can comment on the group.  * &#x60;members&#x60; - Only group members can comment on the group. 
        /// </summary>
        /// <value>Who can comment on the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can comment on the group.  * &#x60;members&#x60; - Only group members can comment on the group. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CommentEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,

            /// <summary>
            /// Enum Members for value: members
            /// </summary>
            [EnumMember(Value = "members")]
            Members = 2

        }

        /// <summary>
        /// Who can comment on the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can comment on the group.  * &#x60;members&#x60; - Only group members can comment on the group. 
        /// </summary>
        /// <value>Who can comment on the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can comment on the group.  * &#x60;members&#x60; - Only group members can comment on the group. </value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public CommentEnum Comment { get; set; }
        /// <summary>
        /// Who can invite new members to the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can invite new members.  * &#x60;members&#x60; - Only group members can invite new members. 
        /// </summary>
        /// <value>Who can invite new members to the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can invite new members.  * &#x60;members&#x60; - Only group members can invite new members. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InviteEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,

            /// <summary>
            /// Enum Members for value: members
            /// </summary>
            [EnumMember(Value = "members")]
            Members = 2

        }

        /// <summary>
        /// Who can invite new members to the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can invite new members.  * &#x60;members&#x60; - Only group members can invite new members. 
        /// </summary>
        /// <value>Who can invite new members to the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can invite new members.  * &#x60;members&#x60; - Only group members can invite new members. </value>
        [DataMember(Name="invite", EmitDefaultValue=false)]
        public InviteEnum Invite { get; set; }
        /// <summary>
        /// Who can join the group.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can join the group.  * &#x60;members&#x60; - Only people with a Vimeo account can join the group. 
        /// </summary>
        /// <value>Who can join the group.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can join the group.  * &#x60;members&#x60; - Only people with a Vimeo account can join the group. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JoinEnum
        {
            /// <summary>
            /// Enum Anybody for value: anybody
            /// </summary>
            [EnumMember(Value = "anybody")]
            Anybody = 1,

            /// <summary>
            /// Enum Members for value: members
            /// </summary>
            [EnumMember(Value = "members")]
            Members = 2

        }

        /// <summary>
        /// Who can join the group.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can join the group.  * &#x60;members&#x60; - Only people with a Vimeo account can join the group. 
        /// </summary>
        /// <value>Who can join the group.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can join the group.  * &#x60;members&#x60; - Only people with a Vimeo account can join the group. </value>
        [DataMember(Name="join", EmitDefaultValue=false)]
        public JoinEnum Join { get; set; }
        /// <summary>
        /// Who can add videos to the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can add videos to the group.  * &#x60;members&#x60; - Only group members can add videos to the group. 
        /// </summary>
        /// <value>Who can add videos to the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can add videos to the group.  * &#x60;members&#x60; - Only group members can add videos to the group. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VideosEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,

            /// <summary>
            /// Enum Members for value: members
            /// </summary>
            [EnumMember(Value = "members")]
            Members = 2

        }

        /// <summary>
        /// Who can add videos to the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can add videos to the group.  * &#x60;members&#x60; - Only group members can add videos to the group. 
        /// </summary>
        /// <value>Who can add videos to the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can add videos to the group.  * &#x60;members&#x60; - Only group members can add videos to the group. </value>
        [DataMember(Name="videos", EmitDefaultValue=false)]
        public VideosEnum Videos { get; set; }
        /// <summary>
        /// Who can access the group.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the group.  * &#x60;members&#x60; - Only group members can access the group. 
        /// </summary>
        /// <value>Who can access the group.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the group.  * &#x60;members&#x60; - Only group members can access the group. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ViewEnum
        {
            /// <summary>
            /// Enum Anybody for value: anybody
            /// </summary>
            [EnumMember(Value = "anybody")]
            Anybody = 1,

            /// <summary>
            /// Enum Members for value: members
            /// </summary>
            [EnumMember(Value = "members")]
            Members = 2

        }

        /// <summary>
        /// Who can access the group.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the group.  * &#x60;members&#x60; - Only group members can access the group. 
        /// </summary>
        /// <value>Who can access the group.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the group.  * &#x60;members&#x60; - Only group members can access the group. </value>
        [DataMember(Name="view", EmitDefaultValue=false)]
        public ViewEnum View { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupPrivacy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupPrivacy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupPrivacy" /> class.
        /// </summary>
        /// <param name="comment">Who can comment on the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can comment on the group.  * &#x60;members&#x60; - Only group members can comment on the group.  (required).</param>
        /// <param name="invite">Who can invite new members to the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can invite new members.  * &#x60;members&#x60; - Only group members can invite new members.  (required).</param>
        /// <param name="join">Who can join the group.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can join the group.  * &#x60;members&#x60; - Only people with a Vimeo account can join the group.  (required).</param>
        /// <param name="videos">Who can add videos to the group.  Option descriptions:  * &#x60;all&#x60; - Anyone can add videos to the group.  * &#x60;members&#x60; - Only group members can add videos to the group.  (required).</param>
        /// <param name="view">Who can access the group.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the group.  * &#x60;members&#x60; - Only group members can access the group.  (required).</param>
        public GroupPrivacy(CommentEnum comment = default(CommentEnum), InviteEnum invite = default(InviteEnum), JoinEnum join = default(JoinEnum), VideosEnum videos = default(VideosEnum), ViewEnum view = default(ViewEnum))
        {
            this.Comment = comment;
            this.Invite = invite;
            this.Join = join;
            this.Videos = videos;
            this.View = view;
        }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupPrivacy {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Invite: ").Append(Invite).Append("\n");
            sb.Append("  Join: ").Append(Join).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupPrivacy);
        }

        /// <summary>
        /// Returns true if GroupPrivacy instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupPrivacy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupPrivacy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comment == input.Comment ||
                    this.Comment.Equals(input.Comment)
                ) && 
                (
                    this.Invite == input.Invite ||
                    this.Invite.Equals(input.Invite)
                ) && 
                (
                    this.Join == input.Join ||
                    this.Join.Equals(input.Join)
                ) && 
                (
                    this.Videos == input.Videos ||
                    this.Videos.Equals(input.Videos)
                ) && 
                (
                    this.View == input.View ||
                    this.View.Equals(input.View)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Comment.GetHashCode();
                hashCode = hashCode * 59 + this.Invite.GetHashCode();
                hashCode = hashCode * 59 + this.Join.GetHashCode();
                hashCode = hashCode * 59 + this.Videos.GetHashCode();
                hashCode = hashCode * 59 + this.View.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
