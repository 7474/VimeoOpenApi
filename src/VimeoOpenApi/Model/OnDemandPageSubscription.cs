/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Information about subscribing to the On Demand page, if subscription is enabled.
    /// </summary>
    [DataContract]
    public partial class OnDemandPageSubscription :  IEquatable<OnDemandPageSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPageSubscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OnDemandPageSubscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPageSubscription" /> class.
        /// </summary>
        /// <param name="active">Whether the On Demand product is active. (required).</param>
        /// <param name="link">The link to the On Demand product on Vimeo. (required).</param>
        /// <param name="period">The On Demand product&#39;s rental period..</param>
        /// <param name="price">The accepted currencies and respective pricing for the On Demand product. (required).</param>
        public OnDemandPageSubscription(bool active = default(bool), string link = default(string), string period = default(string), Object price = default(Object))
        {
            this.Active = active;
            // to ensure "link" is required (not null)
            this.Link = link ?? throw new ArgumentNullException("link is a required property for OnDemandPageSubscription and cannot be null");
            // to ensure "price" is required (not null)
            this.Price = price ?? throw new ArgumentNullException("price is a required property for OnDemandPageSubscription and cannot be null");
            this.Period = period;
        }
        
        /// <summary>
        /// Whether the On Demand product is active.
        /// </summary>
        /// <value>Whether the On Demand product is active.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// The link to the On Demand product on Vimeo.
        /// </summary>
        /// <value>The link to the On Demand product on Vimeo.</value>
        [DataMember(Name="link", EmitDefaultValue=true)]
        public string Link { get; set; }

        /// <summary>
        /// The On Demand product&#39;s rental period.
        /// </summary>
        /// <value>The On Demand product&#39;s rental period.</value>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public string Period { get; set; }

        /// <summary>
        /// The accepted currencies and respective pricing for the On Demand product.
        /// </summary>
        /// <value>The accepted currencies and respective pricing for the On Demand product.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public Object Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnDemandPageSubscription {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnDemandPageSubscription);
        }

        /// <summary>
        /// Returns true if OnDemandPageSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of OnDemandPageSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnDemandPageSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
