/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Embed data for the showcase.
    /// </summary>
    [DataContract]
    public partial class AlbumEmbed :  IEquatable<AlbumEmbed>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumEmbed" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AlbumEmbed() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlbumEmbed" /> class.
        /// </summary>
        /// <param name="html">The responsive HTML code to embed the showcase&#39;s playlist on a website. This field appears only when the showcase has embeddable videos. (required).</param>
        public AlbumEmbed(string html = default(string))
        {
            // to ensure "html" is required (not null)
            this.Html = html ?? throw new ArgumentNullException("html is a required property for AlbumEmbed and cannot be null");
        }
        
        /// <summary>
        /// The responsive HTML code to embed the showcase&#39;s playlist on a website. This field appears only when the showcase has embeddable videos.
        /// </summary>
        /// <value>The responsive HTML code to embed the showcase&#39;s playlist on a website. This field appears only when the showcase has embeddable videos.</value>
        [DataMember(Name="html", EmitDefaultValue=true)]
        public string Html { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlbumEmbed {\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlbumEmbed);
        }

        /// <summary>
        /// Returns true if AlbumEmbed instances are equal
        /// </summary>
        /// <param name="input">Instance of AlbumEmbed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlbumEmbed input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Html == input.Html ||
                    (this.Html != null &&
                    this.Html.Equals(input.Html))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Html != null)
                    hashCode = hashCode * 59 + this.Html.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
