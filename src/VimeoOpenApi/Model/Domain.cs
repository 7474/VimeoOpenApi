/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Domain
    /// </summary>
    [DataContract]
    public partial class Domain :  IEquatable<Domain>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Domain" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Domain() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Domain" /> class.
        /// </summary>
        /// <param name="allowHd">Whether to permit HD embeds on this domain. (required).</param>
        /// <param name="domain">The domain name. (required).</param>
        /// <param name="uri">The URI of the domain. (required).</param>
        public Domain(bool allowHd = default(bool), string domain = default(string), string uri = default(string))
        {
            this.AllowHd = allowHd;
            // to ensure "domain" is required (not null)
            this._Domain = domain ?? throw new ArgumentNullException("domain is a required property for Domain and cannot be null");
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for Domain and cannot be null");
        }
        
        /// <summary>
        /// Whether to permit HD embeds on this domain.
        /// </summary>
        /// <value>Whether to permit HD embeds on this domain.</value>
        [DataMember(Name="allow_hd", EmitDefaultValue=false)]
        public bool AllowHd { get; set; }

        /// <summary>
        /// The domain name.
        /// </summary>
        /// <value>The domain name.</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string _Domain { get; set; }

        /// <summary>
        /// The URI of the domain.
        /// </summary>
        /// <value>The URI of the domain.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Domain {\n");
            sb.Append("  AllowHd: ").Append(AllowHd).Append("\n");
            sb.Append("  _Domain: ").Append(_Domain).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Domain);
        }

        /// <summary>
        /// Returns true if Domain instances are equal
        /// </summary>
        /// <param name="input">Instance of Domain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Domain input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowHd == input.AllowHd ||
                    this.AllowHd.Equals(input.AllowHd)
                ) && 
                (
                    this._Domain == input._Domain ||
                    (this._Domain != null &&
                    this._Domain.Equals(input._Domain))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowHd.GetHashCode();
                if (this._Domain != null)
                    hashCode = hashCode * 59 + this._Domain.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
