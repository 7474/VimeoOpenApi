/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Information on subscribing to this video.
    /// </summary>
    [DataContract]
    public partial class PurchaseInteractionSubscribe :  IEquatable<PurchaseInteractionSubscribe>, IValidatableObject
    {
        /// <summary>
        /// The user&#39;s streaming access to this On Demand subscription:  Option descriptions:  * &#x60;available&#x60; - The On Demand subscription is available for streaming.  * &#x60;purchased&#x60; - The On Demand subscription has been purchased.  * &#x60;restricted&#x60; - Streaming for the On Demand subscription is restricted.  * &#x60;unavailable&#x60; - The On Demand subscription is unavailable. 
        /// </summary>
        /// <value>The user&#39;s streaming access to this On Demand subscription:  Option descriptions:  * &#x60;available&#x60; - The On Demand subscription is available for streaming.  * &#x60;purchased&#x60; - The On Demand subscription has been purchased.  * &#x60;restricted&#x60; - Streaming for the On Demand subscription is restricted.  * &#x60;unavailable&#x60; - The On Demand subscription is unavailable. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StreamEnum
        {
            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            [EnumMember(Value = "available")]
            Available = 1,

            /// <summary>
            /// Enum Purchased for value: purchased
            /// </summary>
            [EnumMember(Value = "purchased")]
            Purchased = 2,

            /// <summary>
            /// Enum Restricted for value: restricted
            /// </summary>
            [EnumMember(Value = "restricted")]
            Restricted = 3,

            /// <summary>
            /// Enum Unavailable for value: unavailable
            /// </summary>
            [EnumMember(Value = "unavailable")]
            Unavailable = 4

        }

        /// <summary>
        /// The user&#39;s streaming access to this On Demand subscription:  Option descriptions:  * &#x60;available&#x60; - The On Demand subscription is available for streaming.  * &#x60;purchased&#x60; - The On Demand subscription has been purchased.  * &#x60;restricted&#x60; - Streaming for the On Demand subscription is restricted.  * &#x60;unavailable&#x60; - The On Demand subscription is unavailable. 
        /// </summary>
        /// <value>The user&#39;s streaming access to this On Demand subscription:  Option descriptions:  * &#x60;available&#x60; - The On Demand subscription is available for streaming.  * &#x60;purchased&#x60; - The On Demand subscription has been purchased.  * &#x60;restricted&#x60; - Streaming for the On Demand subscription is restricted.  * &#x60;unavailable&#x60; - The On Demand subscription is unavailable. </value>
        [DataMember(Name="stream", EmitDefaultValue=false)]
        public StreamEnum? Stream { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseInteractionSubscribe" /> class.
        /// </summary>
        /// <param name="drm">Whether the On Demand subscription has DRM..</param>
        /// <param name="expiresTime">The time in ISO 8601 format when the On Demand video will expire..</param>
        /// <param name="link">The URL to purchase this On Demand subscription on Vimeo..</param>
        /// <param name="purchaseTime">The time in ISO 8601 format when the On Demand was purchased..</param>
        /// <param name="stream">The user&#39;s streaming access to this On Demand subscription:  Option descriptions:  * &#x60;available&#x60; - The On Demand subscription is available for streaming.  * &#x60;purchased&#x60; - The On Demand subscription has been purchased.  * &#x60;restricted&#x60; - Streaming for the On Demand subscription is restricted.  * &#x60;unavailable&#x60; - The On Demand subscription is unavailable. .</param>
        /// <param name="uri">The On Demand subscription&#39;s product URI..</param>
        public PurchaseInteractionSubscribe(bool drm = default(bool), string expiresTime = default(string), string link = default(string), string purchaseTime = default(string), StreamEnum? stream = default(StreamEnum?), string uri = default(string))
        {
            this.Drm = drm;
            this.ExpiresTime = expiresTime;
            this.Link = link;
            this.PurchaseTime = purchaseTime;
            this.Stream = stream;
            this.Uri = uri;
        }
        
        /// <summary>
        /// Whether the On Demand subscription has DRM.
        /// </summary>
        /// <value>Whether the On Demand subscription has DRM.</value>
        [DataMember(Name="drm", EmitDefaultValue=false)]
        public bool Drm { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the On Demand video will expire.
        /// </summary>
        /// <value>The time in ISO 8601 format when the On Demand video will expire.</value>
        [DataMember(Name="expires_time", EmitDefaultValue=true)]
        public string ExpiresTime { get; set; }

        /// <summary>
        /// The URL to purchase this On Demand subscription on Vimeo.
        /// </summary>
        /// <value>The URL to purchase this On Demand subscription on Vimeo.</value>
        [DataMember(Name="link", EmitDefaultValue=true)]
        public string Link { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the On Demand was purchased.
        /// </summary>
        /// <value>The time in ISO 8601 format when the On Demand was purchased.</value>
        [DataMember(Name="purchase_time", EmitDefaultValue=true)]
        public string PurchaseTime { get; set; }

        /// <summary>
        /// The On Demand subscription&#39;s product URI.
        /// </summary>
        /// <value>The On Demand subscription&#39;s product URI.</value>
        [DataMember(Name="uri", EmitDefaultValue=true)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseInteractionSubscribe {\n");
            sb.Append("  Drm: ").Append(Drm).Append("\n");
            sb.Append("  ExpiresTime: ").Append(ExpiresTime).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  PurchaseTime: ").Append(PurchaseTime).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseInteractionSubscribe);
        }

        /// <summary>
        /// Returns true if PurchaseInteractionSubscribe instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseInteractionSubscribe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseInteractionSubscribe input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Drm == input.Drm ||
                    this.Drm.Equals(input.Drm)
                ) && 
                (
                    this.ExpiresTime == input.ExpiresTime ||
                    (this.ExpiresTime != null &&
                    this.ExpiresTime.Equals(input.ExpiresTime))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.PurchaseTime == input.PurchaseTime ||
                    (this.PurchaseTime != null &&
                    this.PurchaseTime.Equals(input.PurchaseTime))
                ) && 
                (
                    this.Stream == input.Stream ||
                    this.Stream.Equals(input.Stream)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Drm.GetHashCode();
                if (this.ExpiresTime != null)
                    hashCode = hashCode * 59 + this.ExpiresTime.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.PurchaseTime != null)
                    hashCode = hashCode * 59 + this.PurchaseTime.GetHashCode();
                hashCode = hashCode * 59 + this.Stream.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
