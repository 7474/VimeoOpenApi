/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Information about the authenticated user&#39;s usage for the current period.
    /// </summary>
    [DataContract]
    public partial class UserUploadQuotaPeriodic :  IEquatable<UserUploadQuotaPeriodic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUploadQuotaPeriodic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserUploadQuotaPeriodic() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUploadQuotaPeriodic" /> class.
        /// </summary>
        /// <param name="free">The number of bytes remaining in the authenticated user&#39;s upload quota for the current period. (required).</param>
        /// <param name="max">The total number of bytes that the authenticated user can upload per period. (required).</param>
        /// <param name="resetDate">The time in ISO 8601 format when the authenticated user&#39;s upload quota resets. (required).</param>
        /// <param name="used">The number of bytes that the authenticated user has already uploaded against their quota in the current period. (required).</param>
        public UserUploadQuotaPeriodic(decimal? free = default(decimal?), decimal? max = default(decimal?), string resetDate = default(string), decimal? used = default(decimal?))
        {
            // to ensure "free" is required (not null)
            this.Free = free ?? throw new ArgumentNullException("free is a required property for UserUploadQuotaPeriodic and cannot be null");
            // to ensure "max" is required (not null)
            this.Max = max ?? throw new ArgumentNullException("max is a required property for UserUploadQuotaPeriodic and cannot be null");
            // to ensure "resetDate" is required (not null)
            this.ResetDate = resetDate ?? throw new ArgumentNullException("resetDate is a required property for UserUploadQuotaPeriodic and cannot be null");
            // to ensure "used" is required (not null)
            this.Used = used ?? throw new ArgumentNullException("used is a required property for UserUploadQuotaPeriodic and cannot be null");
        }
        
        /// <summary>
        /// The number of bytes remaining in the authenticated user&#39;s upload quota for the current period.
        /// </summary>
        /// <value>The number of bytes remaining in the authenticated user&#39;s upload quota for the current period.</value>
        [DataMember(Name="free", EmitDefaultValue=true)]
        public decimal? Free { get; set; }

        /// <summary>
        /// The total number of bytes that the authenticated user can upload per period.
        /// </summary>
        /// <value>The total number of bytes that the authenticated user can upload per period.</value>
        [DataMember(Name="max", EmitDefaultValue=true)]
        public decimal? Max { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the authenticated user&#39;s upload quota resets.
        /// </summary>
        /// <value>The time in ISO 8601 format when the authenticated user&#39;s upload quota resets.</value>
        [DataMember(Name="reset_date", EmitDefaultValue=true)]
        public string ResetDate { get; set; }

        /// <summary>
        /// The number of bytes that the authenticated user has already uploaded against their quota in the current period.
        /// </summary>
        /// <value>The number of bytes that the authenticated user has already uploaded against their quota in the current period.</value>
        [DataMember(Name="used", EmitDefaultValue=true)]
        public decimal? Used { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserUploadQuotaPeriodic {\n");
            sb.Append("  Free: ").Append(Free).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  ResetDate: ").Append(ResetDate).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserUploadQuotaPeriodic);
        }

        /// <summary>
        /// Returns true if UserUploadQuotaPeriodic instances are equal
        /// </summary>
        /// <param name="input">Instance of UserUploadQuotaPeriodic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserUploadQuotaPeriodic input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Free == input.Free ||
                    (this.Free != null &&
                    this.Free.Equals(input.Free))
                ) && 
                (
                    this.Max == input.Max ||
                    (this.Max != null &&
                    this.Max.Equals(input.Max))
                ) && 
                (
                    this.ResetDate == input.ResetDate ||
                    (this.ResetDate != null &&
                    this.ResetDate.Equals(input.ResetDate))
                ) && 
                (
                    this.Used == input.Used ||
                    (this.Used != null &&
                    this.Used.Equals(input.Used))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Free != null)
                    hashCode = hashCode * 59 + this.Free.GetHashCode();
                if (this.Max != null)
                    hashCode = hashCode * 59 + this.Max.GetHashCode();
                if (this.ResetDate != null)
                    hashCode = hashCode * 59 + this.ResetDate.GetHashCode();
                if (this.Used != null)
                    hashCode = hashCode * 59 + this.Used.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
