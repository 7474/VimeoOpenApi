/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// MeOndemandPagesEpisodesRent
    /// </summary>
    [DataContract]
    public partial class MeOndemandPagesEpisodesRent :  IEquatable<MeOndemandPagesEpisodesRent>, IValidatableObject
    {
        /// <summary>
        /// The rental period of the episode.
        /// </summary>
        /// <value>The rental period of the episode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodEnum
        {
            /// <summary>
            /// Enum _1week for value: 1 week
            /// </summary>
            [EnumMember(Value = "1 week")]
            _1week = 1,

            /// <summary>
            /// Enum _1year for value: 1 year
            /// </summary>
            [EnumMember(Value = "1 year")]
            _1year = 2,

            /// <summary>
            /// Enum _24hour for value: 24 hour
            /// </summary>
            [EnumMember(Value = "24 hour")]
            _24hour = 3,

            /// <summary>
            /// Enum _3month for value: 3 month
            /// </summary>
            [EnumMember(Value = "3 month")]
            _3month = 4,

            /// <summary>
            /// Enum _30day for value: 30 day
            /// </summary>
            [EnumMember(Value = "30 day")]
            _30day = 5,

            /// <summary>
            /// Enum _48hour for value: 48 hour
            /// </summary>
            [EnumMember(Value = "48 hour")]
            _48hour = 6,

            /// <summary>
            /// Enum _6month for value: 6 month
            /// </summary>
            [EnumMember(Value = "6 month")]
            _6month = 7,

            /// <summary>
            /// Enum _72hour for value: 72 hour
            /// </summary>
            [EnumMember(Value = "72 hour")]
            _72hour = 8

        }

        /// <summary>
        /// The rental period of the episode.
        /// </summary>
        /// <value>The rental period of the episode.</value>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public PeriodEnum? Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeOndemandPagesEpisodesRent" /> class.
        /// </summary>
        /// <param name="active">Whether episodes can be rented..</param>
        /// <param name="period">The rental period of the episode..</param>
        /// <param name="price">price.</param>
        public MeOndemandPagesEpisodesRent(bool active = default(bool), PeriodEnum? period = default(PeriodEnum?), MeOndemandPagesEpisodesRentPrice price = default(MeOndemandPagesEpisodesRentPrice))
        {
            this.Active = active;
            this.Period = period;
            this.Price = price;
        }
        
        /// <summary>
        /// Whether episodes can be rented.
        /// </summary>
        /// <value>Whether episodes can be rented.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public MeOndemandPagesEpisodesRentPrice Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeOndemandPagesEpisodesRent {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeOndemandPagesEpisodesRent);
        }

        /// <summary>
        /// Returns true if MeOndemandPagesEpisodesRent instances are equal
        /// </summary>
        /// <param name="input">Instance of MeOndemandPagesEpisodesRent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeOndemandPagesEpisodesRent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
