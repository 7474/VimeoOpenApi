/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// InlineObject57
    /// </summary>
    [DataContract]
    public partial class InlineObject57 :  IEquatable<InlineObject57>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject57" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject57() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject57" /> class.
        /// </summary>
        /// <param name="email">The email address of the credited person. (required).</param>
        /// <param name="name">The name of the credited person. (required).</param>
        /// <param name="role">The role of the credited person. (required).</param>
        /// <param name="userUri">The Vimeo URI of the credited person. (required).</param>
        public InlineObject57(string email = default(string), string name = default(string), string role = default(string), string userUri = default(string))
        {
            // to ensure "email" is required (not null)
            this.Email = email ?? throw new ArgumentNullException("email is a required property for InlineObject57 and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for InlineObject57 and cannot be null");
            // to ensure "role" is required (not null)
            this.Role = role ?? throw new ArgumentNullException("role is a required property for InlineObject57 and cannot be null");
            // to ensure "userUri" is required (not null)
            this.UserUri = userUri ?? throw new ArgumentNullException("userUri is a required property for InlineObject57 and cannot be null");
        }
        
        /// <summary>
        /// The email address of the credited person.
        /// </summary>
        /// <value>The email address of the credited person.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The name of the credited person.
        /// </summary>
        /// <value>The name of the credited person.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The role of the credited person.
        /// </summary>
        /// <value>The role of the credited person.</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// The Vimeo URI of the credited person.
        /// </summary>
        /// <value>The Vimeo URI of the credited person.</value>
        [DataMember(Name="user_uri", EmitDefaultValue=false)]
        public string UserUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject57 {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  UserUri: ").Append(UserUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject57);
        }

        /// <summary>
        /// Returns true if InlineObject57 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject57 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject57 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.UserUri == input.UserUri ||
                    (this.UserUri != null &&
                    this.UserUri.Equals(input.UserUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.UserUri != null)
                    hashCode = hashCode * 59 + this.UserUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
