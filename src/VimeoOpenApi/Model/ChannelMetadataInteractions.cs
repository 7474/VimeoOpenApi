/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// A list of resource URIs related to the channel.
    /// </summary>
    [DataContract]
    public partial class ChannelMetadataInteractions :  IEquatable<ChannelMetadataInteractions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelMetadataInteractions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelMetadataInteractions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelMetadataInteractions" /> class.
        /// </summary>
        /// <param name="addModerators">addModerators (required).</param>
        /// <param name="addTo">addTo (required).</param>
        /// <param name="follow">follow (required).</param>
        /// <param name="moderateVideos">moderateVideos (required).</param>
        public ChannelMetadataInteractions(ChannelMetadataInteractionsAddModerators addModerators = default(ChannelMetadataInteractionsAddModerators), ChannelMetadataInteractionsAddTo addTo = default(ChannelMetadataInteractionsAddTo), ChannelMetadataInteractionsFollow follow = default(ChannelMetadataInteractionsFollow), ChannelMetadataInteractionsModerateVideos moderateVideos = default(ChannelMetadataInteractionsModerateVideos))
        {
            // to ensure "addModerators" is required (not null)
            this.AddModerators = addModerators ?? throw new ArgumentNullException("addModerators is a required property for ChannelMetadataInteractions and cannot be null");
            // to ensure "addTo" is required (not null)
            this.AddTo = addTo ?? throw new ArgumentNullException("addTo is a required property for ChannelMetadataInteractions and cannot be null");
            // to ensure "follow" is required (not null)
            this.Follow = follow ?? throw new ArgumentNullException("follow is a required property for ChannelMetadataInteractions and cannot be null");
            // to ensure "moderateVideos" is required (not null)
            this.ModerateVideos = moderateVideos ?? throw new ArgumentNullException("moderateVideos is a required property for ChannelMetadataInteractions and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets AddModerators
        /// </summary>
        [DataMember(Name="add_moderators", EmitDefaultValue=false)]
        public ChannelMetadataInteractionsAddModerators AddModerators { get; set; }

        /// <summary>
        /// Gets or Sets AddTo
        /// </summary>
        [DataMember(Name="add_to", EmitDefaultValue=true)]
        public ChannelMetadataInteractionsAddTo AddTo { get; set; }

        /// <summary>
        /// Gets or Sets Follow
        /// </summary>
        [DataMember(Name="follow", EmitDefaultValue=false)]
        public ChannelMetadataInteractionsFollow Follow { get; set; }

        /// <summary>
        /// Gets or Sets ModerateVideos
        /// </summary>
        [DataMember(Name="moderate_videos", EmitDefaultValue=false)]
        public ChannelMetadataInteractionsModerateVideos ModerateVideos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelMetadataInteractions {\n");
            sb.Append("  AddModerators: ").Append(AddModerators).Append("\n");
            sb.Append("  AddTo: ").Append(AddTo).Append("\n");
            sb.Append("  Follow: ").Append(Follow).Append("\n");
            sb.Append("  ModerateVideos: ").Append(ModerateVideos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelMetadataInteractions);
        }

        /// <summary>
        /// Returns true if ChannelMetadataInteractions instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelMetadataInteractions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelMetadataInteractions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddModerators == input.AddModerators ||
                    (this.AddModerators != null &&
                    this.AddModerators.Equals(input.AddModerators))
                ) && 
                (
                    this.AddTo == input.AddTo ||
                    (this.AddTo != null &&
                    this.AddTo.Equals(input.AddTo))
                ) && 
                (
                    this.Follow == input.Follow ||
                    (this.Follow != null &&
                    this.Follow.Equals(input.Follow))
                ) && 
                (
                    this.ModerateVideos == input.ModerateVideos ||
                    (this.ModerateVideos != null &&
                    this.ModerateVideos.Equals(input.ModerateVideos))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddModerators != null)
                    hashCode = hashCode * 59 + this.AddModerators.GetHashCode();
                if (this.AddTo != null)
                    hashCode = hashCode * 59 + this.AddTo.GetHashCode();
                if (this.Follow != null)
                    hashCode = hashCode * 59 + this.Follow.GetHashCode();
                if (this.ModerateVideos != null)
                    hashCode = hashCode * 59 + this.ModerateVideos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
