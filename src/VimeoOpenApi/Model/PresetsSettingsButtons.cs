/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// PresetsSettingsButtons
    /// </summary>
    [DataContract]
    public partial class PresetsSettingsButtons :  IEquatable<PresetsSettingsButtons>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PresetsSettingsButtons" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PresetsSettingsButtons() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PresetsSettingsButtons" /> class.
        /// </summary>
        /// <param name="embed">Whether the preset includes Embed button settings. (required).</param>
        /// <param name="hd">Whether the preset includes HD button settings. (required).</param>
        /// <param name="like">Whether the preset includes Like button settings. (required).</param>
        /// <param name="share">Whether the present includes Share button settings. (required).</param>
        /// <param name="vote">Whether the preset includes Vote button settings. (required).</param>
        /// <param name="watchlater">Whether the preset includes Watch Later button settings. (required).</param>
        public PresetsSettingsButtons(bool embed = default(bool), bool hd = default(bool), bool like = default(bool), bool share = default(bool), bool vote = default(bool), bool watchlater = default(bool))
        {
            this.Embed = embed;
            this.Hd = hd;
            this.Like = like;
            this.Share = share;
            this.Vote = vote;
            this.Watchlater = watchlater;
        }
        
        /// <summary>
        /// Whether the preset includes Embed button settings.
        /// </summary>
        /// <value>Whether the preset includes Embed button settings.</value>
        [DataMember(Name="embed", EmitDefaultValue=false)]
        public bool Embed { get; set; }

        /// <summary>
        /// Whether the preset includes HD button settings.
        /// </summary>
        /// <value>Whether the preset includes HD button settings.</value>
        [DataMember(Name="hd", EmitDefaultValue=false)]
        public bool Hd { get; set; }

        /// <summary>
        /// Whether the preset includes Like button settings.
        /// </summary>
        /// <value>Whether the preset includes Like button settings.</value>
        [DataMember(Name="like", EmitDefaultValue=false)]
        public bool Like { get; set; }

        /// <summary>
        /// Whether the present includes Share button settings.
        /// </summary>
        /// <value>Whether the present includes Share button settings.</value>
        [DataMember(Name="share", EmitDefaultValue=false)]
        public bool Share { get; set; }

        /// <summary>
        /// Whether the preset includes Vote button settings.
        /// </summary>
        /// <value>Whether the preset includes Vote button settings.</value>
        [DataMember(Name="vote", EmitDefaultValue=false)]
        public bool Vote { get; set; }

        /// <summary>
        /// Whether the preset includes Watch Later button settings.
        /// </summary>
        /// <value>Whether the preset includes Watch Later button settings.</value>
        [DataMember(Name="watchlater", EmitDefaultValue=false)]
        public bool Watchlater { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PresetsSettingsButtons {\n");
            sb.Append("  Embed: ").Append(Embed).Append("\n");
            sb.Append("  Hd: ").Append(Hd).Append("\n");
            sb.Append("  Like: ").Append(Like).Append("\n");
            sb.Append("  Share: ").Append(Share).Append("\n");
            sb.Append("  Vote: ").Append(Vote).Append("\n");
            sb.Append("  Watchlater: ").Append(Watchlater).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PresetsSettingsButtons);
        }

        /// <summary>
        /// Returns true if PresetsSettingsButtons instances are equal
        /// </summary>
        /// <param name="input">Instance of PresetsSettingsButtons to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PresetsSettingsButtons input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Embed == input.Embed ||
                    this.Embed.Equals(input.Embed)
                ) && 
                (
                    this.Hd == input.Hd ||
                    this.Hd.Equals(input.Hd)
                ) && 
                (
                    this.Like == input.Like ||
                    this.Like.Equals(input.Like)
                ) && 
                (
                    this.Share == input.Share ||
                    this.Share.Equals(input.Share)
                ) && 
                (
                    this.Vote == input.Vote ||
                    this.Vote.Equals(input.Vote)
                ) && 
                (
                    this.Watchlater == input.Watchlater ||
                    this.Watchlater.Equals(input.Watchlater)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Embed.GetHashCode();
                hashCode = hashCode * 59 + this.Hd.GetHashCode();
                hashCode = hashCode * 59 + this.Like.GetHashCode();
                hashCode = hashCode * 59 + this.Share.GetHashCode();
                hashCode = hashCode * 59 + this.Vote.GetHashCode();
                hashCode = hashCode * 59 + this.Watchlater.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
