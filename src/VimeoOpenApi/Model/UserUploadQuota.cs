/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// This information appears only when the authenticated user has upload access and is looking at their own user record.
    /// </summary>
    [DataContract]
    public partial class UserUploadQuota :  IEquatable<UserUploadQuota>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUploadQuota" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserUploadQuota() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUploadQuota" /> class.
        /// </summary>
        /// <param name="lifetime">lifetime (required).</param>
        /// <param name="periodic">periodic (required).</param>
        /// <param name="space">space (required).</param>
        public UserUploadQuota(UserUploadQuotaLifetime lifetime = default(UserUploadQuotaLifetime), UserUploadQuotaPeriodic periodic = default(UserUploadQuotaPeriodic), UserUploadQuotaSpace space = default(UserUploadQuotaSpace))
        {
            // to ensure "lifetime" is required (not null)
            this.Lifetime = lifetime ?? throw new ArgumentNullException("lifetime is a required property for UserUploadQuota and cannot be null");
            // to ensure "periodic" is required (not null)
            this.Periodic = periodic ?? throw new ArgumentNullException("periodic is a required property for UserUploadQuota and cannot be null");
            // to ensure "space" is required (not null)
            this.Space = space ?? throw new ArgumentNullException("space is a required property for UserUploadQuota and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets Lifetime
        /// </summary>
        [DataMember(Name="lifetime", EmitDefaultValue=false)]
        public UserUploadQuotaLifetime Lifetime { get; set; }

        /// <summary>
        /// Gets or Sets Periodic
        /// </summary>
        [DataMember(Name="periodic", EmitDefaultValue=false)]
        public UserUploadQuotaPeriodic Periodic { get; set; }

        /// <summary>
        /// Gets or Sets Space
        /// </summary>
        [DataMember(Name="space", EmitDefaultValue=false)]
        public UserUploadQuotaSpace Space { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserUploadQuota {\n");
            sb.Append("  Lifetime: ").Append(Lifetime).Append("\n");
            sb.Append("  Periodic: ").Append(Periodic).Append("\n");
            sb.Append("  Space: ").Append(Space).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserUploadQuota);
        }

        /// <summary>
        /// Returns true if UserUploadQuota instances are equal
        /// </summary>
        /// <param name="input">Instance of UserUploadQuota to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserUploadQuota input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Lifetime == input.Lifetime ||
                    (this.Lifetime != null &&
                    this.Lifetime.Equals(input.Lifetime))
                ) && 
                (
                    this.Periodic == input.Periodic ||
                    (this.Periodic != null &&
                    this.Periodic.Equals(input.Periodic))
                ) && 
                (
                    this.Space == input.Space ||
                    (this.Space != null &&
                    this.Space.Equals(input.Space))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Lifetime != null)
                    hashCode = hashCode * 59 + this.Lifetime.GetHashCode();
                if (this.Periodic != null)
                    hashCode = hashCode * 59 + this.Periodic.GetHashCode();
                if (this.Space != null)
                    hashCode = hashCode * 59 + this.Space.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
