/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Video
    /// </summary>
    [DataContract]
    public partial class Video :  IEquatable<Video>, IValidatableObject
    {
        /// <summary>
        /// The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:  Option descriptions:  * &#x60;by&#x60; - Attribution  * &#x60;by-nc&#x60; - Attribution Non-Commercial  * &#x60;by-nc-nd&#x60; - Attribution Non-Commercial No Derivatives  * &#x60;by-nc-sa&#x60; - Attribution Non-Commercial Share Alike  * &#x60;by-nd&#x60; - Attribution No Derivatives  * &#x60;by-sa&#x60; - Attribution Share Alike  * &#x60;cc0&#x60; - Public Domain Dedication 
        /// </summary>
        /// <value>The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:  Option descriptions:  * &#x60;by&#x60; - Attribution  * &#x60;by-nc&#x60; - Attribution Non-Commercial  * &#x60;by-nc-nd&#x60; - Attribution Non-Commercial No Derivatives  * &#x60;by-nc-sa&#x60; - Attribution Non-Commercial Share Alike  * &#x60;by-nd&#x60; - Attribution No Derivatives  * &#x60;by-sa&#x60; - Attribution Share Alike  * &#x60;cc0&#x60; - Public Domain Dedication </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LicenseEnum
        {
            /// <summary>
            /// Enum By for value: by
            /// </summary>
            [EnumMember(Value = "by")]
            By = 1,

            /// <summary>
            /// Enum ByNc for value: by-nc
            /// </summary>
            [EnumMember(Value = "by-nc")]
            ByNc = 2,

            /// <summary>
            /// Enum ByNcNd for value: by-nc-nd
            /// </summary>
            [EnumMember(Value = "by-nc-nd")]
            ByNcNd = 3,

            /// <summary>
            /// Enum ByNcSa for value: by-nc-sa
            /// </summary>
            [EnumMember(Value = "by-nc-sa")]
            ByNcSa = 4,

            /// <summary>
            /// Enum ByNd for value: by-nd
            /// </summary>
            [EnumMember(Value = "by-nd")]
            ByNd = 5,

            /// <summary>
            /// Enum BySa for value: by-sa
            /// </summary>
            [EnumMember(Value = "by-sa")]
            BySa = 6,

            /// <summary>
            /// Enum Cc0 for value: cc0
            /// </summary>
            [EnumMember(Value = "cc0")]
            Cc0 = 7

        }

        /// <summary>
        /// The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:  Option descriptions:  * &#x60;by&#x60; - Attribution  * &#x60;by-nc&#x60; - Attribution Non-Commercial  * &#x60;by-nc-nd&#x60; - Attribution Non-Commercial No Derivatives  * &#x60;by-nc-sa&#x60; - Attribution Non-Commercial Share Alike  * &#x60;by-nd&#x60; - Attribution No Derivatives  * &#x60;by-sa&#x60; - Attribution Share Alike  * &#x60;cc0&#x60; - Public Domain Dedication 
        /// </summary>
        /// <value>The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:  Option descriptions:  * &#x60;by&#x60; - Attribution  * &#x60;by-nc&#x60; - Attribution Non-Commercial  * &#x60;by-nc-nd&#x60; - Attribution Non-Commercial No Derivatives  * &#x60;by-nc-sa&#x60; - Attribution Non-Commercial Share Alike  * &#x60;by-nd&#x60; - Attribution No Derivatives  * &#x60;by-sa&#x60; - Attribution Share Alike  * &#x60;cc0&#x60; - Public Domain Dedication </value>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public LicenseEnum License { get; set; }
        /// <summary>
        /// The status code for the availability of the video. This field is deprecated in favor of &#x60;upload&#x60; and &#x60;transcode&#x60;.  Option descriptions:  * &#x60;available&#x60; - The video is available.  * &#x60;quota_exceeded&#x60; - The user&#39;s quota is exceeded with this video.  * &#x60;total_cap_exceeded&#x60; - The user has exceeded their total cap with this video.  * &#x60;transcode_starting&#x60; - Transcoding is beginning for the video.  * &#x60;transcoding&#x60; - Transcoding is underway for the video.  * &#x60;transcoding_error&#x60; - There was an error in transcoding the video.  * &#x60;unavailable&#x60; - The video is unavailable.  * &#x60;uploading&#x60; - The video is being uploaded.  * &#x60;uploading_error&#x60; - There was an error in uploading the video. 
        /// </summary>
        /// <value>The status code for the availability of the video. This field is deprecated in favor of &#x60;upload&#x60; and &#x60;transcode&#x60;.  Option descriptions:  * &#x60;available&#x60; - The video is available.  * &#x60;quota_exceeded&#x60; - The user&#39;s quota is exceeded with this video.  * &#x60;total_cap_exceeded&#x60; - The user has exceeded their total cap with this video.  * &#x60;transcode_starting&#x60; - Transcoding is beginning for the video.  * &#x60;transcoding&#x60; - Transcoding is underway for the video.  * &#x60;transcoding_error&#x60; - There was an error in transcoding the video.  * &#x60;unavailable&#x60; - The video is unavailable.  * &#x60;uploading&#x60; - The video is being uploaded.  * &#x60;uploading_error&#x60; - There was an error in uploading the video. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            [EnumMember(Value = "available")]
            Available = 1,

            /// <summary>
            /// Enum Quotaexceeded for value: quota_exceeded
            /// </summary>
            [EnumMember(Value = "quota_exceeded")]
            Quotaexceeded = 2,

            /// <summary>
            /// Enum Totalcapexceeded for value: total_cap_exceeded
            /// </summary>
            [EnumMember(Value = "total_cap_exceeded")]
            Totalcapexceeded = 3,

            /// <summary>
            /// Enum Transcodestarting for value: transcode_starting
            /// </summary>
            [EnumMember(Value = "transcode_starting")]
            Transcodestarting = 4,

            /// <summary>
            /// Enum Transcoding for value: transcoding
            /// </summary>
            [EnumMember(Value = "transcoding")]
            Transcoding = 5,

            /// <summary>
            /// Enum Transcodingerror for value: transcoding_error
            /// </summary>
            [EnumMember(Value = "transcoding_error")]
            Transcodingerror = 6,

            /// <summary>
            /// Enum Unavailable for value: unavailable
            /// </summary>
            [EnumMember(Value = "unavailable")]
            Unavailable = 7,

            /// <summary>
            /// Enum Uploading for value: uploading
            /// </summary>
            [EnumMember(Value = "uploading")]
            Uploading = 8,

            /// <summary>
            /// Enum Uploadingerror for value: uploading_error
            /// </summary>
            [EnumMember(Value = "uploading_error")]
            Uploadingerror = 9

        }

        /// <summary>
        /// The status code for the availability of the video. This field is deprecated in favor of &#x60;upload&#x60; and &#x60;transcode&#x60;.  Option descriptions:  * &#x60;available&#x60; - The video is available.  * &#x60;quota_exceeded&#x60; - The user&#39;s quota is exceeded with this video.  * &#x60;total_cap_exceeded&#x60; - The user has exceeded their total cap with this video.  * &#x60;transcode_starting&#x60; - Transcoding is beginning for the video.  * &#x60;transcoding&#x60; - Transcoding is underway for the video.  * &#x60;transcoding_error&#x60; - There was an error in transcoding the video.  * &#x60;unavailable&#x60; - The video is unavailable.  * &#x60;uploading&#x60; - The video is being uploaded.  * &#x60;uploading_error&#x60; - There was an error in uploading the video. 
        /// </summary>
        /// <value>The status code for the availability of the video. This field is deprecated in favor of &#x60;upload&#x60; and &#x60;transcode&#x60;.  Option descriptions:  * &#x60;available&#x60; - The video is available.  * &#x60;quota_exceeded&#x60; - The user&#39;s quota is exceeded with this video.  * &#x60;total_cap_exceeded&#x60; - The user has exceeded their total cap with this video.  * &#x60;transcode_starting&#x60; - Transcoding is beginning for the video.  * &#x60;transcoding&#x60; - Transcoding is underway for the video.  * &#x60;transcoding_error&#x60; - There was an error in transcoding the video.  * &#x60;unavailable&#x60; - The video is unavailable.  * &#x60;uploading&#x60; - The video is being uploaded.  * &#x60;uploading_error&#x60; - There was an error in uploading the video. </value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// The type of the video.  Option descriptions:  * &#x60;live&#x60; - The video is or was a live event.  * &#x60;stock&#x60; - The video is a Vimeo Stock video.  * &#x60;video&#x60; - The video is a standard Vimeo video. 
        /// </summary>
        /// <value>The type of the video.  Option descriptions:  * &#x60;live&#x60; - The video is or was a live event.  * &#x60;stock&#x60; - The video is a Vimeo Stock video.  * &#x60;video&#x60; - The video is a standard Vimeo video. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Live for value: live
            /// </summary>
            [EnumMember(Value = "live")]
            Live = 1,

            /// <summary>
            /// Enum Stock for value: stock
            /// </summary>
            [EnumMember(Value = "stock")]
            Stock = 2,

            /// <summary>
            /// Enum Video for value: video
            /// </summary>
            [EnumMember(Value = "video")]
            Video = 3

        }

        /// <summary>
        /// The type of the video.  Option descriptions:  * &#x60;live&#x60; - The video is or was a live event.  * &#x60;stock&#x60; - The video is a Vimeo Stock video.  * &#x60;video&#x60; - The video is a standard Vimeo video. 
        /// </summary>
        /// <value>The type of the video.  Option descriptions:  * &#x60;live&#x60; - The video is or was a live event.  * &#x60;stock&#x60; - The video is a Vimeo Stock video.  * &#x60;video&#x60; - The video is a standard Vimeo video. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Video" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Video() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Video" /> class.
        /// </summary>
        /// <param name="categories">The categories to which this video belongs. (required).</param>
        /// <param name="contentRating">The content ratings of this video. (required).</param>
        /// <param name="context">context (required).</param>
        /// <param name="createdTime">The time in ISO 8601 format when the video was created. (required).</param>
        /// <param name="description">A brief explanation of the video&#39;s content. (required).</param>
        /// <param name="duration">The video&#39;s duration in seconds. (required).</param>
        /// <param name="embed">Information about embedding this video. (required).</param>
        /// <param name="height">The video&#39;s height in pixels. (required).</param>
        /// <param name="language">The video&#39;s primary language. (required).</param>
        /// <param name="lastUserActionEventDate">The time in ISO 8601 format when the user last modified the video..</param>
        /// <param name="license">The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:  Option descriptions:  * &#x60;by&#x60; - Attribution  * &#x60;by-nc&#x60; - Attribution Non-Commercial  * &#x60;by-nc-nd&#x60; - Attribution Non-Commercial No Derivatives  * &#x60;by-nc-sa&#x60; - Attribution Non-Commercial Share Alike  * &#x60;by-nd&#x60; - Attribution No Derivatives  * &#x60;by-sa&#x60; - Attribution Share Alike  * &#x60;cc0&#x60; - Public Domain Dedication  (required).</param>
        /// <param name="link">The link to the video. (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="modifiedTime">The time in ISO 8601 format when the video metadata was last modified. (required).</param>
        /// <param name="name">The video&#39;s title. (required).</param>
        /// <param name="parentFolder">Information about the folder that contains this video..</param>
        /// <param name="password">The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the &#x60;private&#x60; scope..</param>
        /// <param name="pictures">The active picture for this video. (required).</param>
        /// <param name="privacy">privacy (required).</param>
        /// <param name="releaseTime">The time in ISO 8601 format when the video was released. (required).</param>
        /// <param name="resourceKey">The resource key string of the video. (required).</param>
        /// <param name="spatial">spatial (required).</param>
        /// <param name="stats">stats (required).</param>
        /// <param name="status">The status code for the availability of the video. This field is deprecated in favor of &#x60;upload&#x60; and &#x60;transcode&#x60;.  Option descriptions:  * &#x60;available&#x60; - The video is available.  * &#x60;quota_exceeded&#x60; - The user&#39;s quota is exceeded with this video.  * &#x60;total_cap_exceeded&#x60; - The user has exceeded their total cap with this video.  * &#x60;transcode_starting&#x60; - Transcoding is beginning for the video.  * &#x60;transcoding&#x60; - Transcoding is underway for the video.  * &#x60;transcoding_error&#x60; - There was an error in transcoding the video.  * &#x60;unavailable&#x60; - The video is unavailable.  * &#x60;uploading&#x60; - The video is being uploaded.  * &#x60;uploading_error&#x60; - There was an error in uploading the video.  (required).</param>
        /// <param name="tags">An array of all tags assigned to this video. (required).</param>
        /// <param name="transcode">transcode (required).</param>
        /// <param name="type">The type of the video.  Option descriptions:  * &#x60;live&#x60; - The video is or was a live event.  * &#x60;stock&#x60; - The video is a Vimeo Stock video.  * &#x60;video&#x60; - The video is a standard Vimeo video.  (required).</param>
        /// <param name="upload">upload (required).</param>
        /// <param name="uri">The video&#39;s canonical relative URI. (required).</param>
        /// <param name="user">The video owner. (required).</param>
        /// <param name="width">The video&#39;s width in pixels. (required).</param>
        public Video(List<Category> categories = default(List<Category>), List<string> contentRating = default(List<string>), VideoContext context = default(VideoContext), string createdTime = default(string), string description = default(string), decimal duration = default(decimal), EmbedSettings embed = default(EmbedSettings), decimal height = default(decimal), string language = default(string), string lastUserActionEventDate = default(string), LicenseEnum license = default(LicenseEnum), string link = default(string), VideoMetadata metadata = default(VideoMetadata), string modifiedTime = default(string), string name = default(string), Project parentFolder = default(Project), string password = default(string), Picture pictures = default(Picture), VideoPrivacy privacy = default(VideoPrivacy), string releaseTime = default(string), string resourceKey = default(string), VideoSpatial spatial = default(VideoSpatial), VideoStats stats = default(VideoStats), StatusEnum status = default(StatusEnum), List<Tag> tags = default(List<Tag>), VideoTranscode transcode = default(VideoTranscode), TypeEnum type = default(TypeEnum), VideoUpload upload = default(VideoUpload), string uri = default(string), User user = default(User), decimal width = default(decimal))
        {
            // to ensure "categories" is required (not null)
            this.Categories = categories ?? throw new ArgumentNullException("categories is a required property for Video and cannot be null");
            // to ensure "contentRating" is required (not null)
            this.ContentRating = contentRating ?? throw new ArgumentNullException("contentRating is a required property for Video and cannot be null");
            // to ensure "context" is required (not null)
            this.Context = context ?? throw new ArgumentNullException("context is a required property for Video and cannot be null");
            // to ensure "createdTime" is required (not null)
            this.CreatedTime = createdTime ?? throw new ArgumentNullException("createdTime is a required property for Video and cannot be null");
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for Video and cannot be null");
            this.Duration = duration;
            // to ensure "embed" is required (not null)
            this.Embed = embed ?? throw new ArgumentNullException("embed is a required property for Video and cannot be null");
            this.Height = height;
            // to ensure "language" is required (not null)
            this.Language = language ?? throw new ArgumentNullException("language is a required property for Video and cannot be null");
            this.License = license;
            // to ensure "link" is required (not null)
            this.Link = link ?? throw new ArgumentNullException("link is a required property for Video and cannot be null");
            // to ensure "metadata" is required (not null)
            this.Metadata = metadata ?? throw new ArgumentNullException("metadata is a required property for Video and cannot be null");
            // to ensure "modifiedTime" is required (not null)
            this.ModifiedTime = modifiedTime ?? throw new ArgumentNullException("modifiedTime is a required property for Video and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Video and cannot be null");
            // to ensure "pictures" is required (not null)
            this.Pictures = pictures ?? throw new ArgumentNullException("pictures is a required property for Video and cannot be null");
            // to ensure "privacy" is required (not null)
            this.Privacy = privacy ?? throw new ArgumentNullException("privacy is a required property for Video and cannot be null");
            // to ensure "releaseTime" is required (not null)
            this.ReleaseTime = releaseTime ?? throw new ArgumentNullException("releaseTime is a required property for Video and cannot be null");
            // to ensure "resourceKey" is required (not null)
            this.ResourceKey = resourceKey ?? throw new ArgumentNullException("resourceKey is a required property for Video and cannot be null");
            // to ensure "spatial" is required (not null)
            this.Spatial = spatial ?? throw new ArgumentNullException("spatial is a required property for Video and cannot be null");
            // to ensure "stats" is required (not null)
            this.Stats = stats ?? throw new ArgumentNullException("stats is a required property for Video and cannot be null");
            this.Status = status;
            // to ensure "tags" is required (not null)
            this.Tags = tags ?? throw new ArgumentNullException("tags is a required property for Video and cannot be null");
            // to ensure "transcode" is required (not null)
            this.Transcode = transcode ?? throw new ArgumentNullException("transcode is a required property for Video and cannot be null");
            this.Type = type;
            // to ensure "upload" is required (not null)
            this.Upload = upload ?? throw new ArgumentNullException("upload is a required property for Video and cannot be null");
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for Video and cannot be null");
            // to ensure "user" is required (not null)
            this.User = user ?? throw new ArgumentNullException("user is a required property for Video and cannot be null");
            this.Width = width;
            this.LastUserActionEventDate = lastUserActionEventDate;
            this.ParentFolder = parentFolder;
            this.Password = password;
        }
        
        /// <summary>
        /// The categories to which this video belongs.
        /// </summary>
        /// <value>The categories to which this video belongs.</value>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<Category> Categories { get; set; }

        /// <summary>
        /// The content ratings of this video.
        /// </summary>
        /// <value>The content ratings of this video.</value>
        [DataMember(Name="content_rating", EmitDefaultValue=false)]
        public List<string> ContentRating { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public VideoContext Context { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the video was created.
        /// </summary>
        /// <value>The time in ISO 8601 format when the video was created.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public string CreatedTime { get; set; }

        /// <summary>
        /// A brief explanation of the video&#39;s content.
        /// </summary>
        /// <value>A brief explanation of the video&#39;s content.</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// The video&#39;s duration in seconds.
        /// </summary>
        /// <value>The video&#39;s duration in seconds.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public decimal Duration { get; set; }

        /// <summary>
        /// Information about embedding this video.
        /// </summary>
        /// <value>Information about embedding this video.</value>
        [DataMember(Name="embed", EmitDefaultValue=false)]
        public EmbedSettings Embed { get; set; }

        /// <summary>
        /// The video&#39;s height in pixels.
        /// </summary>
        /// <value>The video&#39;s height in pixels.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public decimal Height { get; set; }

        /// <summary>
        /// The video&#39;s primary language.
        /// </summary>
        /// <value>The video&#39;s primary language.</value>
        [DataMember(Name="language", EmitDefaultValue=true)]
        public string Language { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the user last modified the video.
        /// </summary>
        /// <value>The time in ISO 8601 format when the user last modified the video.</value>
        [DataMember(Name="last_user_action_event_date", EmitDefaultValue=true)]
        public string LastUserActionEventDate { get; set; }

        /// <summary>
        /// The link to the video.
        /// </summary>
        /// <value>The link to the video.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public VideoMetadata Metadata { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the video metadata was last modified.
        /// </summary>
        /// <value>The time in ISO 8601 format when the video metadata was last modified.</value>
        [DataMember(Name="modified_time", EmitDefaultValue=false)]
        public string ModifiedTime { get; set; }

        /// <summary>
        /// The video&#39;s title.
        /// </summary>
        /// <value>The video&#39;s title.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Information about the folder that contains this video.
        /// </summary>
        /// <value>Information about the folder that contains this video.</value>
        [DataMember(Name="parent_folder", EmitDefaultValue=true)]
        public Project ParentFolder { get; set; }

        /// <summary>
        /// The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the &#x60;private&#x60; scope.
        /// </summary>
        /// <value>The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the &#x60;private&#x60; scope.</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// The active picture for this video.
        /// </summary>
        /// <value>The active picture for this video.</value>
        [DataMember(Name="pictures", EmitDefaultValue=false)]
        public Picture Pictures { get; set; }

        /// <summary>
        /// Gets or Sets Privacy
        /// </summary>
        [DataMember(Name="privacy", EmitDefaultValue=false)]
        public VideoPrivacy Privacy { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the video was released.
        /// </summary>
        /// <value>The time in ISO 8601 format when the video was released.</value>
        [DataMember(Name="release_time", EmitDefaultValue=false)]
        public string ReleaseTime { get; set; }

        /// <summary>
        /// The resource key string of the video.
        /// </summary>
        /// <value>The resource key string of the video.</value>
        [DataMember(Name="resource_key", EmitDefaultValue=false)]
        public string ResourceKey { get; set; }

        /// <summary>
        /// Gets or Sets Spatial
        /// </summary>
        [DataMember(Name="spatial", EmitDefaultValue=false)]
        public VideoSpatial Spatial { get; set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public VideoStats Stats { get; set; }

        /// <summary>
        /// An array of all tags assigned to this video.
        /// </summary>
        /// <value>An array of all tags assigned to this video.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<Tag> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Transcode
        /// </summary>
        [DataMember(Name="transcode", EmitDefaultValue=true)]
        public VideoTranscode Transcode { get; set; }

        /// <summary>
        /// Gets or Sets Upload
        /// </summary>
        [DataMember(Name="upload", EmitDefaultValue=true)]
        public VideoUpload Upload { get; set; }

        /// <summary>
        /// The video&#39;s canonical relative URI.
        /// </summary>
        /// <value>The video&#39;s canonical relative URI.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The video owner.
        /// </summary>
        /// <value>The video owner.</value>
        [DataMember(Name="user", EmitDefaultValue=true)]
        public User User { get; set; }

        /// <summary>
        /// The video&#39;s width in pixels.
        /// </summary>
        /// <value>The video&#39;s width in pixels.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public decimal Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Video {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  ContentRating: ").Append(ContentRating).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Embed: ").Append(Embed).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LastUserActionEventDate: ").Append(LastUserActionEventDate).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentFolder: ").Append(ParentFolder).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("  ReleaseTime: ").Append(ReleaseTime).Append("\n");
            sb.Append("  ResourceKey: ").Append(ResourceKey).Append("\n");
            sb.Append("  Spatial: ").Append(Spatial).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Transcode: ").Append(Transcode).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Upload: ").Append(Upload).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Video);
        }

        /// <summary>
        /// Returns true if Video instances are equal
        /// </summary>
        /// <param name="input">Instance of Video to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Video input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.ContentRating == input.ContentRating ||
                    this.ContentRating != null &&
                    input.ContentRating != null &&
                    this.ContentRating.SequenceEqual(input.ContentRating)
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.Embed == input.Embed ||
                    (this.Embed != null &&
                    this.Embed.Equals(input.Embed))
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.LastUserActionEventDate == input.LastUserActionEventDate ||
                    (this.LastUserActionEventDate != null &&
                    this.LastUserActionEventDate.Equals(input.LastUserActionEventDate))
                ) && 
                (
                    this.License == input.License ||
                    this.License.Equals(input.License)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParentFolder == input.ParentFolder ||
                    (this.ParentFolder != null &&
                    this.ParentFolder.Equals(input.ParentFolder))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Pictures == input.Pictures ||
                    (this.Pictures != null &&
                    this.Pictures.Equals(input.Pictures))
                ) && 
                (
                    this.Privacy == input.Privacy ||
                    (this.Privacy != null &&
                    this.Privacy.Equals(input.Privacy))
                ) && 
                (
                    this.ReleaseTime == input.ReleaseTime ||
                    (this.ReleaseTime != null &&
                    this.ReleaseTime.Equals(input.ReleaseTime))
                ) && 
                (
                    this.ResourceKey == input.ResourceKey ||
                    (this.ResourceKey != null &&
                    this.ResourceKey.Equals(input.ResourceKey))
                ) && 
                (
                    this.Spatial == input.Spatial ||
                    (this.Spatial != null &&
                    this.Spatial.Equals(input.Spatial))
                ) && 
                (
                    this.Stats == input.Stats ||
                    (this.Stats != null &&
                    this.Stats.Equals(input.Stats))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Transcode == input.Transcode ||
                    (this.Transcode != null &&
                    this.Transcode.Equals(input.Transcode))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Upload == input.Upload ||
                    (this.Upload != null &&
                    this.Upload.Equals(input.Upload))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.ContentRating != null)
                    hashCode = hashCode * 59 + this.ContentRating.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Embed != null)
                    hashCode = hashCode * 59 + this.Embed.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.LastUserActionEventDate != null)
                    hashCode = hashCode * 59 + this.LastUserActionEventDate.GetHashCode();
                hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParentFolder != null)
                    hashCode = hashCode * 59 + this.ParentFolder.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Pictures != null)
                    hashCode = hashCode * 59 + this.Pictures.GetHashCode();
                if (this.Privacy != null)
                    hashCode = hashCode * 59 + this.Privacy.GetHashCode();
                if (this.ReleaseTime != null)
                    hashCode = hashCode * 59 + this.ReleaseTime.GetHashCode();
                if (this.ResourceKey != null)
                    hashCode = hashCode * 59 + this.ResourceKey.GetHashCode();
                if (this.Spatial != null)
                    hashCode = hashCode * 59 + this.Spatial.GetHashCode();
                if (this.Stats != null)
                    hashCode = hashCode * 59 + this.Stats.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Transcode != null)
                    hashCode = hashCode * 59 + this.Transcode.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Upload != null)
                    hashCode = hashCode * 59 + this.Upload.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
