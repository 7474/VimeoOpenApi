/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Auth
    /// </summary>
    [DataContract]
    public partial class Auth :  IEquatable<Auth>, IValidatableObject
    {
        /// <summary>
        /// The token type.  Option descriptions:  * &#x60;bearer&#x60; - The token is of the &#x60;bearer&#x60; type. 
        /// </summary>
        /// <value>The token type.  Option descriptions:  * &#x60;bearer&#x60; - The token is of the &#x60;bearer&#x60; type. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TokenTypeEnum
        {
            /// <summary>
            /// Enum Bearer for value: bearer
            /// </summary>
            [EnumMember(Value = "bearer")]
            Bearer = 1

        }

        /// <summary>
        /// The token type.  Option descriptions:  * &#x60;bearer&#x60; - The token is of the &#x60;bearer&#x60; type. 
        /// </summary>
        /// <value>The token type.  Option descriptions:  * &#x60;bearer&#x60; - The token is of the &#x60;bearer&#x60; type. </value>
        [DataMember(Name="token_type", EmitDefaultValue=false)]
        public TokenTypeEnum TokenType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Auth() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth" /> class.
        /// </summary>
        /// <param name="accessToken">The access token string. (required).</param>
        /// <param name="app">The API application associated with the token. (required).</param>
        /// <param name="expiresOn">The token&#39;s expiration date..</param>
        /// <param name="refreshToken">The refresh token string..</param>
        /// <param name="scope">The scope or scopes that the token supports. (required).</param>
        /// <param name="tokenType">The token type.  Option descriptions:  * &#x60;bearer&#x60; - The token is of the &#x60;bearer&#x60; type.  (required).</param>
        /// <param name="user">The user associated with the token..</param>
        public Auth(string accessToken = default(string), ApiApp app = default(ApiApp), string expiresOn = default(string), string refreshToken = default(string), string scope = default(string), TokenTypeEnum tokenType = default(TokenTypeEnum), User user = default(User))
        {
            // to ensure "accessToken" is required (not null)
            this.AccessToken = accessToken ?? throw new ArgumentNullException("accessToken is a required property for Auth and cannot be null");
            // to ensure "app" is required (not null)
            this.App = app ?? throw new ArgumentNullException("app is a required property for Auth and cannot be null");
            // to ensure "scope" is required (not null)
            this.Scope = scope ?? throw new ArgumentNullException("scope is a required property for Auth and cannot be null");
            this.TokenType = tokenType;
            this.ExpiresOn = expiresOn;
            this.RefreshToken = refreshToken;
            this.User = user;
        }
        
        /// <summary>
        /// The access token string.
        /// </summary>
        /// <value>The access token string.</value>
        [DataMember(Name="access_token", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// The API application associated with the token.
        /// </summary>
        /// <value>The API application associated with the token.</value>
        [DataMember(Name="app", EmitDefaultValue=false)]
        public ApiApp App { get; set; }

        /// <summary>
        /// The token&#39;s expiration date.
        /// </summary>
        /// <value>The token&#39;s expiration date.</value>
        [DataMember(Name="expires_on", EmitDefaultValue=false)]
        public string ExpiresOn { get; set; }

        /// <summary>
        /// The refresh token string.
        /// </summary>
        /// <value>The refresh token string.</value>
        [DataMember(Name="refresh_token", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// The scope or scopes that the token supports.
        /// </summary>
        /// <value>The scope or scopes that the token supports.</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// The user associated with the token.
        /// </summary>
        /// <value>The user associated with the token.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Auth {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  ExpiresOn: ").Append(ExpiresOn).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Auth);
        }

        /// <summary>
        /// Returns true if Auth instances are equal
        /// </summary>
        /// <param name="input">Instance of Auth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Auth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.App == input.App ||
                    (this.App != null &&
                    this.App.Equals(input.App))
                ) && 
                (
                    this.ExpiresOn == input.ExpiresOn ||
                    (this.ExpiresOn != null &&
                    this.ExpiresOn.Equals(input.ExpiresOn))
                ) && 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.TokenType == input.TokenType ||
                    this.TokenType.Equals(input.TokenType)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.App != null)
                    hashCode = hashCode * 59 + this.App.GetHashCode();
                if (this.ExpiresOn != null)
                    hashCode = hashCode * 59 + this.ExpiresOn.GetHashCode();
                if (this.RefreshToken != null)
                    hashCode = hashCode * 59 + this.RefreshToken.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                hashCode = hashCode * 59 + this.TokenType.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
