/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// MeVideosEmbedLogosCustom
    /// </summary>
    [DataContract]
    public partial class MeVideosEmbedLogosCustom :  IEquatable<MeVideosEmbedLogosCustom>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeVideosEmbedLogosCustom" /> class.
        /// </summary>
        /// <param name="active">Whether to show the active custom logo on the embeddable player..</param>
        /// <param name="link">The URL that loads when the user clicks the custom logo..</param>
        /// <param name="sticky">Whether the custom logo is always visible on the embeddable player (&#x60;true&#x60;) or whether the logo appears and disappears with the rest of the UI (&#x60;false&#x60;)..</param>
        public MeVideosEmbedLogosCustom(bool active = default(bool), string link = default(string), bool sticky = default(bool))
        {
            this.Active = active;
            this.Link = link;
            this.Sticky = sticky;
        }
        
        /// <summary>
        /// Whether to show the active custom logo on the embeddable player.
        /// </summary>
        /// <value>Whether to show the active custom logo on the embeddable player.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// The URL that loads when the user clicks the custom logo.
        /// </summary>
        /// <value>The URL that loads when the user clicks the custom logo.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Whether the custom logo is always visible on the embeddable player (&#x60;true&#x60;) or whether the logo appears and disappears with the rest of the UI (&#x60;false&#x60;).
        /// </summary>
        /// <value>Whether the custom logo is always visible on the embeddable player (&#x60;true&#x60;) or whether the logo appears and disappears with the rest of the UI (&#x60;false&#x60;).</value>
        [DataMember(Name="sticky", EmitDefaultValue=false)]
        public bool Sticky { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeVideosEmbedLogosCustom {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Sticky: ").Append(Sticky).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeVideosEmbedLogosCustom);
        }

        /// <summary>
        /// Returns true if MeVideosEmbedLogosCustom instances are equal
        /// </summary>
        /// <param name="input">Instance of MeVideosEmbedLogosCustom to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeVideosEmbedLogosCustom input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Sticky == input.Sticky ||
                    this.Sticky.Equals(input.Sticky)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                hashCode = hashCode * 59 + this.Sticky.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
