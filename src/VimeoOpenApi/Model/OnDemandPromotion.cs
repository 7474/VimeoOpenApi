/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// OnDemandPromotion
    /// </summary>
    [DataContract]
    public partial class OnDemandPromotion :  IEquatable<OnDemandPromotion>, IValidatableObject
    {
        /// <summary>
        /// The type of access that the promotion grants.  Option descriptions:  * &#x60;default&#x60; - The promotion grants discounts on existing product offerings.  * &#x60;vip&#x60; - The promotion grants free access to On Demand content before it is released or to access types that aren&#39;t part of the existing product offerings. 
        /// </summary>
        /// <value>The type of access that the promotion grants.  Option descriptions:  * &#x60;default&#x60; - The promotion grants discounts on existing product offerings.  * &#x60;vip&#x60; - The promotion grants free access to On Demand content before it is released or to access types that aren&#39;t part of the existing product offerings. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccessTypeEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,

            /// <summary>
            /// Enum Vip for value: vip
            /// </summary>
            [EnumMember(Value = "vip")]
            Vip = 2

        }

        /// <summary>
        /// The type of access that the promotion grants.  Option descriptions:  * &#x60;default&#x60; - The promotion grants discounts on existing product offerings.  * &#x60;vip&#x60; - The promotion grants free access to On Demand content before it is released or to access types that aren&#39;t part of the existing product offerings. 
        /// </summary>
        /// <value>The type of access that the promotion grants.  Option descriptions:  * &#x60;default&#x60; - The promotion grants discounts on existing product offerings.  * &#x60;vip&#x60; - The promotion grants free access to On Demand content before it is released or to access types that aren&#39;t part of the existing product offerings. </value>
        [DataMember(Name="access_type", EmitDefaultValue=false)]
        public AccessTypeEnum AccessType { get; set; }
        /// <summary>
        /// The type of discount that the promotion provides.  Option descriptions:  * &#x60;dollars&#x60; - The promotion discounts a fixed amount from the full purchase price.  * &#x60;free&#x60; - The promotion discounts the full purchase price. When **access_type** is &#x60;vip&#x60;, **discount_type** is always &#x60;free&#x60;.  * &#x60;percent&#x60; - The promotion discounts a percentage of the full purchase price. 
        /// </summary>
        /// <value>The type of discount that the promotion provides.  Option descriptions:  * &#x60;dollars&#x60; - The promotion discounts a fixed amount from the full purchase price.  * &#x60;free&#x60; - The promotion discounts the full purchase price. When **access_type** is &#x60;vip&#x60;, **discount_type** is always &#x60;free&#x60;.  * &#x60;percent&#x60; - The promotion discounts a percentage of the full purchase price. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiscountTypeEnum
        {
            /// <summary>
            /// Enum Dollars for value: dollars
            /// </summary>
            [EnumMember(Value = "dollars")]
            Dollars = 1,

            /// <summary>
            /// Enum Free for value: free
            /// </summary>
            [EnumMember(Value = "free")]
            Free = 2,

            /// <summary>
            /// Enum Percent for value: percent
            /// </summary>
            [EnumMember(Value = "percent")]
            Percent = 3

        }

        /// <summary>
        /// The type of discount that the promotion provides.  Option descriptions:  * &#x60;dollars&#x60; - The promotion discounts a fixed amount from the full purchase price.  * &#x60;free&#x60; - The promotion discounts the full purchase price. When **access_type** is &#x60;vip&#x60;, **discount_type** is always &#x60;free&#x60;.  * &#x60;percent&#x60; - The promotion discounts a percentage of the full purchase price. 
        /// </summary>
        /// <value>The type of discount that the promotion provides.  Option descriptions:  * &#x60;dollars&#x60; - The promotion discounts a fixed amount from the full purchase price.  * &#x60;free&#x60; - The promotion discounts the full purchase price. When **access_type** is &#x60;vip&#x60;, **discount_type** is always &#x60;free&#x60;.  * &#x60;percent&#x60; - The promotion discounts a percentage of the full purchase price. </value>
        [DataMember(Name="discount_type", EmitDefaultValue=false)]
        public DiscountTypeEnum DiscountType { get; set; }
        /// <summary>
        /// The type of product to which the promotion can be applied. Only the &#x60;buy&#x60; and &#x60;rent&#x60; options are available when **access_type** is &#x60;vip&#x60;.  Option descriptions:  * &#x60;any&#x60; - The promotion can be applied to any product.  * &#x60;buy&#x60; - The promotion can be applied to a buyable single video.  * &#x60;buy_episode&#x60; - The promotion can be applied to a buyable single episode.  * &#x60;rent&#x60; - The promotion can be applied to a rentable single video.  * &#x60;rent_episode&#x60; - The promotion can be applied to a rentable single episode.  * &#x60;subscribe&#x60; - The promotion can be applied to a subscription. 
        /// </summary>
        /// <value>The type of product to which the promotion can be applied. Only the &#x60;buy&#x60; and &#x60;rent&#x60; options are available when **access_type** is &#x60;vip&#x60;.  Option descriptions:  * &#x60;any&#x60; - The promotion can be applied to any product.  * &#x60;buy&#x60; - The promotion can be applied to a buyable single video.  * &#x60;buy_episode&#x60; - The promotion can be applied to a buyable single episode.  * &#x60;rent&#x60; - The promotion can be applied to a rentable single video.  * &#x60;rent_episode&#x60; - The promotion can be applied to a rentable single episode.  * &#x60;subscribe&#x60; - The promotion can be applied to a subscription. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductTypeEnum
        {
            /// <summary>
            /// Enum Any for value: any
            /// </summary>
            [EnumMember(Value = "any")]
            Any = 1,

            /// <summary>
            /// Enum Buy for value: buy
            /// </summary>
            [EnumMember(Value = "buy")]
            Buy = 2,

            /// <summary>
            /// Enum Buyepisode for value: buy_episode
            /// </summary>
            [EnumMember(Value = "buy_episode")]
            Buyepisode = 3,

            /// <summary>
            /// Enum Rent for value: rent
            /// </summary>
            [EnumMember(Value = "rent")]
            Rent = 4,

            /// <summary>
            /// Enum Rentepisode for value: rent_episode
            /// </summary>
            [EnumMember(Value = "rent_episode")]
            Rentepisode = 5,

            /// <summary>
            /// Enum Subscribe for value: subscribe
            /// </summary>
            [EnumMember(Value = "subscribe")]
            Subscribe = 6

        }

        /// <summary>
        /// The type of product to which the promotion can be applied. Only the &#x60;buy&#x60; and &#x60;rent&#x60; options are available when **access_type** is &#x60;vip&#x60;.  Option descriptions:  * &#x60;any&#x60; - The promotion can be applied to any product.  * &#x60;buy&#x60; - The promotion can be applied to a buyable single video.  * &#x60;buy_episode&#x60; - The promotion can be applied to a buyable single episode.  * &#x60;rent&#x60; - The promotion can be applied to a rentable single video.  * &#x60;rent_episode&#x60; - The promotion can be applied to a rentable single episode.  * &#x60;subscribe&#x60; - The promotion can be applied to a subscription. 
        /// </summary>
        /// <value>The type of product to which the promotion can be applied. Only the &#x60;buy&#x60; and &#x60;rent&#x60; options are available when **access_type** is &#x60;vip&#x60;.  Option descriptions:  * &#x60;any&#x60; - The promotion can be applied to any product.  * &#x60;buy&#x60; - The promotion can be applied to a buyable single video.  * &#x60;buy_episode&#x60; - The promotion can be applied to a buyable single episode.  * &#x60;rent&#x60; - The promotion can be applied to a rentable single video.  * &#x60;rent_episode&#x60; - The promotion can be applied to a rentable single episode.  * &#x60;subscribe&#x60; - The promotion can be applied to a subscription. </value>
        [DataMember(Name="product_type", EmitDefaultValue=false)]
        public ProductTypeEnum ProductType { get; set; }
        /// <summary>
        /// The amount of time that the user has access to the On Demand content after redeeming a promo code.  Option descriptions:  * &#x60;1_week&#x60; - Access lasts for one week.  * &#x60;1_year&#x60; - Access lasts for one year.  * &#x60;24_hour&#x60; - Access lasts for 24 hours.  * &#x60;30_days&#x60; - Access lasts for 30 days.  * &#x60;3_month&#x60; - Access lasts for three months.  * &#x60;48_hour&#x60; - Access lasts for 48 hours.  * &#x60;6_month&#x60; - Access lasts for six months.  * &#x60;72_hour&#x60; - Access lasts for 72 hours. 
        /// </summary>
        /// <value>The amount of time that the user has access to the On Demand content after redeeming a promo code.  Option descriptions:  * &#x60;1_week&#x60; - Access lasts for one week.  * &#x60;1_year&#x60; - Access lasts for one year.  * &#x60;24_hour&#x60; - Access lasts for 24 hours.  * &#x60;30_days&#x60; - Access lasts for 30 days.  * &#x60;3_month&#x60; - Access lasts for three months.  * &#x60;48_hour&#x60; - Access lasts for 48 hours.  * &#x60;6_month&#x60; - Access lasts for six months.  * &#x60;72_hour&#x60; - Access lasts for 72 hours. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StreamPeriodEnum
        {
            /// <summary>
            /// Enum _1week for value: 1_week
            /// </summary>
            [EnumMember(Value = "1_week")]
            _1week = 1,

            /// <summary>
            /// Enum _1year for value: 1_year
            /// </summary>
            [EnumMember(Value = "1_year")]
            _1year = 2,

            /// <summary>
            /// Enum _24hour for value: 24_hour
            /// </summary>
            [EnumMember(Value = "24_hour")]
            _24hour = 3,

            /// <summary>
            /// Enum _30days for value: 30_days
            /// </summary>
            [EnumMember(Value = "30_days")]
            _30days = 4,

            /// <summary>
            /// Enum _3month for value: 3_month
            /// </summary>
            [EnumMember(Value = "3_month")]
            _3month = 5,

            /// <summary>
            /// Enum _48hour for value: 48_hour
            /// </summary>
            [EnumMember(Value = "48_hour")]
            _48hour = 6,

            /// <summary>
            /// Enum _6month for value: 6_month
            /// </summary>
            [EnumMember(Value = "6_month")]
            _6month = 7,

            /// <summary>
            /// Enum _72hour for value: 72_hour
            /// </summary>
            [EnumMember(Value = "72_hour")]
            _72hour = 8

        }

        /// <summary>
        /// The amount of time that the user has access to the On Demand content after redeeming a promo code.  Option descriptions:  * &#x60;1_week&#x60; - Access lasts for one week.  * &#x60;1_year&#x60; - Access lasts for one year.  * &#x60;24_hour&#x60; - Access lasts for 24 hours.  * &#x60;30_days&#x60; - Access lasts for 30 days.  * &#x60;3_month&#x60; - Access lasts for three months.  * &#x60;48_hour&#x60; - Access lasts for 48 hours.  * &#x60;6_month&#x60; - Access lasts for six months.  * &#x60;72_hour&#x60; - Access lasts for 72 hours. 
        /// </summary>
        /// <value>The amount of time that the user has access to the On Demand content after redeeming a promo code.  Option descriptions:  * &#x60;1_week&#x60; - Access lasts for one week.  * &#x60;1_year&#x60; - Access lasts for one year.  * &#x60;24_hour&#x60; - Access lasts for 24 hours.  * &#x60;30_days&#x60; - Access lasts for 30 days.  * &#x60;3_month&#x60; - Access lasts for three months.  * &#x60;48_hour&#x60; - Access lasts for 48 hours.  * &#x60;6_month&#x60; - Access lasts for six months.  * &#x60;72_hour&#x60; - Access lasts for 72 hours. </value>
        [DataMember(Name="stream_period", EmitDefaultValue=true)]
        public StreamPeriodEnum StreamPeriod { get; set; }
        /// <summary>
        /// The way in which the promotion generates promo codes.  Option descriptions:  * &#x60;batch&#x60; - The promotion provides a unique promo code for each user.  * &#x60;batch_prefix&#x60; - Like &#x60;batch&#x60;, except that all codes have a similar prefix string. This option is deprecated, yet it may still appear for some users.  * &#x60;single&#x60; - The promotion provides a single promo code for all users. 
        /// </summary>
        /// <value>The way in which the promotion generates promo codes.  Option descriptions:  * &#x60;batch&#x60; - The promotion provides a unique promo code for each user.  * &#x60;batch_prefix&#x60; - Like &#x60;batch&#x60;, except that all codes have a similar prefix string. This option is deprecated, yet it may still appear for some users.  * &#x60;single&#x60; - The promotion provides a single promo code for all users. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Batch for value: batch
            /// </summary>
            [EnumMember(Value = "batch")]
            Batch = 1,

            /// <summary>
            /// Enum Batchprefix for value: batch_prefix
            /// </summary>
            [EnumMember(Value = "batch_prefix")]
            Batchprefix = 2,

            /// <summary>
            /// Enum Single for value: single
            /// </summary>
            [EnumMember(Value = "single")]
            Single = 3

        }

        /// <summary>
        /// The way in which the promotion generates promo codes.  Option descriptions:  * &#x60;batch&#x60; - The promotion provides a unique promo code for each user.  * &#x60;batch_prefix&#x60; - Like &#x60;batch&#x60;, except that all codes have a similar prefix string. This option is deprecated, yet it may still appear for some users.  * &#x60;single&#x60; - The promotion provides a single promo code for all users. 
        /// </summary>
        /// <value>The way in which the promotion generates promo codes.  Option descriptions:  * &#x60;batch&#x60; - The promotion provides a unique promo code for each user.  * &#x60;batch_prefix&#x60; - Like &#x60;batch&#x60;, except that all codes have a similar prefix string. This option is deprecated, yet it may still appear for some users.  * &#x60;single&#x60; - The promotion provides a single promo code for all users. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPromotion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OnDemandPromotion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPromotion" /> class.
        /// </summary>
        /// <param name="accessType">The type of access that the promotion grants.  Option descriptions:  * &#x60;default&#x60; - The promotion grants discounts on existing product offerings.  * &#x60;vip&#x60; - The promotion grants free access to On Demand content before it is released or to access types that aren&#39;t part of the existing product offerings.  (required).</param>
        /// <param name="discountType">The type of discount that the promotion provides.  Option descriptions:  * &#x60;dollars&#x60; - The promotion discounts a fixed amount from the full purchase price.  * &#x60;free&#x60; - The promotion discounts the full purchase price. When **access_type** is &#x60;vip&#x60;, **discount_type** is always &#x60;free&#x60;.  * &#x60;percent&#x60; - The promotion discounts a percentage of the full purchase price.  (required).</param>
        /// <param name="download">Whether the promotion grants download access to On Demand content. (required).</param>
        /// <param name="label">The prefix string for batch codes, or the null value for single codes. (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="percentOff">When **discount_type** is &#x60;percent&#x60;, the percentage amount that is deducted from the product price. (required).</param>
        /// <param name="productType">The type of product to which the promotion can be applied. Only the &#x60;buy&#x60; and &#x60;rent&#x60; options are available when **access_type** is &#x60;vip&#x60;.  Option descriptions:  * &#x60;any&#x60; - The promotion can be applied to any product.  * &#x60;buy&#x60; - The promotion can be applied to a buyable single video.  * &#x60;buy_episode&#x60; - The promotion can be applied to a buyable single episode.  * &#x60;rent&#x60; - The promotion can be applied to a rentable single video.  * &#x60;rent_episode&#x60; - The promotion can be applied to a rentable single episode.  * &#x60;subscribe&#x60; - The promotion can be applied to a subscription.  (required).</param>
        /// <param name="streamPeriod">The amount of time that the user has access to the On Demand content after redeeming a promo code.  Option descriptions:  * &#x60;1_week&#x60; - Access lasts for one week.  * &#x60;1_year&#x60; - Access lasts for one year.  * &#x60;24_hour&#x60; - Access lasts for 24 hours.  * &#x60;30_days&#x60; - Access lasts for 30 days.  * &#x60;3_month&#x60; - Access lasts for three months.  * &#x60;48_hour&#x60; - Access lasts for 48 hours.  * &#x60;6_month&#x60; - Access lasts for six months.  * &#x60;72_hour&#x60; - Access lasts for 72 hours.  (required).</param>
        /// <param name="total">When **type** is &#x60;single&#x60;, the total number of times that the promotion can be used. When **type** is &#x60;batch&#x60; or &#x60;batch_prefix&#x60;, the total number of promo codes that have been generated. (required).</param>
        /// <param name="type">The way in which the promotion generates promo codes.  Option descriptions:  * &#x60;batch&#x60; - The promotion provides a unique promo code for each user.  * &#x60;batch_prefix&#x60; - Like &#x60;batch&#x60;, except that all codes have a similar prefix string. This option is deprecated, yet it may still appear for some users.  * &#x60;single&#x60; - The promotion provides a single promo code for all users.  (required).</param>
        /// <param name="uri">The promotion&#39;s canonical relative URI. (required).</param>
        public OnDemandPromotion(AccessTypeEnum accessType = default(AccessTypeEnum), DiscountTypeEnum discountType = default(DiscountTypeEnum), bool download = default(bool), string label = default(string), OnDemandPromotionMetadata metadata = default(OnDemandPromotionMetadata), decimal percentOff = default(decimal), ProductTypeEnum productType = default(ProductTypeEnum), StreamPeriodEnum streamPeriod = default(StreamPeriodEnum), decimal total = default(decimal), TypeEnum type = default(TypeEnum), string uri = default(string))
        {
            this.AccessType = accessType;
            this.DiscountType = discountType;
            this.Download = download;
            // to ensure "label" is required (not null)
            this.Label = label ?? throw new ArgumentNullException("label is a required property for OnDemandPromotion and cannot be null");
            // to ensure "metadata" is required (not null)
            this.Metadata = metadata ?? throw new ArgumentNullException("metadata is a required property for OnDemandPromotion and cannot be null");
            this.PercentOff = percentOff;
            this.ProductType = productType;
            this.StreamPeriod = streamPeriod;
            this.Total = total;
            this.Type = type;
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for OnDemandPromotion and cannot be null");
        }
        
        /// <summary>
        /// Whether the promotion grants download access to On Demand content.
        /// </summary>
        /// <value>Whether the promotion grants download access to On Demand content.</value>
        [DataMember(Name="download", EmitDefaultValue=false)]
        public bool Download { get; set; }

        /// <summary>
        /// The prefix string for batch codes, or the null value for single codes.
        /// </summary>
        /// <value>The prefix string for batch codes, or the null value for single codes.</value>
        [DataMember(Name="label", EmitDefaultValue=true)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public OnDemandPromotionMetadata Metadata { get; set; }

        /// <summary>
        /// When **discount_type** is &#x60;percent&#x60;, the percentage amount that is deducted from the product price.
        /// </summary>
        /// <value>When **discount_type** is &#x60;percent&#x60;, the percentage amount that is deducted from the product price.</value>
        [DataMember(Name="percent_off", EmitDefaultValue=false)]
        public decimal PercentOff { get; set; }

        /// <summary>
        /// When **type** is &#x60;single&#x60;, the total number of times that the promotion can be used. When **type** is &#x60;batch&#x60; or &#x60;batch_prefix&#x60;, the total number of promo codes that have been generated.
        /// </summary>
        /// <value>When **type** is &#x60;single&#x60;, the total number of times that the promotion can be used. When **type** is &#x60;batch&#x60; or &#x60;batch_prefix&#x60;, the total number of promo codes that have been generated.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal Total { get; set; }

        /// <summary>
        /// The promotion&#39;s canonical relative URI.
        /// </summary>
        /// <value>The promotion&#39;s canonical relative URI.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnDemandPromotion {\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  PercentOff: ").Append(PercentOff).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  StreamPeriod: ").Append(StreamPeriod).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnDemandPromotion);
        }

        /// <summary>
        /// Returns true if OnDemandPromotion instances are equal
        /// </summary>
        /// <param name="input">Instance of OnDemandPromotion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnDemandPromotion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessType == input.AccessType ||
                    this.AccessType.Equals(input.AccessType)
                ) && 
                (
                    this.DiscountType == input.DiscountType ||
                    this.DiscountType.Equals(input.DiscountType)
                ) && 
                (
                    this.Download == input.Download ||
                    this.Download.Equals(input.Download)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.PercentOff == input.PercentOff ||
                    this.PercentOff.Equals(input.PercentOff)
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    this.ProductType.Equals(input.ProductType)
                ) && 
                (
                    this.StreamPeriod == input.StreamPeriod ||
                    this.StreamPeriod.Equals(input.StreamPeriod)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AccessType.GetHashCode();
                hashCode = hashCode * 59 + this.DiscountType.GetHashCode();
                hashCode = hashCode * 59 + this.Download.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                hashCode = hashCode * 59 + this.PercentOff.GetHashCode();
                hashCode = hashCode * 59 + this.ProductType.GetHashCode();
                hashCode = hashCode * 59 + this.StreamPeriod.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
