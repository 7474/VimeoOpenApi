/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// OnDemandPageMetadataConnectionsMetadataConnections
    /// </summary>
    [DataContract]
    public partial class OnDemandPageMetadataConnectionsMetadataConnections :  IEquatable<OnDemandPageMetadataConnectionsMetadataConnections>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPageMetadataConnectionsMetadataConnections" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OnDemandPageMetadataConnectionsMetadataConnections() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPageMetadataConnectionsMetadataConnections" /> class.
        /// </summary>
        /// <param name="comments">comments (required).</param>
        /// <param name="genres">genres (required).</param>
        /// <param name="likes">likes (required).</param>
        /// <param name="pictures">pictures (required).</param>
        /// <param name="seasons">seasons (required).</param>
        /// <param name="videos">videos (required).</param>
        public OnDemandPageMetadataConnectionsMetadataConnections(OnDemandPageMetadataConnectionsMetadataConnectionsComments comments = default(OnDemandPageMetadataConnectionsMetadataConnectionsComments), OnDemandPageMetadataConnectionsMetadataConnectionsGenres genres = default(OnDemandPageMetadataConnectionsMetadataConnectionsGenres), OnDemandPageMetadataConnectionsMetadataConnectionsLikes likes = default(OnDemandPageMetadataConnectionsMetadataConnectionsLikes), OnDemandPageMetadataConnectionsMetadataConnectionsPictures pictures = default(OnDemandPageMetadataConnectionsMetadataConnectionsPictures), OnDemandPageMetadataConnectionsMetadataConnectionsSeasons seasons = default(OnDemandPageMetadataConnectionsMetadataConnectionsSeasons), OnDemandPageMetadataConnectionsMetadataConnectionsVideos videos = default(OnDemandPageMetadataConnectionsMetadataConnectionsVideos))
        {
            // to ensure "comments" is required (not null)
            this.Comments = comments ?? throw new ArgumentNullException("comments is a required property for OnDemandPageMetadataConnectionsMetadataConnections and cannot be null");
            // to ensure "genres" is required (not null)
            this.Genres = genres ?? throw new ArgumentNullException("genres is a required property for OnDemandPageMetadataConnectionsMetadataConnections and cannot be null");
            // to ensure "likes" is required (not null)
            this.Likes = likes ?? throw new ArgumentNullException("likes is a required property for OnDemandPageMetadataConnectionsMetadataConnections and cannot be null");
            // to ensure "pictures" is required (not null)
            this.Pictures = pictures ?? throw new ArgumentNullException("pictures is a required property for OnDemandPageMetadataConnectionsMetadataConnections and cannot be null");
            // to ensure "seasons" is required (not null)
            this.Seasons = seasons ?? throw new ArgumentNullException("seasons is a required property for OnDemandPageMetadataConnectionsMetadataConnections and cannot be null");
            // to ensure "videos" is required (not null)
            this.Videos = videos ?? throw new ArgumentNullException("videos is a required property for OnDemandPageMetadataConnectionsMetadataConnections and cannot be null");
        }
        
        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public OnDemandPageMetadataConnectionsMetadataConnectionsComments Comments { get; set; }

        /// <summary>
        /// Gets or Sets Genres
        /// </summary>
        [DataMember(Name="genres", EmitDefaultValue=false)]
        public OnDemandPageMetadataConnectionsMetadataConnectionsGenres Genres { get; set; }

        /// <summary>
        /// Gets or Sets Likes
        /// </summary>
        [DataMember(Name="likes", EmitDefaultValue=false)]
        public OnDemandPageMetadataConnectionsMetadataConnectionsLikes Likes { get; set; }

        /// <summary>
        /// Gets or Sets Pictures
        /// </summary>
        [DataMember(Name="pictures", EmitDefaultValue=false)]
        public OnDemandPageMetadataConnectionsMetadataConnectionsPictures Pictures { get; set; }

        /// <summary>
        /// Gets or Sets Seasons
        /// </summary>
        [DataMember(Name="seasons", EmitDefaultValue=false)]
        public OnDemandPageMetadataConnectionsMetadataConnectionsSeasons Seasons { get; set; }

        /// <summary>
        /// Gets or Sets Videos
        /// </summary>
        [DataMember(Name="videos", EmitDefaultValue=false)]
        public OnDemandPageMetadataConnectionsMetadataConnectionsVideos Videos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnDemandPageMetadataConnectionsMetadataConnections {\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("  Seasons: ").Append(Seasons).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnDemandPageMetadataConnectionsMetadataConnections);
        }

        /// <summary>
        /// Returns true if OnDemandPageMetadataConnectionsMetadataConnections instances are equal
        /// </summary>
        /// <param name="input">Instance of OnDemandPageMetadataConnectionsMetadataConnections to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnDemandPageMetadataConnectionsMetadataConnections input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Genres == input.Genres ||
                    (this.Genres != null &&
                    this.Genres.Equals(input.Genres))
                ) && 
                (
                    this.Likes == input.Likes ||
                    (this.Likes != null &&
                    this.Likes.Equals(input.Likes))
                ) && 
                (
                    this.Pictures == input.Pictures ||
                    (this.Pictures != null &&
                    this.Pictures.Equals(input.Pictures))
                ) && 
                (
                    this.Seasons == input.Seasons ||
                    (this.Seasons != null &&
                    this.Seasons.Equals(input.Seasons))
                ) && 
                (
                    this.Videos == input.Videos ||
                    (this.Videos != null &&
                    this.Videos.Equals(input.Videos))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Genres != null)
                    hashCode = hashCode * 59 + this.Genres.GetHashCode();
                if (this.Likes != null)
                    hashCode = hashCode * 59 + this.Likes.GetHashCode();
                if (this.Pictures != null)
                    hashCode = hashCode * 59 + this.Pictures.GetHashCode();
                if (this.Seasons != null)
                    hashCode = hashCode * 59 + this.Seasons.GetHashCode();
                if (this.Videos != null)
                    hashCode = hashCode * 59 + this.Videos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
