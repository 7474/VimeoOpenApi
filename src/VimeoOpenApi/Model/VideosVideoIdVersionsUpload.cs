/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// VideosVideoIdVersionsUpload
    /// </summary>
    [DataContract]
    public partial class VideosVideoIdVersionsUpload :  IEquatable<VideosVideoIdVersionsUpload>, IValidatableObject
    {
        /// <summary>
        /// The approach by which to upload the version.  Option descriptions:  * &#x60;post&#x60; - Use the &#x60;post&#x60; method.  * &#x60;pull&#x60; - Use the &#x60;pull&#x60; method.  * &#x60;streaming&#x60; - Use the &#x60;streaming&#x60; method.  * &#x60;tus&#x60; - Use the &#x60;tus&#x60; method. 
        /// </summary>
        /// <value>The approach by which to upload the version.  Option descriptions:  * &#x60;post&#x60; - Use the &#x60;post&#x60; method.  * &#x60;pull&#x60; - Use the &#x60;pull&#x60; method.  * &#x60;streaming&#x60; - Use the &#x60;streaming&#x60; method.  * &#x60;tus&#x60; - Use the &#x60;tus&#x60; method. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApproachEnum
        {
            /// <summary>
            /// Enum Post for value: post
            /// </summary>
            [EnumMember(Value = "post")]
            Post = 1,

            /// <summary>
            /// Enum Pull for value: pull
            /// </summary>
            [EnumMember(Value = "pull")]
            Pull = 2,

            /// <summary>
            /// Enum Streaming for value: streaming
            /// </summary>
            [EnumMember(Value = "streaming")]
            Streaming = 3,

            /// <summary>
            /// Enum Tus for value: tus
            /// </summary>
            [EnumMember(Value = "tus")]
            Tus = 4

        }

        /// <summary>
        /// The approach by which to upload the version.  Option descriptions:  * &#x60;post&#x60; - Use the &#x60;post&#x60; method.  * &#x60;pull&#x60; - Use the &#x60;pull&#x60; method.  * &#x60;streaming&#x60; - Use the &#x60;streaming&#x60; method.  * &#x60;tus&#x60; - Use the &#x60;tus&#x60; method. 
        /// </summary>
        /// <value>The approach by which to upload the version.  Option descriptions:  * &#x60;post&#x60; - Use the &#x60;post&#x60; method.  * &#x60;pull&#x60; - Use the &#x60;pull&#x60; method.  * &#x60;streaming&#x60; - Use the &#x60;streaming&#x60; method.  * &#x60;tus&#x60; - Use the &#x60;tus&#x60; method. </value>
        [DataMember(Name="approach", EmitDefaultValue=false)]
        public ApproachEnum Approach { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VideosVideoIdVersionsUpload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VideosVideoIdVersionsUpload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VideosVideoIdVersionsUpload" /> class.
        /// </summary>
        /// <param name="approach">The approach by which to upload the version.  Option descriptions:  * &#x60;post&#x60; - Use the &#x60;post&#x60; method.  * &#x60;pull&#x60; - Use the &#x60;pull&#x60; method.  * &#x60;streaming&#x60; - Use the &#x60;streaming&#x60; method.  * &#x60;tus&#x60; - Use the &#x60;tus&#x60; method.  (required).</param>
        /// <param name="link">When **upload.approach** is &#x60;pull&#x60;, the public URL from which to download the version. This URL must be valid for at least 24 hours..</param>
        /// <param name="redirectUrl">When **upload.approach** is &#x60;post&#x60;, the app&#39;s redirect URL..</param>
        /// <param name="size">The upload size of the version..</param>
        public VideosVideoIdVersionsUpload(ApproachEnum approach = default(ApproachEnum), string link = default(string), string redirectUrl = default(string), string size = default(string))
        {
            this.Approach = approach;
            this.Link = link;
            this.RedirectUrl = redirectUrl;
            this.Size = size;
        }
        
        /// <summary>
        /// When **upload.approach** is &#x60;pull&#x60;, the public URL from which to download the version. This URL must be valid for at least 24 hours.
        /// </summary>
        /// <value>When **upload.approach** is &#x60;pull&#x60;, the public URL from which to download the version. This URL must be valid for at least 24 hours.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// When **upload.approach** is &#x60;post&#x60;, the app&#39;s redirect URL.
        /// </summary>
        /// <value>When **upload.approach** is &#x60;post&#x60;, the app&#39;s redirect URL.</value>
        [DataMember(Name="redirect_url", EmitDefaultValue=false)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// The upload size of the version.
        /// </summary>
        /// <value>The upload size of the version.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public string Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideosVideoIdVersionsUpload {\n");
            sb.Append("  Approach: ").Append(Approach).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideosVideoIdVersionsUpload);
        }

        /// <summary>
        /// Returns true if VideosVideoIdVersionsUpload instances are equal
        /// </summary>
        /// <param name="input">Instance of VideosVideoIdVersionsUpload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideosVideoIdVersionsUpload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Approach == input.Approach ||
                    this.Approach.Equals(input.Approach)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.RedirectUrl == input.RedirectUrl ||
                    (this.RedirectUrl != null &&
                    this.RedirectUrl.Equals(input.RedirectUrl))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Approach.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.RedirectUrl != null)
                    hashCode = hashCode * 59 + this.RedirectUrl.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
