/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Category
    /// </summary>
    [DataContract]
    public partial class Category :  IEquatable<Category>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Category() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        /// <param name="icon">The active icon for the category..</param>
        /// <param name="lastVideoFeaturedTime">The most recent time in ISO 8601 format when the video was featured. (required).</param>
        /// <param name="link">The URL to access the category in a browser. (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="name">The display name that identifies the category. (required).</param>
        /// <param name="parent">parent (required).</param>
        /// <param name="pictures">The active picture for this category. The default shows vertical color bars. (required).</param>
        /// <param name="resourceKey">The resource key of the category. (required).</param>
        /// <param name="subcategories">All the subcategories that belong to the category, if the current category is a top-level parent..</param>
        /// <param name="topLevel">Whether the category isn&#39;t a subcategory of another category. (required).</param>
        /// <param name="uri">The unique identifier to access the category resource. (required).</param>
        public Category(Picture icon = default(Picture), string lastVideoFeaturedTime = default(string), string link = default(string), CategoryMetadata metadata = default(CategoryMetadata), string name = default(string), CategoryParent parent = default(CategoryParent), Picture pictures = default(Picture), string resourceKey = default(string), List<CategorySubcategories> subcategories = default(List<CategorySubcategories>), bool topLevel = default(bool), string uri = default(string))
        {
            // to ensure "lastVideoFeaturedTime" is required (not null)
            this.LastVideoFeaturedTime = lastVideoFeaturedTime ?? throw new ArgumentNullException("lastVideoFeaturedTime is a required property for Category and cannot be null");
            // to ensure "link" is required (not null)
            this.Link = link ?? throw new ArgumentNullException("link is a required property for Category and cannot be null");
            // to ensure "metadata" is required (not null)
            this.Metadata = metadata ?? throw new ArgumentNullException("metadata is a required property for Category and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Category and cannot be null");
            // to ensure "parent" is required (not null)
            this.Parent = parent ?? throw new ArgumentNullException("parent is a required property for Category and cannot be null");
            // to ensure "pictures" is required (not null)
            this.Pictures = pictures ?? throw new ArgumentNullException("pictures is a required property for Category and cannot be null");
            // to ensure "resourceKey" is required (not null)
            this.ResourceKey = resourceKey ?? throw new ArgumentNullException("resourceKey is a required property for Category and cannot be null");
            this.TopLevel = topLevel;
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for Category and cannot be null");
            this.Icon = icon;
            this.Subcategories = subcategories;
        }
        
        /// <summary>
        /// The active icon for the category.
        /// </summary>
        /// <value>The active icon for the category.</value>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public Picture Icon { get; set; }

        /// <summary>
        /// The most recent time in ISO 8601 format when the video was featured.
        /// </summary>
        /// <value>The most recent time in ISO 8601 format when the video was featured.</value>
        [DataMember(Name="last_video_featured_time", EmitDefaultValue=false)]
        public string LastVideoFeaturedTime { get; set; }

        /// <summary>
        /// The URL to access the category in a browser.
        /// </summary>
        /// <value>The URL to access the category in a browser.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public CategoryMetadata Metadata { get; set; }

        /// <summary>
        /// The display name that identifies the category.
        /// </summary>
        /// <value>The display name that identifies the category.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="parent", EmitDefaultValue=true)]
        public CategoryParent Parent { get; set; }

        /// <summary>
        /// The active picture for this category. The default shows vertical color bars.
        /// </summary>
        /// <value>The active picture for this category. The default shows vertical color bars.</value>
        [DataMember(Name="pictures", EmitDefaultValue=false)]
        public Picture Pictures { get; set; }

        /// <summary>
        /// The resource key of the category.
        /// </summary>
        /// <value>The resource key of the category.</value>
        [DataMember(Name="resource_key", EmitDefaultValue=false)]
        public string ResourceKey { get; set; }

        /// <summary>
        /// All the subcategories that belong to the category, if the current category is a top-level parent.
        /// </summary>
        /// <value>All the subcategories that belong to the category, if the current category is a top-level parent.</value>
        [DataMember(Name="subcategories", EmitDefaultValue=false)]
        public List<CategorySubcategories> Subcategories { get; set; }

        /// <summary>
        /// Whether the category isn&#39;t a subcategory of another category.
        /// </summary>
        /// <value>Whether the category isn&#39;t a subcategory of another category.</value>
        [DataMember(Name="top_level", EmitDefaultValue=false)]
        public bool TopLevel { get; set; }

        /// <summary>
        /// The unique identifier to access the category resource.
        /// </summary>
        /// <value>The unique identifier to access the category resource.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  LastVideoFeaturedTime: ").Append(LastVideoFeaturedTime).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("  ResourceKey: ").Append(ResourceKey).Append("\n");
            sb.Append("  Subcategories: ").Append(Subcategories).Append("\n");
            sb.Append("  TopLevel: ").Append(TopLevel).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Category);
        }

        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="input">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.LastVideoFeaturedTime == input.LastVideoFeaturedTime ||
                    (this.LastVideoFeaturedTime != null &&
                    this.LastVideoFeaturedTime.Equals(input.LastVideoFeaturedTime))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Pictures == input.Pictures ||
                    (this.Pictures != null &&
                    this.Pictures.Equals(input.Pictures))
                ) && 
                (
                    this.ResourceKey == input.ResourceKey ||
                    (this.ResourceKey != null &&
                    this.ResourceKey.Equals(input.ResourceKey))
                ) && 
                (
                    this.Subcategories == input.Subcategories ||
                    this.Subcategories != null &&
                    input.Subcategories != null &&
                    this.Subcategories.SequenceEqual(input.Subcategories)
                ) && 
                (
                    this.TopLevel == input.TopLevel ||
                    this.TopLevel.Equals(input.TopLevel)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.LastVideoFeaturedTime != null)
                    hashCode = hashCode * 59 + this.LastVideoFeaturedTime.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Parent != null)
                    hashCode = hashCode * 59 + this.Parent.GetHashCode();
                if (this.Pictures != null)
                    hashCode = hashCode * 59 + this.Pictures.GetHashCode();
                if (this.ResourceKey != null)
                    hashCode = hashCode * 59 + this.ResourceKey.GetHashCode();
                if (this.Subcategories != null)
                    hashCode = hashCode * 59 + this.Subcategories.GetHashCode();
                hashCode = hashCode * 59 + this.TopLevel.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
