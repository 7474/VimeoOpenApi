/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Portfolio
    /// </summary>
    [DataContract]
    public partial class Portfolio :  IEquatable<Portfolio>, IValidatableObject
    {
        /// <summary>
        /// The default video sort order for the portfolio:  Option descriptions:  * &#x60;alphabetical&#x60; - The default sort order is alphabetical by name.  * &#x60;clips&#x60; - The default sort order is video creation date.  * &#x60;modified&#x60; - The default sort order is the order in which the videos were modified.  * &#x60;recent&#x60; - The default sort order is the order in which the videos were added. 
        /// </summary>
        /// <value>The default video sort order for the portfolio:  Option descriptions:  * &#x60;alphabetical&#x60; - The default sort order is alphabetical by name.  * &#x60;clips&#x60; - The default sort order is video creation date.  * &#x60;modified&#x60; - The default sort order is the order in which the videos were modified.  * &#x60;recent&#x60; - The default sort order is the order in which the videos were added. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortEnum
        {
            /// <summary>
            /// Enum Alphabetical for value: alphabetical
            /// </summary>
            [EnumMember(Value = "alphabetical")]
            Alphabetical = 1,

            /// <summary>
            /// Enum Clips for value: clips
            /// </summary>
            [EnumMember(Value = "clips")]
            Clips = 2,

            /// <summary>
            /// Enum Modified for value: modified
            /// </summary>
            [EnumMember(Value = "modified")]
            Modified = 3,

            /// <summary>
            /// Enum Recent for value: recent
            /// </summary>
            [EnumMember(Value = "recent")]
            Recent = 4

        }

        /// <summary>
        /// The default video sort order for the portfolio:  Option descriptions:  * &#x60;alphabetical&#x60; - The default sort order is alphabetical by name.  * &#x60;clips&#x60; - The default sort order is video creation date.  * &#x60;modified&#x60; - The default sort order is the order in which the videos were modified.  * &#x60;recent&#x60; - The default sort order is the order in which the videos were added. 
        /// </summary>
        /// <value>The default video sort order for the portfolio:  Option descriptions:  * &#x60;alphabetical&#x60; - The default sort order is alphabetical by name.  * &#x60;clips&#x60; - The default sort order is video creation date.  * &#x60;modified&#x60; - The default sort order is the order in which the videos were modified.  * &#x60;recent&#x60; - The default sort order is the order in which the videos were added. </value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public SortEnum Sort { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Portfolio" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Portfolio() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Portfolio" /> class.
        /// </summary>
        /// <param name="createdTime">The time in ISO 8601 format when the portfolio was created. (required).</param>
        /// <param name="description">The portfolio&#39;s description. (required).</param>
        /// <param name="link">The link to the portfolio. (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="modifiedTime">The time in ISO 8601 format when the portfolio&#39;s data was last modified. (required).</param>
        /// <param name="name">The display name of the portfolio. (required).</param>
        /// <param name="sort">The default video sort order for the portfolio:  Option descriptions:  * &#x60;alphabetical&#x60; - The default sort order is alphabetical by name.  * &#x60;clips&#x60; - The default sort order is video creation date.  * &#x60;modified&#x60; - The default sort order is the order in which the videos were modified.  * &#x60;recent&#x60; - The default sort order is the order in which the videos were added.  (required).</param>
        /// <param name="uri">The canonical relative URI of the portfolio. (required).</param>
        public Portfolio(string createdTime = default(string), string description = default(string), string link = default(string), PortfolioMetadata metadata = default(PortfolioMetadata), string modifiedTime = default(string), string name = default(string), SortEnum sort = default(SortEnum), string uri = default(string))
        {
            // to ensure "createdTime" is required (not null)
            this.CreatedTime = createdTime ?? throw new ArgumentNullException("createdTime is a required property for Portfolio and cannot be null");
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for Portfolio and cannot be null");
            // to ensure "link" is required (not null)
            this.Link = link ?? throw new ArgumentNullException("link is a required property for Portfolio and cannot be null");
            // to ensure "metadata" is required (not null)
            this.Metadata = metadata ?? throw new ArgumentNullException("metadata is a required property for Portfolio and cannot be null");
            // to ensure "modifiedTime" is required (not null)
            this.ModifiedTime = modifiedTime ?? throw new ArgumentNullException("modifiedTime is a required property for Portfolio and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Portfolio and cannot be null");
            this.Sort = sort;
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for Portfolio and cannot be null");
        }
        
        /// <summary>
        /// The time in ISO 8601 format when the portfolio was created.
        /// </summary>
        /// <value>The time in ISO 8601 format when the portfolio was created.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public string CreatedTime { get; set; }

        /// <summary>
        /// The portfolio&#39;s description.
        /// </summary>
        /// <value>The portfolio&#39;s description.</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// The link to the portfolio.
        /// </summary>
        /// <value>The link to the portfolio.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public PortfolioMetadata Metadata { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the portfolio&#39;s data was last modified.
        /// </summary>
        /// <value>The time in ISO 8601 format when the portfolio&#39;s data was last modified.</value>
        [DataMember(Name="modified_time", EmitDefaultValue=false)]
        public string ModifiedTime { get; set; }

        /// <summary>
        /// The display name of the portfolio.
        /// </summary>
        /// <value>The display name of the portfolio.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The canonical relative URI of the portfolio.
        /// </summary>
        /// <value>The canonical relative URI of the portfolio.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Portfolio {\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Portfolio);
        }

        /// <summary>
        /// Returns true if Portfolio instances are equal
        /// </summary>
        /// <param name="input">Instance of Portfolio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Portfolio input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort.Equals(input.Sort)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
