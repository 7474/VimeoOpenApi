/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// TextTrack
    /// </summary>
    [DataContract]
    public partial class TextTrack :  IEquatable<TextTrack>, IValidatableObject
    {
        /// <summary>
        /// The type of the text track:  Option descriptions:  * &#x60;captions&#x60; - The text track is for captions.  * &#x60;subtitles&#x60; - The text track is for subtitles. 
        /// </summary>
        /// <value>The type of the text track:  Option descriptions:  * &#x60;captions&#x60; - The text track is for captions.  * &#x60;subtitles&#x60; - The text track is for subtitles. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Captions for value: captions
            /// </summary>
            [EnumMember(Value = "captions")]
            Captions = 1,

            /// <summary>
            /// Enum Subtitles for value: subtitles
            /// </summary>
            [EnumMember(Value = "subtitles")]
            Subtitles = 2

        }

        /// <summary>
        /// The type of the text track:  Option descriptions:  * &#x60;captions&#x60; - The text track is for captions.  * &#x60;subtitles&#x60; - The text track is for subtitles. 
        /// </summary>
        /// <value>The type of the text track:  Option descriptions:  * &#x60;captions&#x60; - The text track is for captions.  * &#x60;subtitles&#x60; - The text track is for subtitles. </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextTrack" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextTrack() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextTrack" /> class.
        /// </summary>
        /// <param name="active">Whether this text track is active. (required).</param>
        /// <param name="hlsLink">The read-only URL of the text track file, intended for use with HLS playback. (required).</param>
        /// <param name="hlsLinkExpiresTime">The time in ISO 8601 format when the read-only HLS playback text track file expires. (required).</param>
        /// <param name="language">The language code for this text track. To see a full list, request &#x60;/languages?filter&#x3D;texttrack&#x60;. (required).</param>
        /// <param name="link">The read-only URL of the text track file. You can upload to this link when you create it for the first time. (required).</param>
        /// <param name="linkExpiresTime">The time in ISO 8601 format when the text track link expires. (required).</param>
        /// <param name="name">The descriptive name of this text track. (required).</param>
        /// <param name="type">The type of the text track:  Option descriptions:  * &#x60;captions&#x60; - The text track is for captions.  * &#x60;subtitles&#x60; - The text track is for subtitles.  (required).</param>
        /// <param name="uri">The relative URI of the text track. (required).</param>
        public TextTrack(bool active = default(bool), string hlsLink = default(string), string hlsLinkExpiresTime = default(string), string language = default(string), string link = default(string), string linkExpiresTime = default(string), string name = default(string), TypeEnum type = default(TypeEnum), string uri = default(string))
        {
            this.Active = active;
            // to ensure "hlsLink" is required (not null)
            this.HlsLink = hlsLink ?? throw new ArgumentNullException("hlsLink is a required property for TextTrack and cannot be null");
            // to ensure "hlsLinkExpiresTime" is required (not null)
            this.HlsLinkExpiresTime = hlsLinkExpiresTime ?? throw new ArgumentNullException("hlsLinkExpiresTime is a required property for TextTrack and cannot be null");
            // to ensure "language" is required (not null)
            this.Language = language ?? throw new ArgumentNullException("language is a required property for TextTrack and cannot be null");
            // to ensure "link" is required (not null)
            this.Link = link ?? throw new ArgumentNullException("link is a required property for TextTrack and cannot be null");
            // to ensure "linkExpiresTime" is required (not null)
            this.LinkExpiresTime = linkExpiresTime ?? throw new ArgumentNullException("linkExpiresTime is a required property for TextTrack and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for TextTrack and cannot be null");
            this.Type = type;
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for TextTrack and cannot be null");
        }
        
        /// <summary>
        /// Whether this text track is active.
        /// </summary>
        /// <value>Whether this text track is active.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// The read-only URL of the text track file, intended for use with HLS playback.
        /// </summary>
        /// <value>The read-only URL of the text track file, intended for use with HLS playback.</value>
        [DataMember(Name="hls_link", EmitDefaultValue=false)]
        public string HlsLink { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the read-only HLS playback text track file expires.
        /// </summary>
        /// <value>The time in ISO 8601 format when the read-only HLS playback text track file expires.</value>
        [DataMember(Name="hls_link_expires_time", EmitDefaultValue=false)]
        public string HlsLinkExpiresTime { get; set; }

        /// <summary>
        /// The language code for this text track. To see a full list, request &#x60;/languages?filter&#x3D;texttrack&#x60;.
        /// </summary>
        /// <value>The language code for this text track. To see a full list, request &#x60;/languages?filter&#x3D;texttrack&#x60;.</value>
        [DataMember(Name="language", EmitDefaultValue=true)]
        public string Language { get; set; }

        /// <summary>
        /// The read-only URL of the text track file. You can upload to this link when you create it for the first time.
        /// </summary>
        /// <value>The read-only URL of the text track file. You can upload to this link when you create it for the first time.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the text track link expires.
        /// </summary>
        /// <value>The time in ISO 8601 format when the text track link expires.</value>
        [DataMember(Name="link_expires_time", EmitDefaultValue=false)]
        public string LinkExpiresTime { get; set; }

        /// <summary>
        /// The descriptive name of this text track.
        /// </summary>
        /// <value>The descriptive name of this text track.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// The relative URI of the text track.
        /// </summary>
        /// <value>The relative URI of the text track.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextTrack {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  HlsLink: ").Append(HlsLink).Append("\n");
            sb.Append("  HlsLinkExpiresTime: ").Append(HlsLinkExpiresTime).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  LinkExpiresTime: ").Append(LinkExpiresTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextTrack);
        }

        /// <summary>
        /// Returns true if TextTrack instances are equal
        /// </summary>
        /// <param name="input">Instance of TextTrack to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextTrack input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.HlsLink == input.HlsLink ||
                    (this.HlsLink != null &&
                    this.HlsLink.Equals(input.HlsLink))
                ) && 
                (
                    this.HlsLinkExpiresTime == input.HlsLinkExpiresTime ||
                    (this.HlsLinkExpiresTime != null &&
                    this.HlsLinkExpiresTime.Equals(input.HlsLinkExpiresTime))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.LinkExpiresTime == input.LinkExpiresTime ||
                    (this.LinkExpiresTime != null &&
                    this.LinkExpiresTime.Equals(input.LinkExpiresTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.HlsLink != null)
                    hashCode = hashCode * 59 + this.HlsLink.GetHashCode();
                if (this.HlsLinkExpiresTime != null)
                    hashCode = hashCode * 59 + this.HlsLinkExpiresTime.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.LinkExpiresTime != null)
                    hashCode = hashCode * 59 + this.LinkExpiresTime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
