/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Subscription information for an On Demand video.
    /// </summary>
    [DataContract]
    public partial class VideoMetadataInteractionsSubscribe :  IEquatable<VideoMetadataInteractionsSubscribe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoMetadataInteractionsSubscribe" /> class.
        /// </summary>
        /// <param name="drm">Whether the video has DRM..</param>
        /// <param name="expiresTime">The time in ISO 8601 format when the subscription expires..</param>
        /// <param name="purchaseTime">The tine in ISO 8601 format when the subscription was purchased..</param>
        /// <param name="stream">The stream type..</param>
        public VideoMetadataInteractionsSubscribe(bool drm = default(bool), string expiresTime = default(string), string purchaseTime = default(string), string stream = default(string))
        {
            this.Drm = drm;
            this.ExpiresTime = expiresTime;
            this.PurchaseTime = purchaseTime;
            this.Stream = stream;
        }
        
        /// <summary>
        /// Whether the video has DRM.
        /// </summary>
        /// <value>Whether the video has DRM.</value>
        [DataMember(Name="drm", EmitDefaultValue=false)]
        public bool Drm { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the subscription expires.
        /// </summary>
        /// <value>The time in ISO 8601 format when the subscription expires.</value>
        [DataMember(Name="expires_time", EmitDefaultValue=false)]
        public string ExpiresTime { get; set; }

        /// <summary>
        /// The tine in ISO 8601 format when the subscription was purchased.
        /// </summary>
        /// <value>The tine in ISO 8601 format when the subscription was purchased.</value>
        [DataMember(Name="purchase_time", EmitDefaultValue=false)]
        public string PurchaseTime { get; set; }

        /// <summary>
        /// The stream type.
        /// </summary>
        /// <value>The stream type.</value>
        [DataMember(Name="stream", EmitDefaultValue=false)]
        public string Stream { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideoMetadataInteractionsSubscribe {\n");
            sb.Append("  Drm: ").Append(Drm).Append("\n");
            sb.Append("  ExpiresTime: ").Append(ExpiresTime).Append("\n");
            sb.Append("  PurchaseTime: ").Append(PurchaseTime).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoMetadataInteractionsSubscribe);
        }

        /// <summary>
        /// Returns true if VideoMetadataInteractionsSubscribe instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoMetadataInteractionsSubscribe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoMetadataInteractionsSubscribe input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Drm == input.Drm ||
                    this.Drm.Equals(input.Drm)
                ) && 
                (
                    this.ExpiresTime == input.ExpiresTime ||
                    (this.ExpiresTime != null &&
                    this.ExpiresTime.Equals(input.ExpiresTime))
                ) && 
                (
                    this.PurchaseTime == input.PurchaseTime ||
                    (this.PurchaseTime != null &&
                    this.PurchaseTime.Equals(input.PurchaseTime))
                ) && 
                (
                    this.Stream == input.Stream ||
                    (this.Stream != null &&
                    this.Stream.Equals(input.Stream))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Drm.GetHashCode();
                if (this.ExpiresTime != null)
                    hashCode = hashCode * 59 + this.ExpiresTime.GetHashCode();
                if (this.PurchaseTime != null)
                    hashCode = hashCode * 59 + this.PurchaseTime.GetHashCode();
                if (this.Stream != null)
                    hashCode = hashCode * 59 + this.Stream.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
