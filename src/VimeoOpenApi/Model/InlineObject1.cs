/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// InlineObject1
    /// </summary>
    [DataContract]
    public partial class InlineObject1 :  IEquatable<InlineObject1>, IValidatableObject
    {
        /// <summary>
        /// The privacy level of the channel.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the channel.  * &#x60;moderators&#x60; - Only moderators can access the channel.  * &#x60;users&#x60; - Only moderators and designated users can access the channel. 
        /// </summary>
        /// <value>The privacy level of the channel.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the channel.  * &#x60;moderators&#x60; - Only moderators can access the channel.  * &#x60;users&#x60; - Only moderators and designated users can access the channel. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PrivacyEnum
        {
            /// <summary>
            /// Enum Anybody for value: anybody
            /// </summary>
            [EnumMember(Value = "anybody")]
            Anybody = 1,

            /// <summary>
            /// Enum Moderators for value: moderators
            /// </summary>
            [EnumMember(Value = "moderators")]
            Moderators = 2,

            /// <summary>
            /// Enum Users for value: users
            /// </summary>
            [EnumMember(Value = "users")]
            Users = 3

        }

        /// <summary>
        /// The privacy level of the channel.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the channel.  * &#x60;moderators&#x60; - Only moderators can access the channel.  * &#x60;users&#x60; - Only moderators and designated users can access the channel. 
        /// </summary>
        /// <value>The privacy level of the channel.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the channel.  * &#x60;moderators&#x60; - Only moderators can access the channel.  * &#x60;users&#x60; - Only moderators and designated users can access the channel. </value>
        [DataMember(Name="privacy", EmitDefaultValue=false)]
        public PrivacyEnum? Privacy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject1" /> class.
        /// </summary>
        /// <param name="description">The description of the channel..</param>
        /// <param name="link">The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in &#x60;/channels/{url_custom}&#x60;. Submitting &#x60;\&quot;\&quot;&#x60; for this field removes the link alias..</param>
        /// <param name="name">The name of the channel..</param>
        /// <param name="privacy">The privacy level of the channel.  Option descriptions:  * &#x60;anybody&#x60; - Anyone can access the channel.  * &#x60;moderators&#x60; - Only moderators can access the channel.  * &#x60;users&#x60; - Only moderators and designated users can access the channel. .</param>
        public InlineObject1(string description = default(string), string link = default(string), string name = default(string), PrivacyEnum? privacy = default(PrivacyEnum?))
        {
            this.Description = description;
            this.Link = link;
            this.Name = name;
            this.Privacy = privacy;
        }
        
        /// <summary>
        /// The description of the channel.
        /// </summary>
        /// <value>The description of the channel.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in &#x60;/channels/{url_custom}&#x60;. Submitting &#x60;\&quot;\&quot;&#x60; for this field removes the link alias.
        /// </summary>
        /// <value>The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in &#x60;/channels/{url_custom}&#x60;. Submitting &#x60;\&quot;\&quot;&#x60; for this field removes the link alias.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// The name of the channel.
        /// </summary>
        /// <value>The name of the channel.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject1 {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject1);
        }

        /// <summary>
        /// Returns true if InlineObject1 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Privacy == input.Privacy ||
                    this.Privacy.Equals(input.Privacy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Privacy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
