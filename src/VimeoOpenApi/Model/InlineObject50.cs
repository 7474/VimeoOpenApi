/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// InlineObject50
    /// </summary>
    [DataContract]
    public partial class InlineObject50 :  IEquatable<InlineObject50>, IValidatableObject
    {
        /// <summary>
        /// The Creative Commons license under which the video is offered.  Option descriptions:  * &#x60;by&#x60; - The video is offered under CC BY, or the attibution-only license.  * &#x60;by-nc&#x60; - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * &#x60;by-nc-nd&#x60; - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * &#x60;by-nc-sa&#x60; - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * &#x60;by-nd&#x60; - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * &#x60;by-sa&#x60; - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * &#x60;cc0&#x60; - The video is offered under CC0, or the public domain license. 
        /// </summary>
        /// <value>The Creative Commons license under which the video is offered.  Option descriptions:  * &#x60;by&#x60; - The video is offered under CC BY, or the attibution-only license.  * &#x60;by-nc&#x60; - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * &#x60;by-nc-nd&#x60; - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * &#x60;by-nc-sa&#x60; - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * &#x60;by-nd&#x60; - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * &#x60;by-sa&#x60; - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * &#x60;cc0&#x60; - The video is offered under CC0, or the public domain license. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LicenseEnum
        {
            /// <summary>
            /// Enum By for value: by
            /// </summary>
            [EnumMember(Value = "by")]
            By = 1,

            /// <summary>
            /// Enum ByNc for value: by-nc
            /// </summary>
            [EnumMember(Value = "by-nc")]
            ByNc = 2,

            /// <summary>
            /// Enum ByNcNd for value: by-nc-nd
            /// </summary>
            [EnumMember(Value = "by-nc-nd")]
            ByNcNd = 3,

            /// <summary>
            /// Enum ByNcSa for value: by-nc-sa
            /// </summary>
            [EnumMember(Value = "by-nc-sa")]
            ByNcSa = 4,

            /// <summary>
            /// Enum ByNd for value: by-nd
            /// </summary>
            [EnumMember(Value = "by-nd")]
            ByNd = 5,

            /// <summary>
            /// Enum BySa for value: by-sa
            /// </summary>
            [EnumMember(Value = "by-sa")]
            BySa = 6,

            /// <summary>
            /// Enum Cc0 for value: cc0
            /// </summary>
            [EnumMember(Value = "cc0")]
            Cc0 = 7

        }

        /// <summary>
        /// The Creative Commons license under which the video is offered.  Option descriptions:  * &#x60;by&#x60; - The video is offered under CC BY, or the attibution-only license.  * &#x60;by-nc&#x60; - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * &#x60;by-nc-nd&#x60; - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * &#x60;by-nc-sa&#x60; - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * &#x60;by-nd&#x60; - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * &#x60;by-sa&#x60; - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * &#x60;cc0&#x60; - The video is offered under CC0, or the public domain license. 
        /// </summary>
        /// <value>The Creative Commons license under which the video is offered.  Option descriptions:  * &#x60;by&#x60; - The video is offered under CC BY, or the attibution-only license.  * &#x60;by-nc&#x60; - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * &#x60;by-nc-nd&#x60; - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * &#x60;by-nc-sa&#x60; - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * &#x60;by-nd&#x60; - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * &#x60;by-sa&#x60; - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * &#x60;cc0&#x60; - The video is offered under CC0, or the public domain license. </value>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public LicenseEnum? License { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject50" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject50() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject50" /> class.
        /// </summary>
        /// <param name="contentRating">A list of values describing the content in this video. Find the full list in the [&#x60;/contentratings&#x60;](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint..</param>
        /// <param name="description">The description of the video..</param>
        /// <param name="embed">embed.</param>
        /// <param name="license">The Creative Commons license under which the video is offered.  Option descriptions:  * &#x60;by&#x60; - The video is offered under CC BY, or the attibution-only license.  * &#x60;by-nc&#x60; - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.  * &#x60;by-nc-nd&#x60; - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.  * &#x60;by-nc-sa&#x60; - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.  * &#x60;by-nd&#x60; - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.  * &#x60;by-sa&#x60; - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.  * &#x60;cc0&#x60; - The video is offered under CC0, or the public domain license. .</param>
        /// <param name="locale">The video&#39;s default language. For a full list of supported languages, use the [&#x60;/languages?filter&#x3D;texttracks&#x60;](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint..</param>
        /// <param name="name">The title of the video..</param>
        /// <param name="password">The password. This field is required when **privacy.view** is &#x60;password&#x60;..</param>
        /// <param name="privacy">privacy.</param>
        /// <param name="reviewPage">reviewPage.</param>
        /// <param name="spatial">spatial.</param>
        /// <param name="upload">upload (required).</param>
        public InlineObject50(List<string> contentRating = default(List<string>), string description = default(string), MeVideosEmbed embed = default(MeVideosEmbed), LicenseEnum? license = default(LicenseEnum?), string locale = default(string), string name = default(string), string password = default(string), MeVideosPrivacy1 privacy = default(MeVideosPrivacy1), MeVideosReviewPage reviewPage = default(MeVideosReviewPage), MeVideosSpatial spatial = default(MeVideosSpatial), MeVideosUpload upload = default(MeVideosUpload))
        {
            // to ensure "upload" is required (not null)
            this.Upload = upload ?? throw new ArgumentNullException("upload is a required property for InlineObject50 and cannot be null");
            this.ContentRating = contentRating;
            this.Description = description;
            this.Embed = embed;
            this.License = license;
            this.Locale = locale;
            this.Name = name;
            this.Password = password;
            this.Privacy = privacy;
            this.ReviewPage = reviewPage;
            this.Spatial = spatial;
        }
        
        /// <summary>
        /// A list of values describing the content in this video. Find the full list in the [&#x60;/contentratings&#x60;](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.
        /// </summary>
        /// <value>A list of values describing the content in this video. Find the full list in the [&#x60;/contentratings&#x60;](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.</value>
        [DataMember(Name="content_rating", EmitDefaultValue=false)]
        public List<string> ContentRating { get; set; }

        /// <summary>
        /// The description of the video.
        /// </summary>
        /// <value>The description of the video.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Embed
        /// </summary>
        [DataMember(Name="embed", EmitDefaultValue=false)]
        public MeVideosEmbed Embed { get; set; }

        /// <summary>
        /// The video&#39;s default language. For a full list of supported languages, use the [&#x60;/languages?filter&#x3D;texttracks&#x60;](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.
        /// </summary>
        /// <value>The video&#39;s default language. For a full list of supported languages, use the [&#x60;/languages?filter&#x3D;texttracks&#x60;](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.</value>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// The title of the video.
        /// </summary>
        /// <value>The title of the video.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The password. This field is required when **privacy.view** is &#x60;password&#x60;.
        /// </summary>
        /// <value>The password. This field is required when **privacy.view** is &#x60;password&#x60;.</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Privacy
        /// </summary>
        [DataMember(Name="privacy", EmitDefaultValue=false)]
        public MeVideosPrivacy1 Privacy { get; set; }

        /// <summary>
        /// Gets or Sets ReviewPage
        /// </summary>
        [DataMember(Name="review_page", EmitDefaultValue=false)]
        public MeVideosReviewPage ReviewPage { get; set; }

        /// <summary>
        /// Gets or Sets Spatial
        /// </summary>
        [DataMember(Name="spatial", EmitDefaultValue=false)]
        public MeVideosSpatial Spatial { get; set; }

        /// <summary>
        /// Gets or Sets Upload
        /// </summary>
        [DataMember(Name="upload", EmitDefaultValue=false)]
        public MeVideosUpload Upload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject50 {\n");
            sb.Append("  ContentRating: ").Append(ContentRating).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Embed: ").Append(Embed).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("  ReviewPage: ").Append(ReviewPage).Append("\n");
            sb.Append("  Spatial: ").Append(Spatial).Append("\n");
            sb.Append("  Upload: ").Append(Upload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject50);
        }

        /// <summary>
        /// Returns true if InlineObject50 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject50 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject50 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContentRating == input.ContentRating ||
                    this.ContentRating != null &&
                    input.ContentRating != null &&
                    this.ContentRating.SequenceEqual(input.ContentRating)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Embed == input.Embed ||
                    (this.Embed != null &&
                    this.Embed.Equals(input.Embed))
                ) && 
                (
                    this.License == input.License ||
                    this.License.Equals(input.License)
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Privacy == input.Privacy ||
                    (this.Privacy != null &&
                    this.Privacy.Equals(input.Privacy))
                ) && 
                (
                    this.ReviewPage == input.ReviewPage ||
                    (this.ReviewPage != null &&
                    this.ReviewPage.Equals(input.ReviewPage))
                ) && 
                (
                    this.Spatial == input.Spatial ||
                    (this.Spatial != null &&
                    this.Spatial.Equals(input.Spatial))
                ) && 
                (
                    this.Upload == input.Upload ||
                    (this.Upload != null &&
                    this.Upload.Equals(input.Upload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentRating != null)
                    hashCode = hashCode * 59 + this.ContentRating.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Embed != null)
                    hashCode = hashCode * 59 + this.Embed.GetHashCode();
                hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Privacy != null)
                    hashCode = hashCode * 59 + this.Privacy.GetHashCode();
                if (this.ReviewPage != null)
                    hashCode = hashCode * 59 + this.ReviewPage.GetHashCode();
                if (this.Spatial != null)
                    hashCode = hashCode * 59 + this.Spatial.GetHashCode();
                if (this.Upload != null)
                    hashCode = hashCode * 59 + this.Upload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
