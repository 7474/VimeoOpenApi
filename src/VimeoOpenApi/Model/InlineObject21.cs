/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// InlineObject21
    /// </summary>
    [DataContract]
    public partial class InlineObject21 :  IEquatable<InlineObject21>, IValidatableObject
    {
        /// <summary>
        /// An array of accepted currencies.  Option descriptions:  * &#x60;AUD&#x60; - Australian Dollar  * &#x60;CAD&#x60; - Canadian Dollar  * &#x60;CHF&#x60; - Swiss Franc  * &#x60;DKK&#x60; - Danish Krone  * &#x60;EUR&#x60; - Euro  * &#x60;GBP&#x60; - British Pound  * &#x60;JPY&#x60; - Japanese Yen  * &#x60;KRW&#x60; - South Korean Won  * &#x60;NOK&#x60; - Norwegian Krone  * &#x60;PLN&#x60; - Polish Zloty  * &#x60;SEK&#x60; - Swedish Krona  * &#x60;USD&#x60; - US Dollar 
        /// </summary>
        /// <value>An array of accepted currencies.  Option descriptions:  * &#x60;AUD&#x60; - Australian Dollar  * &#x60;CAD&#x60; - Canadian Dollar  * &#x60;CHF&#x60; - Swiss Franc  * &#x60;DKK&#x60; - Danish Krone  * &#x60;EUR&#x60; - Euro  * &#x60;GBP&#x60; - British Pound  * &#x60;JPY&#x60; - Japanese Yen  * &#x60;KRW&#x60; - South Korean Won  * &#x60;NOK&#x60; - Norwegian Krone  * &#x60;PLN&#x60; - Polish Zloty  * &#x60;SEK&#x60; - Swedish Krona  * &#x60;USD&#x60; - US Dollar </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AcceptedCurrenciesEnum
        {
            /// <summary>
            /// Enum AUD for value: AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD = 1,

            /// <summary>
            /// Enum CAD for value: CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CAD = 2,

            /// <summary>
            /// Enum CHF for value: CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHF = 3,

            /// <summary>
            /// Enum DKK for value: DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKK = 4,

            /// <summary>
            /// Enum EUR for value: EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUR = 5,

            /// <summary>
            /// Enum GBP for value: GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBP = 6,

            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 7,

            /// <summary>
            /// Enum KRW for value: KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRW = 8,

            /// <summary>
            /// Enum NOK for value: NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOK = 9,

            /// <summary>
            /// Enum PLN for value: PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLN = 10,

            /// <summary>
            /// Enum SEK for value: SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEK = 11,

            /// <summary>
            /// Enum USD for value: USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USD = 12

        }

        /// <summary>
        /// An array of accepted currencies.  Option descriptions:  * &#x60;AUD&#x60; - Australian Dollar  * &#x60;CAD&#x60; - Canadian Dollar  * &#x60;CHF&#x60; - Swiss Franc  * &#x60;DKK&#x60; - Danish Krone  * &#x60;EUR&#x60; - Euro  * &#x60;GBP&#x60; - British Pound  * &#x60;JPY&#x60; - Japanese Yen  * &#x60;KRW&#x60; - South Korean Won  * &#x60;NOK&#x60; - Norwegian Krone  * &#x60;PLN&#x60; - Polish Zloty  * &#x60;SEK&#x60; - Swedish Krona  * &#x60;USD&#x60; - US Dollar 
        /// </summary>
        /// <value>An array of accepted currencies.  Option descriptions:  * &#x60;AUD&#x60; - Australian Dollar  * &#x60;CAD&#x60; - Canadian Dollar  * &#x60;CHF&#x60; - Swiss Franc  * &#x60;DKK&#x60; - Danish Krone  * &#x60;EUR&#x60; - Euro  * &#x60;GBP&#x60; - British Pound  * &#x60;JPY&#x60; - Japanese Yen  * &#x60;KRW&#x60; - South Korean Won  * &#x60;NOK&#x60; - Norwegian Krone  * &#x60;PLN&#x60; - Polish Zloty  * &#x60;SEK&#x60; - Swedish Krona  * &#x60;USD&#x60; - US Dollar </value>
        [DataMember(Name="accepted_currencies", EmitDefaultValue=false)]
        public AcceptedCurrenciesEnum? AcceptedCurrencies { get; set; }
        /// <summary>
        /// One or more ratings, either as a comma-separated list or as a JSON array, depending on the request format.
        /// </summary>
        /// <value>One or more ratings, either as a comma-separated list or as a JSON array, depending on the request format.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentRatingEnum
        {
            /// <summary>
            /// Enum Drugs for value: drugs
            /// </summary>
            [EnumMember(Value = "drugs")]
            Drugs = 1,

            /// <summary>
            /// Enum Language for value: language
            /// </summary>
            [EnumMember(Value = "language")]
            Language = 2,

            /// <summary>
            /// Enum Nudity for value: nudity
            /// </summary>
            [EnumMember(Value = "nudity")]
            Nudity = 3,

            /// <summary>
            /// Enum Safe for value: safe
            /// </summary>
            [EnumMember(Value = "safe")]
            Safe = 4,

            /// <summary>
            /// Enum Unrated for value: unrated
            /// </summary>
            [EnumMember(Value = "unrated")]
            Unrated = 5,

            /// <summary>
            /// Enum Violence for value: violence
            /// </summary>
            [EnumMember(Value = "violence")]
            Violence = 6

        }

        /// <summary>
        /// One or more ratings, either as a comma-separated list or as a JSON array, depending on the request format.
        /// </summary>
        /// <value>One or more ratings, either as a comma-separated list or as a JSON array, depending on the request format.</value>
        [DataMember(Name="content_rating", EmitDefaultValue=false)]
        public ContentRatingEnum ContentRating { get; set; }
        /// <summary>
        /// The type of On Demand page.
        /// </summary>
        /// <value>The type of On Demand page.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Film for value: film
            /// </summary>
            [EnumMember(Value = "film")]
            Film = 1,

            /// <summary>
            /// Enum Series for value: series
            /// </summary>
            [EnumMember(Value = "series")]
            Series = 2

        }

        /// <summary>
        /// The type of On Demand page.
        /// </summary>
        /// <value>The type of On Demand page.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject21" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject21() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject21" /> class.
        /// </summary>
        /// <param name="acceptedCurrencies">An array of accepted currencies.  Option descriptions:  * &#x60;AUD&#x60; - Australian Dollar  * &#x60;CAD&#x60; - Canadian Dollar  * &#x60;CHF&#x60; - Swiss Franc  * &#x60;DKK&#x60; - Danish Krone  * &#x60;EUR&#x60; - Euro  * &#x60;GBP&#x60; - British Pound  * &#x60;JPY&#x60; - Japanese Yen  * &#x60;KRW&#x60; - South Korean Won  * &#x60;NOK&#x60; - Norwegian Krone  * &#x60;PLN&#x60; - Polish Zloty  * &#x60;SEK&#x60; - Swedish Krona  * &#x60;USD&#x60; - US Dollar .</param>
        /// <param name="buy">buy.</param>
        /// <param name="contentRating">One or more ratings, either as a comma-separated list or as a JSON array, depending on the request format. (required).</param>
        /// <param name="description">The description of the On Demand page. (required).</param>
        /// <param name="domainLink">The custom domain of the On Demand page..</param>
        /// <param name="episodes">episodes.</param>
        /// <param name="link">The custom string to use in the Vimeo URL of the On Demand page..</param>
        /// <param name="name">The name of the On Demand page. (required).</param>
        /// <param name="rent">rent.</param>
        /// <param name="subscription">subscription.</param>
        /// <param name="type">The type of On Demand page. (required).</param>
        public InlineObject21(AcceptedCurrenciesEnum? acceptedCurrencies = default(AcceptedCurrenciesEnum?), MeOndemandPagesBuy buy = default(MeOndemandPagesBuy), ContentRatingEnum contentRating = default(ContentRatingEnum), string description = default(string), string domainLink = default(string), MeOndemandPagesEpisodes episodes = default(MeOndemandPagesEpisodes), string link = default(string), string name = default(string), MeOndemandPagesRent rent = default(MeOndemandPagesRent), MeOndemandPagesSubscription subscription = default(MeOndemandPagesSubscription), TypeEnum type = default(TypeEnum))
        {
            this.ContentRating = contentRating;
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for InlineObject21 and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for InlineObject21 and cannot be null");
            this.Type = type;
            this.AcceptedCurrencies = acceptedCurrencies;
            this.Buy = buy;
            this.DomainLink = domainLink;
            this.Episodes = episodes;
            this.Link = link;
            this.Rent = rent;
            this.Subscription = subscription;
        }
        
        /// <summary>
        /// Gets or Sets Buy
        /// </summary>
        [DataMember(Name="buy", EmitDefaultValue=false)]
        public MeOndemandPagesBuy Buy { get; set; }

        /// <summary>
        /// The description of the On Demand page.
        /// </summary>
        /// <value>The description of the On Demand page.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The custom domain of the On Demand page.
        /// </summary>
        /// <value>The custom domain of the On Demand page.</value>
        [DataMember(Name="domain_link", EmitDefaultValue=false)]
        public string DomainLink { get; set; }

        /// <summary>
        /// Gets or Sets Episodes
        /// </summary>
        [DataMember(Name="episodes", EmitDefaultValue=false)]
        public MeOndemandPagesEpisodes Episodes { get; set; }

        /// <summary>
        /// The custom string to use in the Vimeo URL of the On Demand page.
        /// </summary>
        /// <value>The custom string to use in the Vimeo URL of the On Demand page.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// The name of the On Demand page.
        /// </summary>
        /// <value>The name of the On Demand page.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Rent
        /// </summary>
        [DataMember(Name="rent", EmitDefaultValue=false)]
        public MeOndemandPagesRent Rent { get; set; }

        /// <summary>
        /// Gets or Sets Subscription
        /// </summary>
        [DataMember(Name="subscription", EmitDefaultValue=false)]
        public MeOndemandPagesSubscription Subscription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject21 {\n");
            sb.Append("  AcceptedCurrencies: ").Append(AcceptedCurrencies).Append("\n");
            sb.Append("  Buy: ").Append(Buy).Append("\n");
            sb.Append("  ContentRating: ").Append(ContentRating).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DomainLink: ").Append(DomainLink).Append("\n");
            sb.Append("  Episodes: ").Append(Episodes).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rent: ").Append(Rent).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject21);
        }

        /// <summary>
        /// Returns true if InlineObject21 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject21 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject21 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcceptedCurrencies == input.AcceptedCurrencies ||
                    this.AcceptedCurrencies.Equals(input.AcceptedCurrencies)
                ) && 
                (
                    this.Buy == input.Buy ||
                    (this.Buy != null &&
                    this.Buy.Equals(input.Buy))
                ) && 
                (
                    this.ContentRating == input.ContentRating ||
                    this.ContentRating.Equals(input.ContentRating)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DomainLink == input.DomainLink ||
                    (this.DomainLink != null &&
                    this.DomainLink.Equals(input.DomainLink))
                ) && 
                (
                    this.Episodes == input.Episodes ||
                    (this.Episodes != null &&
                    this.Episodes.Equals(input.Episodes))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Rent == input.Rent ||
                    (this.Rent != null &&
                    this.Rent.Equals(input.Rent))
                ) && 
                (
                    this.Subscription == input.Subscription ||
                    (this.Subscription != null &&
                    this.Subscription.Equals(input.Subscription))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AcceptedCurrencies.GetHashCode();
                if (this.Buy != null)
                    hashCode = hashCode * 59 + this.Buy.GetHashCode();
                hashCode = hashCode * 59 + this.ContentRating.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DomainLink != null)
                    hashCode = hashCode * 59 + this.DomainLink.GetHashCode();
                if (this.Episodes != null)
                    hashCode = hashCode * 59 + this.Episodes.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Rent != null)
                    hashCode = hashCode * 59 + this.Rent.GetHashCode();
                if (this.Subscription != null)
                    hashCode = hashCode * 59 + this.Subscription.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
