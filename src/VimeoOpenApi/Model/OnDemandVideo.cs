/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// OnDemandVideo
    /// </summary>
    [DataContract]
    public partial class OnDemandVideo :  IEquatable<OnDemandVideo>, IValidatableObject
    {
        /// <summary>
        /// The type of the On Demand video:  Option descriptions:  * &#x60;extra&#x60; - The On Demand video is an extra feature.  * &#x60;main&#x60; - The On Demand video is a main feature.  * &#x60;trailer&#x60; - The On Demand video is a trailer. 
        /// </summary>
        /// <value>The type of the On Demand video:  Option descriptions:  * &#x60;extra&#x60; - The On Demand video is an extra feature.  * &#x60;main&#x60; - The On Demand video is a main feature.  * &#x60;trailer&#x60; - The On Demand video is a trailer. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Extra for value: extra
            /// </summary>
            [EnumMember(Value = "extra")]
            Extra = 1,

            /// <summary>
            /// Enum Main for value: main
            /// </summary>
            [EnumMember(Value = "main")]
            Main = 2,

            /// <summary>
            /// Enum Trailer for value: trailer
            /// </summary>
            [EnumMember(Value = "trailer")]
            Trailer = 3

        }

        /// <summary>
        /// The type of the On Demand video:  Option descriptions:  * &#x60;extra&#x60; - The On Demand video is an extra feature.  * &#x60;main&#x60; - The On Demand video is a main feature.  * &#x60;trailer&#x60; - The On Demand video is a trailer. 
        /// </summary>
        /// <value>The type of the On Demand video:  Option descriptions:  * &#x60;extra&#x60; - The On Demand video is an extra feature.  * &#x60;main&#x60; - The On Demand video is a main feature.  * &#x60;trailer&#x60; - The On Demand video is a trailer. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandVideo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OnDemandVideo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandVideo" /> class.
        /// </summary>
        /// <param name="buy">buy (required).</param>
        /// <param name="description">Description of the On Demand video..</param>
        /// <param name="duration">The duration of the On Demand video..</param>
        /// <param name="episode">The episode number of the On Demand video..</param>
        /// <param name="interactions">interactions (required).</param>
        /// <param name="link">The link to this video on Vimeo. (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="name">The title of the On Demand video..</param>
        /// <param name="options">An array of HTTP methods permitted on this URI..</param>
        /// <param name="pictures">The active picture for this video..</param>
        /// <param name="playProgress">The user&#39;s most recent play position in seconds for this video. (required).</param>
        /// <param name="position">Describes the manual position of this video relative to the other videos owned by this On Demand page..</param>
        /// <param name="releaseDate">The time in ISO 8601 format when the On Demand video was created or published..</param>
        /// <param name="releaseYear">The year that this On Demand video was released. (required).</param>
        /// <param name="rent">rent (required).</param>
        /// <param name="type">The type of the On Demand video:  Option descriptions:  * &#x60;extra&#x60; - The On Demand video is an extra feature.  * &#x60;main&#x60; - The On Demand video is a main feature.  * &#x60;trailer&#x60; - The On Demand video is a trailer.  (required).</param>
        /// <param name="uri">The video container&#39;s relative URI. (required).</param>
        /// <param name="user">The owner of the video..</param>
        public OnDemandVideo(OnDemandVideoBuy buy = default(OnDemandVideoBuy), string description = default(string), string duration = default(string), decimal episode = default(decimal), OnDemandVideoInteractions interactions = default(OnDemandVideoInteractions), string link = default(string), OnDemandVideoMetadata metadata = default(OnDemandVideoMetadata), string name = default(string), List<string> options = default(List<string>), Picture pictures = default(Picture), decimal playProgress = default(decimal), decimal position = default(decimal), string releaseDate = default(string), decimal? releaseYear = default(decimal?), OnDemandVideoRent rent = default(OnDemandVideoRent), TypeEnum type = default(TypeEnum), string uri = default(string), User user = default(User))
        {
            // to ensure "buy" is required (not null)
            this.Buy = buy ?? throw new ArgumentNullException("buy is a required property for OnDemandVideo and cannot be null");
            // to ensure "interactions" is required (not null)
            this.Interactions = interactions ?? throw new ArgumentNullException("interactions is a required property for OnDemandVideo and cannot be null");
            // to ensure "link" is required (not null)
            this.Link = link ?? throw new ArgumentNullException("link is a required property for OnDemandVideo and cannot be null");
            // to ensure "metadata" is required (not null)
            this.Metadata = metadata ?? throw new ArgumentNullException("metadata is a required property for OnDemandVideo and cannot be null");
            this.PlayProgress = playProgress;
            // to ensure "releaseYear" is required (not null)
            this.ReleaseYear = releaseYear ?? throw new ArgumentNullException("releaseYear is a required property for OnDemandVideo and cannot be null");
            // to ensure "rent" is required (not null)
            this.Rent = rent ?? throw new ArgumentNullException("rent is a required property for OnDemandVideo and cannot be null");
            this.Type = type;
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for OnDemandVideo and cannot be null");
            this.Description = description;
            this.Duration = duration;
            this.Episode = episode;
            this.Name = name;
            this.Options = options;
            this.Pictures = pictures;
            this.Position = position;
            this.ReleaseDate = releaseDate;
            this.User = user;
        }
        
        /// <summary>
        /// Gets or Sets Buy
        /// </summary>
        [DataMember(Name="buy", EmitDefaultValue=true)]
        public OnDemandVideoBuy Buy { get; set; }

        /// <summary>
        /// Description of the On Demand video.
        /// </summary>
        /// <value>Description of the On Demand video.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The duration of the On Demand video.
        /// </summary>
        /// <value>The duration of the On Demand video.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// The episode number of the On Demand video.
        /// </summary>
        /// <value>The episode number of the On Demand video.</value>
        [DataMember(Name="episode", EmitDefaultValue=false)]
        public decimal Episode { get; set; }

        /// <summary>
        /// Gets or Sets Interactions
        /// </summary>
        [DataMember(Name="interactions", EmitDefaultValue=false)]
        public OnDemandVideoInteractions Interactions { get; set; }

        /// <summary>
        /// The link to this video on Vimeo.
        /// </summary>
        /// <value>The link to this video on Vimeo.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public OnDemandVideoMetadata Metadata { get; set; }

        /// <summary>
        /// The title of the On Demand video.
        /// </summary>
        /// <value>The title of the On Demand video.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// An array of HTTP methods permitted on this URI.
        /// </summary>
        /// <value>An array of HTTP methods permitted on this URI.</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<string> Options { get; set; }

        /// <summary>
        /// The active picture for this video.
        /// </summary>
        /// <value>The active picture for this video.</value>
        [DataMember(Name="pictures", EmitDefaultValue=false)]
        public Picture Pictures { get; set; }

        /// <summary>
        /// The user&#39;s most recent play position in seconds for this video.
        /// </summary>
        /// <value>The user&#39;s most recent play position in seconds for this video.</value>
        [DataMember(Name="play_progress", EmitDefaultValue=false)]
        public decimal PlayProgress { get; set; }

        /// <summary>
        /// Describes the manual position of this video relative to the other videos owned by this On Demand page.
        /// </summary>
        /// <value>Describes the manual position of this video relative to the other videos owned by this On Demand page.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public decimal Position { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the On Demand video was created or published.
        /// </summary>
        /// <value>The time in ISO 8601 format when the On Demand video was created or published.</value>
        [DataMember(Name="release_date", EmitDefaultValue=false)]
        public string ReleaseDate { get; set; }

        /// <summary>
        /// The year that this On Demand video was released.
        /// </summary>
        /// <value>The year that this On Demand video was released.</value>
        [DataMember(Name="release_year", EmitDefaultValue=true)]
        public decimal? ReleaseYear { get; set; }

        /// <summary>
        /// Gets or Sets Rent
        /// </summary>
        [DataMember(Name="rent", EmitDefaultValue=true)]
        public OnDemandVideoRent Rent { get; set; }

        /// <summary>
        /// The video container&#39;s relative URI.
        /// </summary>
        /// <value>The video container&#39;s relative URI.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The owner of the video.
        /// </summary>
        /// <value>The owner of the video.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnDemandVideo {\n");
            sb.Append("  Buy: ").Append(Buy).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Episode: ").Append(Episode).Append("\n");
            sb.Append("  Interactions: ").Append(Interactions).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("  PlayProgress: ").Append(PlayProgress).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  ReleaseYear: ").Append(ReleaseYear).Append("\n");
            sb.Append("  Rent: ").Append(Rent).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnDemandVideo);
        }

        /// <summary>
        /// Returns true if OnDemandVideo instances are equal
        /// </summary>
        /// <param name="input">Instance of OnDemandVideo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnDemandVideo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Buy == input.Buy ||
                    (this.Buy != null &&
                    this.Buy.Equals(input.Buy))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Episode == input.Episode ||
                    this.Episode.Equals(input.Episode)
                ) && 
                (
                    this.Interactions == input.Interactions ||
                    (this.Interactions != null &&
                    this.Interactions.Equals(input.Interactions))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.Pictures == input.Pictures ||
                    (this.Pictures != null &&
                    this.Pictures.Equals(input.Pictures))
                ) && 
                (
                    this.PlayProgress == input.PlayProgress ||
                    this.PlayProgress.Equals(input.PlayProgress)
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.ReleaseDate == input.ReleaseDate ||
                    (this.ReleaseDate != null &&
                    this.ReleaseDate.Equals(input.ReleaseDate))
                ) && 
                (
                    this.ReleaseYear == input.ReleaseYear ||
                    (this.ReleaseYear != null &&
                    this.ReleaseYear.Equals(input.ReleaseYear))
                ) && 
                (
                    this.Rent == input.Rent ||
                    (this.Rent != null &&
                    this.Rent.Equals(input.Rent))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Buy != null)
                    hashCode = hashCode * 59 + this.Buy.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                hashCode = hashCode * 59 + this.Episode.GetHashCode();
                if (this.Interactions != null)
                    hashCode = hashCode * 59 + this.Interactions.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.Pictures != null)
                    hashCode = hashCode * 59 + this.Pictures.GetHashCode();
                hashCode = hashCode * 59 + this.PlayProgress.GetHashCode();
                hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.ReleaseDate != null)
                    hashCode = hashCode * 59 + this.ReleaseDate.GetHashCode();
                if (this.ReleaseYear != null)
                    hashCode = hashCode * 59 + this.ReleaseYear.GetHashCode();
                if (this.Rent != null)
                    hashCode = hashCode * 59 + this.Rent.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
