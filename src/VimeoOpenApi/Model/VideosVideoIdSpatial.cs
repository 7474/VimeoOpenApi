/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// VideosVideoIdSpatial
    /// </summary>
    [DataContract]
    public partial class VideosVideoIdSpatial :  IEquatable<VideosVideoIdSpatial>, IValidatableObject
    {
        /// <summary>
        /// The 360 spatial projection.  Option descriptions:  * &#x60;cubical&#x60; - Use cubical projection.  * &#x60;cylindrical&#x60; - Use cylindrical projection.  * &#x60;dome&#x60; - Use dome projection.  * &#x60;equirectangular&#x60; - Use equirectangular projection.  * &#x60;pyramid&#x60; - Use pyramid projection. 
        /// </summary>
        /// <value>The 360 spatial projection.  Option descriptions:  * &#x60;cubical&#x60; - Use cubical projection.  * &#x60;cylindrical&#x60; - Use cylindrical projection.  * &#x60;dome&#x60; - Use dome projection.  * &#x60;equirectangular&#x60; - Use equirectangular projection.  * &#x60;pyramid&#x60; - Use pyramid projection. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProjectionEnum
        {
            /// <summary>
            /// Enum Cubical for value: cubical
            /// </summary>
            [EnumMember(Value = "cubical")]
            Cubical = 1,

            /// <summary>
            /// Enum Cylindrical for value: cylindrical
            /// </summary>
            [EnumMember(Value = "cylindrical")]
            Cylindrical = 2,

            /// <summary>
            /// Enum Dome for value: dome
            /// </summary>
            [EnumMember(Value = "dome")]
            Dome = 3,

            /// <summary>
            /// Enum Equirectangular for value: equirectangular
            /// </summary>
            [EnumMember(Value = "equirectangular")]
            Equirectangular = 4,

            /// <summary>
            /// Enum Pyramid for value: pyramid
            /// </summary>
            [EnumMember(Value = "pyramid")]
            Pyramid = 5

        }

        /// <summary>
        /// The 360 spatial projection.  Option descriptions:  * &#x60;cubical&#x60; - Use cubical projection.  * &#x60;cylindrical&#x60; - Use cylindrical projection.  * &#x60;dome&#x60; - Use dome projection.  * &#x60;equirectangular&#x60; - Use equirectangular projection.  * &#x60;pyramid&#x60; - Use pyramid projection. 
        /// </summary>
        /// <value>The 360 spatial projection.  Option descriptions:  * &#x60;cubical&#x60; - Use cubical projection.  * &#x60;cylindrical&#x60; - Use cylindrical projection.  * &#x60;dome&#x60; - Use dome projection.  * &#x60;equirectangular&#x60; - Use equirectangular projection.  * &#x60;pyramid&#x60; - Use pyramid projection. </value>
        [DataMember(Name="projection", EmitDefaultValue=false)]
        public ProjectionEnum? Projection { get; set; }
        /// <summary>
        /// The 360 spatial stereo format.  Option descriptions:  * &#x60;left-right&#x60; - Use left-right stereo.  * &#x60;mono&#x60; - Use monaural audio.  * &#x60;top-bottom&#x60; - Use top-bottom stereo. 
        /// </summary>
        /// <value>The 360 spatial stereo format.  Option descriptions:  * &#x60;left-right&#x60; - Use left-right stereo.  * &#x60;mono&#x60; - Use monaural audio.  * &#x60;top-bottom&#x60; - Use top-bottom stereo. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StereoFormatEnum
        {
            /// <summary>
            /// Enum LeftRight for value: left-right
            /// </summary>
            [EnumMember(Value = "left-right")]
            LeftRight = 1,

            /// <summary>
            /// Enum Mono for value: mono
            /// </summary>
            [EnumMember(Value = "mono")]
            Mono = 2,

            /// <summary>
            /// Enum TopBottom for value: top-bottom
            /// </summary>
            [EnumMember(Value = "top-bottom")]
            TopBottom = 3

        }

        /// <summary>
        /// The 360 spatial stereo format.  Option descriptions:  * &#x60;left-right&#x60; - Use left-right stereo.  * &#x60;mono&#x60; - Use monaural audio.  * &#x60;top-bottom&#x60; - Use top-bottom stereo. 
        /// </summary>
        /// <value>The 360 spatial stereo format.  Option descriptions:  * &#x60;left-right&#x60; - Use left-right stereo.  * &#x60;mono&#x60; - Use monaural audio.  * &#x60;top-bottom&#x60; - Use top-bottom stereo. </value>
        [DataMember(Name="stereo_format", EmitDefaultValue=false)]
        public StereoFormatEnum? StereoFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VideosVideoIdSpatial" /> class.
        /// </summary>
        /// <param name="directorTimeline">An array representing the 360 director timeline..</param>
        /// <param name="fieldOfView">The 360 field of view. This value must be between 30 and 90. The default is 50..</param>
        /// <param name="projection">The 360 spatial projection.  Option descriptions:  * &#x60;cubical&#x60; - Use cubical projection.  * &#x60;cylindrical&#x60; - Use cylindrical projection.  * &#x60;dome&#x60; - Use dome projection.  * &#x60;equirectangular&#x60; - Use equirectangular projection.  * &#x60;pyramid&#x60; - Use pyramid projection. .</param>
        /// <param name="stereoFormat">The 360 spatial stereo format.  Option descriptions:  * &#x60;left-right&#x60; - Use left-right stereo.  * &#x60;mono&#x60; - Use monaural audio.  * &#x60;top-bottom&#x60; - Use top-bottom stereo. .</param>
        public VideosVideoIdSpatial(List<VideosVideoIdSpatialDirectorTimeline> directorTimeline = default(List<VideosVideoIdSpatialDirectorTimeline>), decimal fieldOfView = default(decimal), ProjectionEnum? projection = default(ProjectionEnum?), StereoFormatEnum? stereoFormat = default(StereoFormatEnum?))
        {
            this.DirectorTimeline = directorTimeline;
            this.FieldOfView = fieldOfView;
            this.Projection = projection;
            this.StereoFormat = stereoFormat;
        }
        
        /// <summary>
        /// An array representing the 360 director timeline.
        /// </summary>
        /// <value>An array representing the 360 director timeline.</value>
        [DataMember(Name="director_timeline", EmitDefaultValue=false)]
        public List<VideosVideoIdSpatialDirectorTimeline> DirectorTimeline { get; set; }

        /// <summary>
        /// The 360 field of view. This value must be between 30 and 90. The default is 50.
        /// </summary>
        /// <value>The 360 field of view. This value must be between 30 and 90. The default is 50.</value>
        [DataMember(Name="field_of_view", EmitDefaultValue=false)]
        public decimal FieldOfView { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideosVideoIdSpatial {\n");
            sb.Append("  DirectorTimeline: ").Append(DirectorTimeline).Append("\n");
            sb.Append("  FieldOfView: ").Append(FieldOfView).Append("\n");
            sb.Append("  Projection: ").Append(Projection).Append("\n");
            sb.Append("  StereoFormat: ").Append(StereoFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideosVideoIdSpatial);
        }

        /// <summary>
        /// Returns true if VideosVideoIdSpatial instances are equal
        /// </summary>
        /// <param name="input">Instance of VideosVideoIdSpatial to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideosVideoIdSpatial input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DirectorTimeline == input.DirectorTimeline ||
                    this.DirectorTimeline != null &&
                    input.DirectorTimeline != null &&
                    this.DirectorTimeline.SequenceEqual(input.DirectorTimeline)
                ) && 
                (
                    this.FieldOfView == input.FieldOfView ||
                    this.FieldOfView.Equals(input.FieldOfView)
                ) && 
                (
                    this.Projection == input.Projection ||
                    this.Projection.Equals(input.Projection)
                ) && 
                (
                    this.StereoFormat == input.StereoFormat ||
                    this.StereoFormat.Equals(input.StereoFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DirectorTimeline != null)
                    hashCode = hashCode * 59 + this.DirectorTimeline.GetHashCode();
                hashCode = hashCode * 59 + this.FieldOfView.GetHashCode();
                hashCode = hashCode * 59 + this.Projection.GetHashCode();
                hashCode = hashCode * 59 + this.StereoFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
