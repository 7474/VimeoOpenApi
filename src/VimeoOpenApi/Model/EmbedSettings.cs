/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// EmbedSettings
    /// </summary>
    [DataContract]
    public partial class EmbedSettings :  IEquatable<EmbedSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmbedSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedSettings" /> class.
        /// </summary>
        /// <param name="buttons">buttons (required).</param>
        /// <param name="color">The primary player color, which controls the color of the progress bar, buttons, and more. (required).</param>
        /// <param name="logos">logos (required).</param>
        /// <param name="playbar">Whether the playbar appears in the embeddable player. (required).</param>
        /// <param name="speed">Whether the speed controls appear in the embeddable player. (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="uri">The URI of the embed preset..</param>
        /// <param name="volume">Whether the volume controls appear in the embeddable player. (required).</param>
        public EmbedSettings(EmbedSettingsButtons buttons = default(EmbedSettingsButtons), string color = default(string), EmbedSettingsLogos logos = default(EmbedSettingsLogos), bool playbar = default(bool), bool speed = default(bool), EmbedSettingsTitle title = default(EmbedSettingsTitle), string uri = default(string), bool volume = default(bool))
        {
            // to ensure "buttons" is required (not null)
            this.Buttons = buttons ?? throw new ArgumentNullException("buttons is a required property for EmbedSettings and cannot be null");
            // to ensure "color" is required (not null)
            this.Color = color ?? throw new ArgumentNullException("color is a required property for EmbedSettings and cannot be null");
            // to ensure "logos" is required (not null)
            this.Logos = logos ?? throw new ArgumentNullException("logos is a required property for EmbedSettings and cannot be null");
            this.Playbar = playbar;
            this.Speed = speed;
            // to ensure "title" is required (not null)
            this.Title = title ?? throw new ArgumentNullException("title is a required property for EmbedSettings and cannot be null");
            this.Volume = volume;
            this.Uri = uri;
        }
        
        /// <summary>
        /// Gets or Sets Buttons
        /// </summary>
        [DataMember(Name="buttons", EmitDefaultValue=false)]
        public EmbedSettingsButtons Buttons { get; set; }

        /// <summary>
        /// The primary player color, which controls the color of the progress bar, buttons, and more.
        /// </summary>
        /// <value>The primary player color, which controls the color of the progress bar, buttons, and more.</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Logos
        /// </summary>
        [DataMember(Name="logos", EmitDefaultValue=false)]
        public EmbedSettingsLogos Logos { get; set; }

        /// <summary>
        /// Whether the playbar appears in the embeddable player.
        /// </summary>
        /// <value>Whether the playbar appears in the embeddable player.</value>
        [DataMember(Name="playbar", EmitDefaultValue=false)]
        public bool Playbar { get; set; }

        /// <summary>
        /// Whether the speed controls appear in the embeddable player.
        /// </summary>
        /// <value>Whether the speed controls appear in the embeddable player.</value>
        [DataMember(Name="speed", EmitDefaultValue=false)]
        public bool Speed { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public EmbedSettingsTitle Title { get; set; }

        /// <summary>
        /// The URI of the embed preset.
        /// </summary>
        /// <value>The URI of the embed preset.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Whether the volume controls appear in the embeddable player.
        /// </summary>
        /// <value>Whether the volume controls appear in the embeddable player.</value>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public bool Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmbedSettings {\n");
            sb.Append("  Buttons: ").Append(Buttons).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Logos: ").Append(Logos).Append("\n");
            sb.Append("  Playbar: ").Append(Playbar).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmbedSettings);
        }

        /// <summary>
        /// Returns true if EmbedSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EmbedSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmbedSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Buttons == input.Buttons ||
                    (this.Buttons != null &&
                    this.Buttons.Equals(input.Buttons))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Logos == input.Logos ||
                    (this.Logos != null &&
                    this.Logos.Equals(input.Logos))
                ) && 
                (
                    this.Playbar == input.Playbar ||
                    this.Playbar.Equals(input.Playbar)
                ) && 
                (
                    this.Speed == input.Speed ||
                    this.Speed.Equals(input.Speed)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Buttons != null)
                    hashCode = hashCode * 59 + this.Buttons.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Logos != null)
                    hashCode = hashCode * 59 + this.Logos.GetHashCode();
                hashCode = hashCode * 59 + this.Playbar.GetHashCode();
                hashCode = hashCode * 59 + this.Speed.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                hashCode = hashCode * 59 + this.Volume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
