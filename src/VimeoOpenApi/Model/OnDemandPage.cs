/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// OnDemandPage
    /// </summary>
    [DataContract]
    public partial class OnDemandPage :  IEquatable<OnDemandPage>, IValidatableObject
    {
        /// <summary>
        /// Whether the On Demand page is for a film or a series.  Option descriptions:  * &#x60;film&#x60; - The On Demand page is for a film.  * &#x60;series&#x60; - The On Demand page is for a series. 
        /// </summary>
        /// <value>Whether the On Demand page is for a film or a series.  Option descriptions:  * &#x60;film&#x60; - The On Demand page is for a film.  * &#x60;series&#x60; - The On Demand page is for a series. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Film for value: film
            /// </summary>
            [EnumMember(Value = "film")]
            Film = 1,

            /// <summary>
            /// Enum Series for value: series
            /// </summary>
            [EnumMember(Value = "series")]
            Series = 2

        }

        /// <summary>
        /// Whether the On Demand page is for a film or a series.  Option descriptions:  * &#x60;film&#x60; - The On Demand page is for a film.  * &#x60;series&#x60; - The On Demand page is for a series. 
        /// </summary>
        /// <value>Whether the On Demand page is for a film or a series.  Option descriptions:  * &#x60;film&#x60; - The On Demand page is for a film.  * &#x60;series&#x60; - The On Demand page is for a series. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OnDemandPage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPage" /> class.
        /// </summary>
        /// <param name="background">The background image for the On Demand page on Vimeo. (required).</param>
        /// <param name="colors">colors (required).</param>
        /// <param name="contentRating">An array of the On Demand page&#39;s content ratings. (required).</param>
        /// <param name="createdTime">The time in ISO 8601 format when the On Demand page was created..</param>
        /// <param name="description">The description of the On Demand page. (required).</param>
        /// <param name="domainLink">The link to the On Demand page on its own domain. (required).</param>
        /// <param name="episodes">episodes (required).</param>
        /// <param name="film">The On Demand page&#39;s film, if it is a film..</param>
        /// <param name="genres">An array of the genres assigned to the On Demand page. (required).</param>
        /// <param name="link">The link to the On Demand page on Vimeo. (required).</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="modifiedTime">he time in ISO 8601 format when the On Demand page was last modified..</param>
        /// <param name="name">The descriptive title of the On Demand page. (required).</param>
        /// <param name="pictures">The active poster for the On Demand page. (required).</param>
        /// <param name="preorder">preorder (required).</param>
        /// <param name="published">published (required).</param>
        /// <param name="rating">The rating of the On Demand page. (required).</param>
        /// <param name="resourceKey">The On Demand resource key. (required).</param>
        /// <param name="sku">The creator-designated SKU for the On Demand page..</param>
        /// <param name="subscription">subscription (required).</param>
        /// <param name="theme">The graphical theme for the On Demand page. (required).</param>
        /// <param name="thumbnail">The thumbnail image for the On Demand page on Vimeo. (required).</param>
        /// <param name="trailer">The trailer for the On Demand page. (required).</param>
        /// <param name="type">Whether the On Demand page is for a film or a series.  Option descriptions:  * &#x60;film&#x60; - The On Demand page is for a film.  * &#x60;series&#x60; - The On Demand page is for a series.  (required).</param>
        /// <param name="uri">The relative URI of the On Demand page. (required).</param>
        /// <param name="user">The user who created the On Demand page. (required).</param>
        public OnDemandPage(Picture background = default(Picture), OnDemandPageColors colors = default(OnDemandPageColors), List<string> contentRating = default(List<string>), string createdTime = default(string), string description = default(string), string domainLink = default(string), OnDemandPageEpisodes episodes = default(OnDemandPageEpisodes), Video film = default(Video), List<OnDemandGenre> genres = default(List<OnDemandGenre>), string link = default(string), OnDemandPageMetadata metadata = default(OnDemandPageMetadata), string modifiedTime = default(string), string name = default(string), Picture pictures = default(Picture), OnDemandPagePreorder preorder = default(OnDemandPagePreorder), OnDemandPagePublished published = default(OnDemandPagePublished), decimal? rating = default(decimal?), string resourceKey = default(string), string sku = default(string), OnDemandPageSubscription subscription = default(OnDemandPageSubscription), string theme = default(string), Picture thumbnail = default(Picture), Video trailer = default(Video), TypeEnum type = default(TypeEnum), string uri = default(string), User user = default(User))
        {
            // to ensure "background" is required (not null)
            this.Background = background ?? throw new ArgumentNullException("background is a required property for OnDemandPage and cannot be null");
            // to ensure "colors" is required (not null)
            this.Colors = colors ?? throw new ArgumentNullException("colors is a required property for OnDemandPage and cannot be null");
            // to ensure "contentRating" is required (not null)
            this.ContentRating = contentRating ?? throw new ArgumentNullException("contentRating is a required property for OnDemandPage and cannot be null");
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for OnDemandPage and cannot be null");
            // to ensure "domainLink" is required (not null)
            this.DomainLink = domainLink ?? throw new ArgumentNullException("domainLink is a required property for OnDemandPage and cannot be null");
            // to ensure "episodes" is required (not null)
            this.Episodes = episodes ?? throw new ArgumentNullException("episodes is a required property for OnDemandPage and cannot be null");
            // to ensure "genres" is required (not null)
            this.Genres = genres ?? throw new ArgumentNullException("genres is a required property for OnDemandPage and cannot be null");
            // to ensure "link" is required (not null)
            this.Link = link ?? throw new ArgumentNullException("link is a required property for OnDemandPage and cannot be null");
            // to ensure "metadata" is required (not null)
            this.Metadata = metadata ?? throw new ArgumentNullException("metadata is a required property for OnDemandPage and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for OnDemandPage and cannot be null");
            // to ensure "pictures" is required (not null)
            this.Pictures = pictures ?? throw new ArgumentNullException("pictures is a required property for OnDemandPage and cannot be null");
            // to ensure "preorder" is required (not null)
            this.Preorder = preorder ?? throw new ArgumentNullException("preorder is a required property for OnDemandPage and cannot be null");
            // to ensure "published" is required (not null)
            this.Published = published ?? throw new ArgumentNullException("published is a required property for OnDemandPage and cannot be null");
            // to ensure "rating" is required (not null)
            this.Rating = rating ?? throw new ArgumentNullException("rating is a required property for OnDemandPage and cannot be null");
            // to ensure "resourceKey" is required (not null)
            this.ResourceKey = resourceKey ?? throw new ArgumentNullException("resourceKey is a required property for OnDemandPage and cannot be null");
            // to ensure "subscription" is required (not null)
            this.Subscription = subscription ?? throw new ArgumentNullException("subscription is a required property for OnDemandPage and cannot be null");
            // to ensure "theme" is required (not null)
            this.Theme = theme ?? throw new ArgumentNullException("theme is a required property for OnDemandPage and cannot be null");
            // to ensure "thumbnail" is required (not null)
            this.Thumbnail = thumbnail ?? throw new ArgumentNullException("thumbnail is a required property for OnDemandPage and cannot be null");
            // to ensure "trailer" is required (not null)
            this.Trailer = trailer ?? throw new ArgumentNullException("trailer is a required property for OnDemandPage and cannot be null");
            this.Type = type;
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for OnDemandPage and cannot be null");
            // to ensure "user" is required (not null)
            this.User = user ?? throw new ArgumentNullException("user is a required property for OnDemandPage and cannot be null");
            this.CreatedTime = createdTime;
            this.Film = film;
            this.ModifiedTime = modifiedTime;
            this.Sku = sku;
        }
        
        /// <summary>
        /// The background image for the On Demand page on Vimeo.
        /// </summary>
        /// <value>The background image for the On Demand page on Vimeo.</value>
        [DataMember(Name="background", EmitDefaultValue=true)]
        public Picture Background { get; set; }

        /// <summary>
        /// Gets or Sets Colors
        /// </summary>
        [DataMember(Name="colors", EmitDefaultValue=false)]
        public OnDemandPageColors Colors { get; set; }

        /// <summary>
        /// An array of the On Demand page&#39;s content ratings.
        /// </summary>
        /// <value>An array of the On Demand page&#39;s content ratings.</value>
        [DataMember(Name="content_rating", EmitDefaultValue=false)]
        public List<string> ContentRating { get; set; }

        /// <summary>
        /// The time in ISO 8601 format when the On Demand page was created.
        /// </summary>
        /// <value>The time in ISO 8601 format when the On Demand page was created.</value>
        [DataMember(Name="created_time", EmitDefaultValue=false)]
        public string CreatedTime { get; set; }

        /// <summary>
        /// The description of the On Demand page.
        /// </summary>
        /// <value>The description of the On Demand page.</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// The link to the On Demand page on its own domain.
        /// </summary>
        /// <value>The link to the On Demand page on its own domain.</value>
        [DataMember(Name="domain_link", EmitDefaultValue=true)]
        public string DomainLink { get; set; }

        /// <summary>
        /// Gets or Sets Episodes
        /// </summary>
        [DataMember(Name="episodes", EmitDefaultValue=false)]
        public OnDemandPageEpisodes Episodes { get; set; }

        /// <summary>
        /// The On Demand page&#39;s film, if it is a film.
        /// </summary>
        /// <value>The On Demand page&#39;s film, if it is a film.</value>
        [DataMember(Name="film", EmitDefaultValue=false)]
        public Video Film { get; set; }

        /// <summary>
        /// An array of the genres assigned to the On Demand page.
        /// </summary>
        /// <value>An array of the genres assigned to the On Demand page.</value>
        [DataMember(Name="genres", EmitDefaultValue=false)]
        public List<OnDemandGenre> Genres { get; set; }

        /// <summary>
        /// The link to the On Demand page on Vimeo.
        /// </summary>
        /// <value>The link to the On Demand page on Vimeo.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public OnDemandPageMetadata Metadata { get; set; }

        /// <summary>
        /// he time in ISO 8601 format when the On Demand page was last modified.
        /// </summary>
        /// <value>he time in ISO 8601 format when the On Demand page was last modified.</value>
        [DataMember(Name="modified_time", EmitDefaultValue=false)]
        public string ModifiedTime { get; set; }

        /// <summary>
        /// The descriptive title of the On Demand page.
        /// </summary>
        /// <value>The descriptive title of the On Demand page.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The active poster for the On Demand page.
        /// </summary>
        /// <value>The active poster for the On Demand page.</value>
        [DataMember(Name="pictures", EmitDefaultValue=true)]
        public Picture Pictures { get; set; }

        /// <summary>
        /// Gets or Sets Preorder
        /// </summary>
        [DataMember(Name="preorder", EmitDefaultValue=false)]
        public OnDemandPagePreorder Preorder { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name="published", EmitDefaultValue=false)]
        public OnDemandPagePublished Published { get; set; }

        /// <summary>
        /// The rating of the On Demand page.
        /// </summary>
        /// <value>The rating of the On Demand page.</value>
        [DataMember(Name="rating", EmitDefaultValue=true)]
        public decimal? Rating { get; set; }

        /// <summary>
        /// The On Demand resource key.
        /// </summary>
        /// <value>The On Demand resource key.</value>
        [DataMember(Name="resource_key", EmitDefaultValue=false)]
        public string ResourceKey { get; set; }

        /// <summary>
        /// The creator-designated SKU for the On Demand page.
        /// </summary>
        /// <value>The creator-designated SKU for the On Demand page.</value>
        [DataMember(Name="sku", EmitDefaultValue=true)]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or Sets Subscription
        /// </summary>
        [DataMember(Name="subscription", EmitDefaultValue=true)]
        public OnDemandPageSubscription Subscription { get; set; }

        /// <summary>
        /// The graphical theme for the On Demand page.
        /// </summary>
        /// <value>The graphical theme for the On Demand page.</value>
        [DataMember(Name="theme", EmitDefaultValue=false)]
        public string Theme { get; set; }

        /// <summary>
        /// The thumbnail image for the On Demand page on Vimeo.
        /// </summary>
        /// <value>The thumbnail image for the On Demand page on Vimeo.</value>
        [DataMember(Name="thumbnail", EmitDefaultValue=true)]
        public Picture Thumbnail { get; set; }

        /// <summary>
        /// The trailer for the On Demand page.
        /// </summary>
        /// <value>The trailer for the On Demand page.</value>
        [DataMember(Name="trailer", EmitDefaultValue=true)]
        public Video Trailer { get; set; }

        /// <summary>
        /// The relative URI of the On Demand page.
        /// </summary>
        /// <value>The relative URI of the On Demand page.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The user who created the On Demand page.
        /// </summary>
        /// <value>The user who created the On Demand page.</value>
        [DataMember(Name="user", EmitDefaultValue=true)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnDemandPage {\n");
            sb.Append("  Background: ").Append(Background).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  ContentRating: ").Append(ContentRating).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DomainLink: ").Append(DomainLink).Append("\n");
            sb.Append("  Episodes: ").Append(Episodes).Append("\n");
            sb.Append("  Film: ").Append(Film).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("  Preorder: ").Append(Preorder).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  ResourceKey: ").Append(ResourceKey).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  Trailer: ").Append(Trailer).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnDemandPage);
        }

        /// <summary>
        /// Returns true if OnDemandPage instances are equal
        /// </summary>
        /// <param name="input">Instance of OnDemandPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnDemandPage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Background == input.Background ||
                    (this.Background != null &&
                    this.Background.Equals(input.Background))
                ) && 
                (
                    this.Colors == input.Colors ||
                    (this.Colors != null &&
                    this.Colors.Equals(input.Colors))
                ) && 
                (
                    this.ContentRating == input.ContentRating ||
                    this.ContentRating != null &&
                    input.ContentRating != null &&
                    this.ContentRating.SequenceEqual(input.ContentRating)
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DomainLink == input.DomainLink ||
                    (this.DomainLink != null &&
                    this.DomainLink.Equals(input.DomainLink))
                ) && 
                (
                    this.Episodes == input.Episodes ||
                    (this.Episodes != null &&
                    this.Episodes.Equals(input.Episodes))
                ) && 
                (
                    this.Film == input.Film ||
                    (this.Film != null &&
                    this.Film.Equals(input.Film))
                ) && 
                (
                    this.Genres == input.Genres ||
                    this.Genres != null &&
                    input.Genres != null &&
                    this.Genres.SequenceEqual(input.Genres)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Pictures == input.Pictures ||
                    (this.Pictures != null &&
                    this.Pictures.Equals(input.Pictures))
                ) && 
                (
                    this.Preorder == input.Preorder ||
                    (this.Preorder != null &&
                    this.Preorder.Equals(input.Preorder))
                ) && 
                (
                    this.Published == input.Published ||
                    (this.Published != null &&
                    this.Published.Equals(input.Published))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.ResourceKey == input.ResourceKey ||
                    (this.ResourceKey != null &&
                    this.ResourceKey.Equals(input.ResourceKey))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Subscription == input.Subscription ||
                    (this.Subscription != null &&
                    this.Subscription.Equals(input.Subscription))
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                ) && 
                (
                    this.Thumbnail == input.Thumbnail ||
                    (this.Thumbnail != null &&
                    this.Thumbnail.Equals(input.Thumbnail))
                ) && 
                (
                    this.Trailer == input.Trailer ||
                    (this.Trailer != null &&
                    this.Trailer.Equals(input.Trailer))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Background != null)
                    hashCode = hashCode * 59 + this.Background.GetHashCode();
                if (this.Colors != null)
                    hashCode = hashCode * 59 + this.Colors.GetHashCode();
                if (this.ContentRating != null)
                    hashCode = hashCode * 59 + this.ContentRating.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DomainLink != null)
                    hashCode = hashCode * 59 + this.DomainLink.GetHashCode();
                if (this.Episodes != null)
                    hashCode = hashCode * 59 + this.Episodes.GetHashCode();
                if (this.Film != null)
                    hashCode = hashCode * 59 + this.Film.GetHashCode();
                if (this.Genres != null)
                    hashCode = hashCode * 59 + this.Genres.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Pictures != null)
                    hashCode = hashCode * 59 + this.Pictures.GetHashCode();
                if (this.Preorder != null)
                    hashCode = hashCode * 59 + this.Preorder.GetHashCode();
                if (this.Published != null)
                    hashCode = hashCode * 59 + this.Published.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.ResourceKey != null)
                    hashCode = hashCode * 59 + this.ResourceKey.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.Subscription != null)
                    hashCode = hashCode * 59 + this.Subscription.GetHashCode();
                if (this.Theme != null)
                    hashCode = hashCode * 59 + this.Theme.GetHashCode();
                if (this.Thumbnail != null)
                    hashCode = hashCode * 59 + this.Thumbnail.GetHashCode();
                if (this.Trailer != null)
                    hashCode = hashCode * 59 + this.Trailer.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
