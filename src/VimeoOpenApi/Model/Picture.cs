/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// Picture
    /// </summary>
    [DataContract]
    public partial class Picture :  IEquatable<Picture>, IValidatableObject
    {
        /// <summary>
        /// The type of picture:  Option descriptions:  * &#x60;caution&#x60; - An image that is appropriate for all ages.  * &#x60;custom&#x60; - A custom image for the video.  * &#x60;default&#x60; - The default image for the video. 
        /// </summary>
        /// <value>The type of picture:  Option descriptions:  * &#x60;caution&#x60; - An image that is appropriate for all ages.  * &#x60;custom&#x60; - A custom image for the video.  * &#x60;default&#x60; - The default image for the video. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Caution for value: caution
            /// </summary>
            [EnumMember(Value = "caution")]
            Caution = 1,

            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 2,

            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 3

        }

        /// <summary>
        /// The type of picture:  Option descriptions:  * &#x60;caution&#x60; - An image that is appropriate for all ages.  * &#x60;custom&#x60; - A custom image for the video.  * &#x60;default&#x60; - The default image for the video. 
        /// </summary>
        /// <value>The type of picture:  Option descriptions:  * &#x60;caution&#x60; - An image that is appropriate for all ages.  * &#x60;custom&#x60; - A custom image for the video.  * &#x60;default&#x60; - The default image for the video. </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Picture" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Picture() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Picture" /> class.
        /// </summary>
        /// <param name="active">Whether this picture is the active picture for its parent resource. (required).</param>
        /// <param name="link">The upload URL for the picture. This field appears when you create the picture resource for the first time..</param>
        /// <param name="resourceKey">The picture&#39;s resource key string. (required).</param>
        /// <param name="sizes">An array containing reference information about all available image files. (required).</param>
        /// <param name="type">The type of picture:  Option descriptions:  * &#x60;caution&#x60; - An image that is appropriate for all ages.  * &#x60;custom&#x60; - A custom image for the video.  * &#x60;default&#x60; - The default image for the video.  (required).</param>
        /// <param name="uri">The picture&#39;s URI. (required).</param>
        public Picture(bool active = default(bool), string link = default(string), string resourceKey = default(string), List<PictureSizes> sizes = default(List<PictureSizes>), TypeEnum type = default(TypeEnum), string uri = default(string))
        {
            this.Active = active;
            // to ensure "resourceKey" is required (not null)
            this.ResourceKey = resourceKey ?? throw new ArgumentNullException("resourceKey is a required property for Picture and cannot be null");
            // to ensure "sizes" is required (not null)
            this.Sizes = sizes ?? throw new ArgumentNullException("sizes is a required property for Picture and cannot be null");
            this.Type = type;
            // to ensure "uri" is required (not null)
            this.Uri = uri ?? throw new ArgumentNullException("uri is a required property for Picture and cannot be null");
            this.Link = link;
        }
        
        /// <summary>
        /// Whether this picture is the active picture for its parent resource.
        /// </summary>
        /// <value>Whether this picture is the active picture for its parent resource.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// The upload URL for the picture. This field appears when you create the picture resource for the first time.
        /// </summary>
        /// <value>The upload URL for the picture. This field appears when you create the picture resource for the first time.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// The picture&#39;s resource key string.
        /// </summary>
        /// <value>The picture&#39;s resource key string.</value>
        [DataMember(Name="resource_key", EmitDefaultValue=false)]
        public string ResourceKey { get; set; }

        /// <summary>
        /// An array containing reference information about all available image files.
        /// </summary>
        /// <value>An array containing reference information about all available image files.</value>
        [DataMember(Name="sizes", EmitDefaultValue=false)]
        public List<PictureSizes> Sizes { get; set; }

        /// <summary>
        /// The picture&#39;s URI.
        /// </summary>
        /// <value>The picture&#39;s URI.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Picture {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  ResourceKey: ").Append(ResourceKey).Append("\n");
            sb.Append("  Sizes: ").Append(Sizes).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Picture);
        }

        /// <summary>
        /// Returns true if Picture instances are equal
        /// </summary>
        /// <param name="input">Instance of Picture to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Picture input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.ResourceKey == input.ResourceKey ||
                    (this.ResourceKey != null &&
                    this.ResourceKey.Equals(input.ResourceKey))
                ) && 
                (
                    this.Sizes == input.Sizes ||
                    this.Sizes != null &&
                    input.Sizes != null &&
                    this.Sizes.SequenceEqual(input.Sizes)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.ResourceKey != null)
                    hashCode = hashCode * 59 + this.ResourceKey.GetHashCode();
                if (this.Sizes != null)
                    hashCode = hashCode * 59 + this.Sizes.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
