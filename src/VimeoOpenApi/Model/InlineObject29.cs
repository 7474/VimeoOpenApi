/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VimeoOpenApi.Client.OpenAPIDateConverter;

namespace VimeoOpenApi.Model
{
    /// <summary>
    /// InlineObject29
    /// </summary>
    [DataContract]
    public partial class InlineObject29 :  IEquatable<InlineObject29>, IValidatableObject
    {
        /// <summary>
        /// The grant type. The value of this field must be &#x60;vimeo_oauth1&#x60;.
        /// </summary>
        /// <value>The grant type. The value of this field must be &#x60;vimeo_oauth1&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GrantTypeEnum
        {
            /// <summary>
            /// Enum Vimeooauth1 for value: vimeo_oauth1
            /// </summary>
            [EnumMember(Value = "vimeo_oauth1")]
            Vimeooauth1 = 1

        }

        /// <summary>
        /// The grant type. The value of this field must be &#x60;vimeo_oauth1&#x60;.
        /// </summary>
        /// <value>The grant type. The value of this field must be &#x60;vimeo_oauth1&#x60;.</value>
        [DataMember(Name="grant_type", EmitDefaultValue=false)]
        public GrantTypeEnum GrantType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject29" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject29() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject29" /> class.
        /// </summary>
        /// <param name="grantType">The grant type. The value of this field must be &#x60;vimeo_oauth1&#x60;. (required).</param>
        /// <param name="token">The OAuth 1 token. (required).</param>
        /// <param name="tokenSecret">The OAuth 1 token secret. (required).</param>
        public InlineObject29(GrantTypeEnum grantType = default(GrantTypeEnum), string token = default(string), string tokenSecret = default(string))
        {
            this.GrantType = grantType;
            // to ensure "token" is required (not null)
            this.Token = token ?? throw new ArgumentNullException("token is a required property for InlineObject29 and cannot be null");
            // to ensure "tokenSecret" is required (not null)
            this.TokenSecret = tokenSecret ?? throw new ArgumentNullException("tokenSecret is a required property for InlineObject29 and cannot be null");
        }
        
        /// <summary>
        /// The OAuth 1 token.
        /// </summary>
        /// <value>The OAuth 1 token.</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The OAuth 1 token secret.
        /// </summary>
        /// <value>The OAuth 1 token secret.</value>
        [DataMember(Name="token_secret", EmitDefaultValue=false)]
        public string TokenSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject29 {\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TokenSecret: ").Append(TokenSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject29);
        }

        /// <summary>
        /// Returns true if InlineObject29 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject29 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject29 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GrantType == input.GrantType ||
                    this.GrantType.Equals(input.GrantType)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.TokenSecret == input.TokenSecret ||
                    (this.TokenSecret != null &&
                    this.TokenSecret.Equals(input.TokenSecret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.GrantType.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.TokenSecret != null)
                    hashCode = hashCode * 59 + this.TokenSecret.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
