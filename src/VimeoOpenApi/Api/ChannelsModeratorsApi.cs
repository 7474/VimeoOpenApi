/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsModeratorsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a specific moderator to a channel
        /// </summary>
        /// <remarks>
        /// This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        void AddChannelModerator (decimal channelId, decimal userId);

        /// <summary>
        /// Add a specific moderator to a channel
        /// </summary>
        /// <remarks>
        /// This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddChannelModeratorWithHttpInfo (decimal channelId, decimal userId);
        /// <summary>
        /// Add a list of moderators to a channel
        /// </summary>
        /// <remarks>
        /// This method adds multiple users as moderators to the specified channel. The authenticated user must be a follower of a requested user to add this person as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject3"></param>
        /// <returns></returns>
        void AddChannelModerators (decimal channelId, InlineObject3 inlineObject3);

        /// <summary>
        /// Add a list of moderators to a channel
        /// </summary>
        /// <remarks>
        /// This method adds multiple users as moderators to the specified channel. The authenticated user must be a follower of a requested user to add this person as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject3"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddChannelModeratorsWithHttpInfo (decimal channelId, InlineObject3 inlineObject3);
        /// <summary>
        /// Get a specific moderator of a channel
        /// </summary>
        /// <remarks>
        /// This method returns a single moderator of the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>User</returns>
        User GetChannelModerator (decimal channelId, decimal userId);

        /// <summary>
        /// Get a specific moderator of a channel
        /// </summary>
        /// <remarks>
        /// This method returns a single moderator of the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetChannelModeratorWithHttpInfo (decimal channelId, decimal userId);
        /// <summary>
        /// Get all the moderators of a channel
        /// </summary>
        /// <remarks>
        /// This method returns every moderator of the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date added.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetChannelModerators (decimal channelId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the moderators of a channel
        /// </summary>
        /// <remarks>
        /// This method returns every moderator of the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date added.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetChannelModeratorsWithHttpInfo (decimal channelId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Remove a specific moderator from a channel
        /// </summary>
        /// <remarks>
        /// This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        void RemoveChannelModerator (decimal channelId, decimal userId);

        /// <summary>
        /// Remove a specific moderator from a channel
        /// </summary>
        /// <remarks>
        /// This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveChannelModeratorWithHttpInfo (decimal channelId, decimal userId);
        /// <summary>
        /// Remove a list of moderators from a channel
        /// </summary>
        /// <remarks>
        /// This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject4"></param>
        /// <returns></returns>
        void RemoveChannelModerators (decimal channelId, InlineObject4 inlineObject4);

        /// <summary>
        /// Remove a list of moderators from a channel
        /// </summary>
        /// <remarks>
        /// This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject4"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveChannelModeratorsWithHttpInfo (decimal channelId, InlineObject4 inlineObject4);
        /// <summary>
        /// Replace the moderators of a channel
        /// </summary>
        /// <remarks>
        /// This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject5"></param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> ReplaceChannelModerators (decimal channelId, InlineObject5 inlineObject5);

        /// <summary>
        /// Replace the moderators of a channel
        /// </summary>
        /// <remarks>
        /// This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject5"></param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> ReplaceChannelModeratorsWithHttpInfo (decimal channelId, InlineObject5 inlineObject5);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsModeratorsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a specific moderator to a channel
        /// </summary>
        /// <remarks>
        /// This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddChannelModeratorAsync (decimal channelId, decimal userId);

        /// <summary>
        /// Add a specific moderator to a channel
        /// </summary>
        /// <remarks>
        /// This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddChannelModeratorAsyncWithHttpInfo (decimal channelId, decimal userId);
        /// <summary>
        /// Add a list of moderators to a channel
        /// </summary>
        /// <remarks>
        /// This method adds multiple users as moderators to the specified channel. The authenticated user must be a follower of a requested user to add this person as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddChannelModeratorsAsync (decimal channelId, InlineObject3 inlineObject3);

        /// <summary>
        /// Add a list of moderators to a channel
        /// </summary>
        /// <remarks>
        /// This method adds multiple users as moderators to the specified channel. The authenticated user must be a follower of a requested user to add this person as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddChannelModeratorsAsyncWithHttpInfo (decimal channelId, InlineObject3 inlineObject3);
        /// <summary>
        /// Get a specific moderator of a channel
        /// </summary>
        /// <remarks>
        /// This method returns a single moderator of the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetChannelModeratorAsync (decimal channelId, decimal userId);

        /// <summary>
        /// Get a specific moderator of a channel
        /// </summary>
        /// <remarks>
        /// This method returns a single moderator of the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetChannelModeratorAsyncWithHttpInfo (decimal channelId, decimal userId);
        /// <summary>
        /// Get all the moderators of a channel
        /// </summary>
        /// <remarks>
        /// This method returns every moderator of the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date added.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetChannelModeratorsAsync (decimal channelId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the moderators of a channel
        /// </summary>
        /// <remarks>
        /// This method returns every moderator of the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date added.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetChannelModeratorsAsyncWithHttpInfo (decimal channelId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Remove a specific moderator from a channel
        /// </summary>
        /// <remarks>
        /// This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveChannelModeratorAsync (decimal channelId, decimal userId);

        /// <summary>
        /// Remove a specific moderator from a channel
        /// </summary>
        /// <remarks>
        /// This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveChannelModeratorAsyncWithHttpInfo (decimal channelId, decimal userId);
        /// <summary>
        /// Remove a list of moderators from a channel
        /// </summary>
        /// <remarks>
        /// This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveChannelModeratorsAsync (decimal channelId, InlineObject4 inlineObject4);

        /// <summary>
        /// Remove a list of moderators from a channel
        /// </summary>
        /// <remarks>
        /// This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveChannelModeratorsAsyncWithHttpInfo (decimal channelId, InlineObject4 inlineObject4);
        /// <summary>
        /// Replace the moderators of a channel
        /// </summary>
        /// <remarks>
        /// This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> ReplaceChannelModeratorsAsync (decimal channelId, InlineObject5 inlineObject5);

        /// <summary>
        /// Replace the moderators of a channel
        /// </summary>
        /// <remarks>
        /// This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> ReplaceChannelModeratorsAsyncWithHttpInfo (decimal channelId, InlineObject5 inlineObject5);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsModeratorsApi : IChannelsModeratorsApiSync, IChannelsModeratorsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelsModeratorsApi : IChannelsModeratorsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsModeratorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelsModeratorsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsModeratorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelsModeratorsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsModeratorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelsModeratorsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsModeratorsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChannelsModeratorsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a specific moderator to a channel This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        public void AddChannelModerator (decimal channelId, decimal userId)
        {
             AddChannelModeratorWithHttpInfo(channelId, userId);
        }

        /// <summary>
        /// Add a specific moderator to a channel This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> AddChannelModeratorWithHttpInfo (decimal channelId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/channels/{channel_id}/moderators/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChannelModerator", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a specific moderator to a channel This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddChannelModeratorAsync (decimal channelId, decimal userId)
        {
             await AddChannelModeratorAsyncWithHttpInfo(channelId, userId);

        }

        /// <summary>
        /// Add a specific moderator to a channel This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> AddChannelModeratorAsyncWithHttpInfo (decimal channelId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/channels/{channel_id}/moderators/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChannelModerator", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of moderators to a channel This method adds multiple users as moderators to the specified channel. The authenticated user must be a follower of a requested user to add this person as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject3"></param>
        /// <returns></returns>
        public void AddChannelModerators (decimal channelId, InlineObject3 inlineObject3)
        {
             AddChannelModeratorsWithHttpInfo(channelId, inlineObject3);
        }

        /// <summary>
        /// Add a list of moderators to a channel This method adds multiple users as moderators to the specified channel. The authenticated user must be a follower of a requested user to add this person as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject3"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> AddChannelModeratorsWithHttpInfo (decimal channelId, InlineObject3 inlineObject3)
        {
            // verify the required parameter 'inlineObject3' is set
            if (inlineObject3 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject3' when calling ChannelsModeratorsApi->AddChannelModerators");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.Data = inlineObject3;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/channels/{channel_id}/moderators", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChannelModerators", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of moderators to a channel This method adds multiple users as moderators to the specified channel. The authenticated user must be a follower of a requested user to add this person as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddChannelModeratorsAsync (decimal channelId, InlineObject3 inlineObject3)
        {
             await AddChannelModeratorsAsyncWithHttpInfo(channelId, inlineObject3);

        }

        /// <summary>
        /// Add a list of moderators to a channel This method adds multiple users as moderators to the specified channel. The authenticated user must be a follower of a requested user to add this person as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> AddChannelModeratorsAsyncWithHttpInfo (decimal channelId, InlineObject3 inlineObject3)
        {
            // verify the required parameter 'inlineObject3' is set
            if (inlineObject3 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject3' when calling ChannelsModeratorsApi->AddChannelModerators");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.Data = inlineObject3;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/channels/{channel_id}/moderators", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChannelModerators", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific moderator of a channel This method returns a single moderator of the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>User</returns>
        public User GetChannelModerator (decimal channelId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<User> localVarResponse = GetChannelModeratorWithHttpInfo(channelId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific moderator of a channel This method returns a single moderator of the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of User</returns>
        public VimeoOpenApi.Client.ApiResponse< User > GetChannelModeratorWithHttpInfo (decimal channelId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< User >("/channels/{channel_id}/moderators/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelModerator", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific moderator of a channel This method returns a single moderator of the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetChannelModeratorAsync (decimal channelId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<User> localVarResponse = await GetChannelModeratorAsyncWithHttpInfo(channelId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific moderator of a channel This method returns a single moderator of the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<User>> GetChannelModeratorAsyncWithHttpInfo (decimal channelId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/channels/{channel_id}/moderators/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelModerator", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the moderators of a channel This method returns every moderator of the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date added.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetChannelModerators (decimal channelId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = GetChannelModeratorsWithHttpInfo(channelId, direction, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the moderators of a channel This method returns every moderator of the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date added.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<User> > GetChannelModeratorsWithHttpInfo (decimal channelId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<User> >("/channels/{channel_id}/moderators", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelModerators", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the moderators of a channel This method returns every moderator of the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date added.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetChannelModeratorsAsync (decimal channelId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = await GetChannelModeratorsAsyncWithHttpInfo(channelId, direction, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the moderators of a channel This method returns every moderator of the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date added.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<User>>> GetChannelModeratorsAsyncWithHttpInfo (decimal channelId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/channels/{channel_id}/moderators", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelModerators", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific moderator from a channel This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        public void RemoveChannelModerator (decimal channelId, decimal userId)
        {
             RemoveChannelModeratorWithHttpInfo(channelId, userId);
        }

        /// <summary>
        /// Remove a specific moderator from a channel This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> RemoveChannelModeratorWithHttpInfo (decimal channelId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/channels/{channel_id}/moderators/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChannelModerator", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific moderator from a channel This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveChannelModeratorAsync (decimal channelId, decimal userId)
        {
             await RemoveChannelModeratorAsyncWithHttpInfo(channelId, userId);

        }

        /// <summary>
        /// Remove a specific moderator from a channel This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> RemoveChannelModeratorAsyncWithHttpInfo (decimal channelId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/channels/{channel_id}/moderators/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChannelModerator", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a list of moderators from a channel This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject4"></param>
        /// <returns></returns>
        public void RemoveChannelModerators (decimal channelId, InlineObject4 inlineObject4)
        {
             RemoveChannelModeratorsWithHttpInfo(channelId, inlineObject4);
        }

        /// <summary>
        /// Remove a list of moderators from a channel This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject4"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> RemoveChannelModeratorsWithHttpInfo (decimal channelId, InlineObject4 inlineObject4)
        {
            // verify the required parameter 'inlineObject4' is set
            if (inlineObject4 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject4' when calling ChannelsModeratorsApi->RemoveChannelModerators");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.user+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.Data = inlineObject4;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/channels/{channel_id}/moderators", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChannelModerators", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a list of moderators from a channel This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveChannelModeratorsAsync (decimal channelId, InlineObject4 inlineObject4)
        {
             await RemoveChannelModeratorsAsyncWithHttpInfo(channelId, inlineObject4);

        }

        /// <summary>
        /// Remove a list of moderators from a channel This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject4"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> RemoveChannelModeratorsAsyncWithHttpInfo (decimal channelId, InlineObject4 inlineObject4)
        {
            // verify the required parameter 'inlineObject4' is set
            if (inlineObject4 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject4' when calling ChannelsModeratorsApi->RemoveChannelModerators");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.user+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.Data = inlineObject4;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/channels/{channel_id}/moderators", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveChannelModerators", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace the moderators of a channel This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject5"></param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> ReplaceChannelModerators (decimal channelId, InlineObject5 inlineObject5)
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = ReplaceChannelModeratorsWithHttpInfo(channelId, inlineObject5);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace the moderators of a channel This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject5"></param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<User> > ReplaceChannelModeratorsWithHttpInfo (decimal channelId, InlineObject5 inlineObject5)
        {
            // verify the required parameter 'inlineObject5' is set
            if (inlineObject5 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject5' when calling ChannelsModeratorsApi->ReplaceChannelModerators");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.Data = inlineObject5;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< List<User> >("/channels/{channel_id}/moderators", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceChannelModerators", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace the moderators of a channel This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> ReplaceChannelModeratorsAsync (decimal channelId, InlineObject5 inlineObject5)
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = await ReplaceChannelModeratorsAsyncWithHttpInfo(channelId, inlineObject5);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace the moderators of a channel This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject5"></param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<User>>> ReplaceChannelModeratorsAsyncWithHttpInfo (decimal channelId, InlineObject5 inlineObject5)
        {
            // verify the required parameter 'inlineObject5' is set
            if (inlineObject5 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject5' when calling ChannelsModeratorsApi->ReplaceChannelModerators");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.Data = inlineObject5;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<List<User>>("/channels/{channel_id}/moderators", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceChannelModerators", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
