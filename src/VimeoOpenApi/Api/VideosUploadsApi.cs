/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosUploadsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Complete a streaming upload
        /// </summary>
        /// <remarks>
        /// This method completes the specified streaming upload of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the streaming upload.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="signature">The crypto signature of the completed upload.</param>
        /// <param name="videoFileId">The ID of the uploaded file.</param>
        /// <returns></returns>
        void CompleteStreamingUpload (decimal uploadId, decimal userId, string signature, decimal videoFileId);

        /// <summary>
        /// Complete a streaming upload
        /// </summary>
        /// <remarks>
        /// This method completes the specified streaming upload of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the streaming upload.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="signature">The crypto signature of the completed upload.</param>
        /// <param name="videoFileId">The ID of the uploaded file.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CompleteStreamingUploadWithHttpInfo (decimal uploadId, decimal userId, string signature, decimal videoFileId);
        /// <summary>
        /// Get an upload attempt
        /// </summary>
        /// <remarks>
        /// This method returns the specified upload attempt of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the upload attempt.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>UploadAttempt</returns>
        UploadAttempt GetUploadAttempt (decimal uploadId, decimal userId);

        /// <summary>
        /// Get an upload attempt
        /// </summary>
        /// <remarks>
        /// This method returns the specified upload attempt of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the upload attempt.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of UploadAttempt</returns>
        ApiResponse<UploadAttempt> GetUploadAttemptWithHttpInfo (decimal uploadId, decimal userId);
        /// <summary>
        /// Upload a video
        /// </summary>
        /// <remarks>
        /// This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject50"></param>
        /// <returns>Video</returns>
        Video UploadVideo (decimal userId, InlineObject50 inlineObject50);

        /// <summary>
        /// Upload a video
        /// </summary>
        /// <remarks>
        /// This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject50"></param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> UploadVideoWithHttpInfo (decimal userId, InlineObject50 inlineObject50);
        /// <summary>
        /// Upload a video
        /// </summary>
        /// <remarks>
        /// This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject26"></param>
        /// <returns>Video</returns>
        Video UploadVideoAlt1 (InlineObject26 inlineObject26);

        /// <summary>
        /// Upload a video
        /// </summary>
        /// <remarks>
        /// This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject26"></param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> UploadVideoAlt1WithHttpInfo (InlineObject26 inlineObject26);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosUploadsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Complete a streaming upload
        /// </summary>
        /// <remarks>
        /// This method completes the specified streaming upload of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the streaming upload.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="signature">The crypto signature of the completed upload.</param>
        /// <param name="videoFileId">The ID of the uploaded file.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CompleteStreamingUploadAsync (decimal uploadId, decimal userId, string signature, decimal videoFileId);

        /// <summary>
        /// Complete a streaming upload
        /// </summary>
        /// <remarks>
        /// This method completes the specified streaming upload of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the streaming upload.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="signature">The crypto signature of the completed upload.</param>
        /// <param name="videoFileId">The ID of the uploaded file.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CompleteStreamingUploadAsyncWithHttpInfo (decimal uploadId, decimal userId, string signature, decimal videoFileId);
        /// <summary>
        /// Get an upload attempt
        /// </summary>
        /// <remarks>
        /// This method returns the specified upload attempt of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the upload attempt.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of UploadAttempt</returns>
        System.Threading.Tasks.Task<UploadAttempt> GetUploadAttemptAsync (decimal uploadId, decimal userId);

        /// <summary>
        /// Get an upload attempt
        /// </summary>
        /// <remarks>
        /// This method returns the specified upload attempt of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the upload attempt.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (UploadAttempt)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadAttempt>> GetUploadAttemptAsyncWithHttpInfo (decimal uploadId, decimal userId);
        /// <summary>
        /// Upload a video
        /// </summary>
        /// <remarks>
        /// This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject50"></param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> UploadVideoAsync (decimal userId, InlineObject50 inlineObject50);

        /// <summary>
        /// Upload a video
        /// </summary>
        /// <remarks>
        /// This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject50"></param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> UploadVideoAsyncWithHttpInfo (decimal userId, InlineObject50 inlineObject50);
        /// <summary>
        /// Upload a video
        /// </summary>
        /// <remarks>
        /// This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject26"></param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> UploadVideoAlt1Async (InlineObject26 inlineObject26);

        /// <summary>
        /// Upload a video
        /// </summary>
        /// <remarks>
        /// This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject26"></param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> UploadVideoAlt1AsyncWithHttpInfo (InlineObject26 inlineObject26);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosUploadsApi : IVideosUploadsApiSync, IVideosUploadsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VideosUploadsApi : IVideosUploadsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosUploadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosUploadsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosUploadsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosUploadsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosUploadsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VideosUploadsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosUploadsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VideosUploadsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Complete a streaming upload This method completes the specified streaming upload of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the streaming upload.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="signature">The crypto signature of the completed upload.</param>
        /// <param name="videoFileId">The ID of the uploaded file.</param>
        /// <returns></returns>
        public void CompleteStreamingUpload (decimal uploadId, decimal userId, string signature, decimal videoFileId)
        {
             CompleteStreamingUploadWithHttpInfo(uploadId, userId, signature, videoFileId);
        }

        /// <summary>
        /// Complete a streaming upload This method completes the specified streaming upload of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the streaming upload.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="signature">The crypto signature of the completed upload.</param>
        /// <param name="videoFileId">The ID of the uploaded file.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> CompleteStreamingUploadWithHttpInfo (decimal uploadId, decimal userId, string signature, decimal videoFileId)
        {
            // verify the required parameter 'signature' is set
            if (signature == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'signature' when calling VideosUploadsApi->CompleteStreamingUpload");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("upload_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(uploadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "video_file_id", videoFileId));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_id}/uploads/{upload_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteStreamingUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete a streaming upload This method completes the specified streaming upload of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the streaming upload.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="signature">The crypto signature of the completed upload.</param>
        /// <param name="videoFileId">The ID of the uploaded file.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CompleteStreamingUploadAsync (decimal uploadId, decimal userId, string signature, decimal videoFileId)
        {
             await CompleteStreamingUploadAsyncWithHttpInfo(uploadId, userId, signature, videoFileId);

        }

        /// <summary>
        /// Complete a streaming upload This method completes the specified streaming upload of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the streaming upload.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="signature">The crypto signature of the completed upload.</param>
        /// <param name="videoFileId">The ID of the uploaded file.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> CompleteStreamingUploadAsyncWithHttpInfo (decimal uploadId, decimal userId, string signature, decimal videoFileId)
        {
            // verify the required parameter 'signature' is set
            if (signature == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'signature' when calling VideosUploadsApi->CompleteStreamingUpload");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("upload_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(uploadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "signature", signature));
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "video_file_id", videoFileId));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_id}/uploads/{upload_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteStreamingUpload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an upload attempt This method returns the specified upload attempt of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the upload attempt.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>UploadAttempt</returns>
        public UploadAttempt GetUploadAttempt (decimal uploadId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<UploadAttempt> localVarResponse = GetUploadAttemptWithHttpInfo(uploadId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an upload attempt This method returns the specified upload attempt of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the upload attempt.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of UploadAttempt</returns>
        public VimeoOpenApi.Client.ApiResponse< UploadAttempt > GetUploadAttemptWithHttpInfo (decimal uploadId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.uploadattempt+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("upload_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(uploadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< UploadAttempt >("/users/{user_id}/uploads/{upload_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUploadAttempt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an upload attempt This method returns the specified upload attempt of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the upload attempt.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of UploadAttempt</returns>
        public async System.Threading.Tasks.Task<UploadAttempt> GetUploadAttemptAsync (decimal uploadId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<UploadAttempt> localVarResponse = await GetUploadAttemptAsyncWithHttpInfo(uploadId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an upload attempt This method returns the specified upload attempt of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uploadId">The ID of the upload attempt.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (UploadAttempt)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<UploadAttempt>> GetUploadAttemptAsyncWithHttpInfo (decimal uploadId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.uploadattempt+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("upload_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(uploadId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UploadAttempt>("/users/{user_id}/uploads/{upload_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUploadAttempt", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a video This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject50"></param>
        /// <returns>Video</returns>
        public Video UploadVideo (decimal userId, InlineObject50 inlineObject50)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = UploadVideoWithHttpInfo(userId, inlineObject50);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a video This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject50"></param>
        /// <returns>ApiResponse of Video</returns>
        public VimeoOpenApi.Client.ApiResponse< Video > UploadVideoWithHttpInfo (decimal userId, InlineObject50 inlineObject50)
        {
            // verify the required parameter 'inlineObject50' is set
            if (inlineObject50 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject50' when calling VideosUploadsApi->UploadVideo");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject50;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Video >("/users/{user_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a video This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject50"></param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> UploadVideoAsync (decimal userId, InlineObject50 inlineObject50)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = await UploadVideoAsyncWithHttpInfo(userId, inlineObject50);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a video This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject50"></param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Video>> UploadVideoAsyncWithHttpInfo (decimal userId, InlineObject50 inlineObject50)
        {
            // verify the required parameter 'inlineObject50' is set
            if (inlineObject50 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject50' when calling VideosUploadsApi->UploadVideo");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject50;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Video>("/users/{user_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a video This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject26"></param>
        /// <returns>Video</returns>
        public Video UploadVideoAlt1 (InlineObject26 inlineObject26)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = UploadVideoAlt1WithHttpInfo(inlineObject26);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a video This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject26"></param>
        /// <returns>ApiResponse of Video</returns>
        public VimeoOpenApi.Client.ApiResponse< Video > UploadVideoAlt1WithHttpInfo (InlineObject26 inlineObject26)
        {
            // verify the required parameter 'inlineObject26' is set
            if (inlineObject26 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject26' when calling VideosUploadsApi->UploadVideoAlt1");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject26;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Video >("/me/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a video This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject26"></param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> UploadVideoAlt1Async (InlineObject26 inlineObject26)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = await UploadVideoAlt1AsyncWithHttpInfo(inlineObject26);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a video This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject26"></param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Video>> UploadVideoAlt1AsyncWithHttpInfo (InlineObject26 inlineObject26)
        {
            // verify the required parameter 'inlineObject26' is set
            if (inlineObject26 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject26' when calling VideosUploadsApi->UploadVideoAlt1");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject26;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Video>("/me/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
