/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbedPresetsCustomLogosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        Picture CreateCustomLogo (decimal userId);

        /// <summary>
        /// Add a custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> CreateCustomLogoWithHttpInfo (decimal userId);
        /// <summary>
        /// Add a custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Picture</returns>
        Picture CreateCustomLogoAlt1 ();

        /// <summary>
        /// Add a custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> CreateCustomLogoAlt1WithHttpInfo ();
        /// <summary>
        /// Get a specific custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        Picture GetCustomLogo (decimal logoId, decimal userId);

        /// <summary>
        /// Get a specific custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> GetCustomLogoWithHttpInfo (decimal logoId, decimal userId);
        /// <summary>
        /// Get a specific custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <returns>Picture</returns>
        Picture GetCustomLogoAlt1 (decimal logoId);

        /// <summary>
        /// Get a specific custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> GetCustomLogoAlt1WithHttpInfo (decimal logoId);
        /// <summary>
        /// Get all the custom logos that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>List&lt;Picture&gt;</returns>
        List<Picture> GetCustomLogos (decimal userId);

        /// <summary>
        /// Get all the custom logos that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        ApiResponse<List<Picture>> GetCustomLogosWithHttpInfo (decimal userId);
        /// <summary>
        /// Get all the custom logos that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Picture&gt;</returns>
        List<Picture> GetCustomLogosAlt1 ();

        /// <summary>
        /// Get all the custom logos that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        ApiResponse<List<Picture>> GetCustomLogosAlt1WithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbedPresetsCustomLogosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> CreateCustomLogoAsync (decimal userId);

        /// <summary>
        /// Add a custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> CreateCustomLogoAsyncWithHttpInfo (decimal userId);
        /// <summary>
        /// Add a custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> CreateCustomLogoAlt1Async ();

        /// <summary>
        /// Add a custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> CreateCustomLogoAlt1AsyncWithHttpInfo ();
        /// <summary>
        /// Get a specific custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> GetCustomLogoAsync (decimal logoId, decimal userId);

        /// <summary>
        /// Get a specific custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> GetCustomLogoAsyncWithHttpInfo (decimal logoId, decimal userId);
        /// <summary>
        /// Get a specific custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> GetCustomLogoAlt1Async (decimal logoId);

        /// <summary>
        /// Get a specific custom logo for the user
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> GetCustomLogoAlt1AsyncWithHttpInfo (decimal logoId);
        /// <summary>
        /// Get all the custom logos that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        System.Threading.Tasks.Task<List<Picture>> GetCustomLogosAsync (decimal userId);

        /// <summary>
        /// Get all the custom logos that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Picture>>> GetCustomLogosAsyncWithHttpInfo (decimal userId);
        /// <summary>
        /// Get all the custom logos that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        System.Threading.Tasks.Task<List<Picture>> GetCustomLogosAlt1Async ();

        /// <summary>
        /// Get all the custom logos that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Picture>>> GetCustomLogosAlt1AsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbedPresetsCustomLogosApi : IEmbedPresetsCustomLogosApiSync, IEmbedPresetsCustomLogosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmbedPresetsCustomLogosApi : IEmbedPresetsCustomLogosApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedPresetsCustomLogosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmbedPresetsCustomLogosApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedPresetsCustomLogosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmbedPresetsCustomLogosApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedPresetsCustomLogosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmbedPresetsCustomLogosApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedPresetsCustomLogosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmbedPresetsCustomLogosApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a custom logo for the user This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        public Picture CreateCustomLogo (decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = CreateCustomLogoWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a custom logo for the user This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > CreateCustomLogoWithHttpInfo (decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Picture >("/users/{user_id}/customlogos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a custom logo for the user This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> CreateCustomLogoAsync (decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await CreateCustomLogoAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a custom logo for the user This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> CreateCustomLogoAsyncWithHttpInfo (decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Picture>("/users/{user_id}/customlogos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a custom logo for the user This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Picture</returns>
        public Picture CreateCustomLogoAlt1 ()
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = CreateCustomLogoAlt1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a custom logo for the user This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > CreateCustomLogoAlt1WithHttpInfo ()
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Picture >("/me/customlogos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomLogoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a custom logo for the user This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> CreateCustomLogoAlt1Async ()
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await CreateCustomLogoAlt1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a custom logo for the user This method adds a custom logo representing the authenticated user for display in the embedded player.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> CreateCustomLogoAlt1AsyncWithHttpInfo ()
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Picture>("/me/customlogos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomLogoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific custom logo for the user This method returns a single custom logo belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        public Picture GetCustomLogo (decimal logoId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = GetCustomLogoWithHttpInfo(logoId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific custom logo for the user This method returns a single custom logo belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > GetCustomLogoWithHttpInfo (decimal logoId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("logo_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(logoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Picture >("/users/{user_id}/customlogos/{logo_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific custom logo for the user This method returns a single custom logo belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> GetCustomLogoAsync (decimal logoId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await GetCustomLogoAsyncWithHttpInfo(logoId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific custom logo for the user This method returns a single custom logo belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> GetCustomLogoAsyncWithHttpInfo (decimal logoId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("logo_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(logoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Picture>("/users/{user_id}/customlogos/{logo_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific custom logo for the user This method returns a single custom logo belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <returns>Picture</returns>
        public Picture GetCustomLogoAlt1 (decimal logoId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = GetCustomLogoAlt1WithHttpInfo(logoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific custom logo for the user This method returns a single custom logo belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > GetCustomLogoAlt1WithHttpInfo (decimal logoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("logo_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(logoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Picture >("/me/customlogos/{logo_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomLogoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific custom logo for the user This method returns a single custom logo belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> GetCustomLogoAlt1Async (decimal logoId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await GetCustomLogoAlt1AsyncWithHttpInfo(logoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific custom logo for the user This method returns a single custom logo belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> GetCustomLogoAlt1AsyncWithHttpInfo (decimal logoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("logo_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(logoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Picture>("/me/customlogos/{logo_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomLogoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the custom logos that belong to the user This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>List&lt;Picture&gt;</returns>
        public List<Picture> GetCustomLogos (decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = GetCustomLogosWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the custom logos that belong to the user This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Picture> > GetCustomLogosWithHttpInfo (decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Picture> >("/users/{user_id}/customlogos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomLogos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the custom logos that belong to the user This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        public async System.Threading.Tasks.Task<List<Picture>> GetCustomLogosAsync (decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = await GetCustomLogosAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the custom logos that belong to the user This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Picture>>> GetCustomLogosAsyncWithHttpInfo (decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Picture>>("/users/{user_id}/customlogos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomLogos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the custom logos that belong to the user This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Picture&gt;</returns>
        public List<Picture> GetCustomLogosAlt1 ()
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = GetCustomLogosAlt1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the custom logos that belong to the user This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Picture> > GetCustomLogosAlt1WithHttpInfo ()
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Picture> >("/me/customlogos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomLogosAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the custom logos that belong to the user This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        public async System.Threading.Tasks.Task<List<Picture>> GetCustomLogosAlt1Async ()
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = await GetCustomLogosAlt1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the custom logos that belong to the user This method returns every custom logo that belongs to the authenticated user or team owner.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Picture>>> GetCustomLogosAlt1AsyncWithHttpInfo ()
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Picture>>("/me/customlogos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomLogosAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
