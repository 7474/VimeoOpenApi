/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersVideosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a specific video to a folder
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void AddVideoToProject (decimal projectId, decimal userId, decimal videoId);

        /// <summary>
        /// Add a specific video to a folder
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddVideoToProjectWithHttpInfo (decimal projectId, decimal userId, decimal videoId);
        /// <summary>
        /// Add a specific video to a folder
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void AddVideoToProjectAlt1 (decimal projectId, decimal videoId);

        /// <summary>
        /// Add a specific video to a folder
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddVideoToProjectAlt1WithHttpInfo (decimal projectId, decimal videoId);
        /// <summary>
        /// Add a list of videos to a folder
        /// </summary>
        /// <remarks>
        /// This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns></returns>
        void AddVideosToProject (decimal projectId, decimal userId, string uris);

        /// <summary>
        /// Add a list of videos to a folder
        /// </summary>
        /// <remarks>
        /// This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddVideosToProjectWithHttpInfo (decimal projectId, decimal userId, string uris);
        /// <summary>
        /// Add a list of videos to a folder
        /// </summary>
        /// <remarks>
        /// This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns></returns>
        void AddVideosToProjectAlt1 (decimal projectId, string uris);

        /// <summary>
        /// Add a list of videos to a folder
        /// </summary>
        /// <remarks>
        /// This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddVideosToProjectAlt1WithHttpInfo (decimal projectId, string uris);
        /// <summary>
        /// Get all the videos in a folder
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that belong to the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetProjectVideos (decimal projectId, decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos in a folder
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that belong to the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetProjectVideosWithHttpInfo (decimal projectId, decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the videos in a folder
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that belong to the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetProjectVideosAlt1 (decimal projectId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos in a folder
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that belong to the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetProjectVideosAlt1WithHttpInfo (decimal projectId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Remove a specific video from a folder
        /// </summary>
        /// <remarks>
        /// This method removes a single video from the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void RemoveVideoFromProject (decimal projectId, decimal userId, decimal videoId);

        /// <summary>
        /// Remove a specific video from a folder
        /// </summary>
        /// <remarks>
        /// This method removes a single video from the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveVideoFromProjectWithHttpInfo (decimal projectId, decimal userId, decimal videoId);
        /// <summary>
        /// Remove a specific video from a folder
        /// </summary>
        /// <remarks>
        /// This method removes a single video from the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void RemoveVideoFromProjectAlt1 (decimal projectId, decimal videoId);

        /// <summary>
        /// Remove a specific video from a folder
        /// </summary>
        /// <remarks>
        /// This method removes a single video from the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveVideoFromProjectAlt1WithHttpInfo (decimal projectId, decimal videoId);
        /// <summary>
        /// Remove a list of videos from a folder
        /// </summary>
        /// <remarks>
        /// This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns></returns>
        void RemoveVideosFromProject (decimal projectId, decimal userId, string uris, bool? shouldDeleteClips = default(bool?));

        /// <summary>
        /// Remove a list of videos from a folder
        /// </summary>
        /// <remarks>
        /// This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveVideosFromProjectWithHttpInfo (decimal projectId, decimal userId, string uris, bool? shouldDeleteClips = default(bool?));
        /// <summary>
        /// Remove a list of videos from a folder
        /// </summary>
        /// <remarks>
        /// This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns></returns>
        void RemoveVideosFromProjectAlt1 (decimal projectId, string uris, bool? shouldDeleteClips = default(bool?));

        /// <summary>
        /// Remove a list of videos from a folder
        /// </summary>
        /// <remarks>
        /// This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveVideosFromProjectAlt1WithHttpInfo (decimal projectId, string uris, bool? shouldDeleteClips = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersVideosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a specific video to a folder
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddVideoToProjectAsync (decimal projectId, decimal userId, decimal videoId);

        /// <summary>
        /// Add a specific video to a folder
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddVideoToProjectAsyncWithHttpInfo (decimal projectId, decimal userId, decimal videoId);
        /// <summary>
        /// Add a specific video to a folder
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddVideoToProjectAlt1Async (decimal projectId, decimal videoId);

        /// <summary>
        /// Add a specific video to a folder
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddVideoToProjectAlt1AsyncWithHttpInfo (decimal projectId, decimal videoId);
        /// <summary>
        /// Add a list of videos to a folder
        /// </summary>
        /// <remarks>
        /// This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddVideosToProjectAsync (decimal projectId, decimal userId, string uris);

        /// <summary>
        /// Add a list of videos to a folder
        /// </summary>
        /// <remarks>
        /// This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddVideosToProjectAsyncWithHttpInfo (decimal projectId, decimal userId, string uris);
        /// <summary>
        /// Add a list of videos to a folder
        /// </summary>
        /// <remarks>
        /// This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddVideosToProjectAlt1Async (decimal projectId, string uris);

        /// <summary>
        /// Add a list of videos to a folder
        /// </summary>
        /// <remarks>
        /// This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddVideosToProjectAlt1AsyncWithHttpInfo (decimal projectId, string uris);
        /// <summary>
        /// Get all the videos in a folder
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that belong to the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetProjectVideosAsync (decimal projectId, decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos in a folder
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that belong to the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetProjectVideosAsyncWithHttpInfo (decimal projectId, decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the videos in a folder
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that belong to the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetProjectVideosAlt1Async (decimal projectId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos in a folder
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that belong to the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetProjectVideosAlt1AsyncWithHttpInfo (decimal projectId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Remove a specific video from a folder
        /// </summary>
        /// <remarks>
        /// This method removes a single video from the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveVideoFromProjectAsync (decimal projectId, decimal userId, decimal videoId);

        /// <summary>
        /// Remove a specific video from a folder
        /// </summary>
        /// <remarks>
        /// This method removes a single video from the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveVideoFromProjectAsyncWithHttpInfo (decimal projectId, decimal userId, decimal videoId);
        /// <summary>
        /// Remove a specific video from a folder
        /// </summary>
        /// <remarks>
        /// This method removes a single video from the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveVideoFromProjectAlt1Async (decimal projectId, decimal videoId);

        /// <summary>
        /// Remove a specific video from a folder
        /// </summary>
        /// <remarks>
        /// This method removes a single video from the specified folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveVideoFromProjectAlt1AsyncWithHttpInfo (decimal projectId, decimal videoId);
        /// <summary>
        /// Remove a list of videos from a folder
        /// </summary>
        /// <remarks>
        /// This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveVideosFromProjectAsync (decimal projectId, decimal userId, string uris, bool? shouldDeleteClips = default(bool?));

        /// <summary>
        /// Remove a list of videos from a folder
        /// </summary>
        /// <remarks>
        /// This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveVideosFromProjectAsyncWithHttpInfo (decimal projectId, decimal userId, string uris, bool? shouldDeleteClips = default(bool?));
        /// <summary>
        /// Remove a list of videos from a folder
        /// </summary>
        /// <remarks>
        /// This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveVideosFromProjectAlt1Async (decimal projectId, string uris, bool? shouldDeleteClips = default(bool?));

        /// <summary>
        /// Remove a list of videos from a folder
        /// </summary>
        /// <remarks>
        /// This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveVideosFromProjectAlt1AsyncWithHttpInfo (decimal projectId, string uris, bool? shouldDeleteClips = default(bool?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersVideosApi : IFoldersVideosApiSync, IFoldersVideosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersVideosApi : IFoldersVideosApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersVideosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersVideosApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersVideosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersVideosApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersVideosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersVideosApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersVideosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FoldersVideosApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a specific video to a folder This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void AddVideoToProject (decimal projectId, decimal userId, decimal videoId)
        {
             AddVideoToProjectWithHttpInfo(projectId, userId, videoId);
        }

        /// <summary>
        /// Add a specific video to a folder This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> AddVideoToProjectWithHttpInfo (decimal projectId, decimal userId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/{user_id}/projects/{project_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoToProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a specific video to a folder This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddVideoToProjectAsync (decimal projectId, decimal userId, decimal videoId)
        {
             await AddVideoToProjectAsyncWithHttpInfo(projectId, userId, videoId);

        }

        /// <summary>
        /// Add a specific video to a folder This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> AddVideoToProjectAsyncWithHttpInfo (decimal projectId, decimal userId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/{user_id}/projects/{project_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoToProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a specific video to a folder This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void AddVideoToProjectAlt1 (decimal projectId, decimal videoId)
        {
             AddVideoToProjectAlt1WithHttpInfo(projectId, videoId);
        }

        /// <summary>
        /// Add a specific video to a folder This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> AddVideoToProjectAlt1WithHttpInfo (decimal projectId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/me/projects/{project_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoToProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a specific video to a folder This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddVideoToProjectAlt1Async (decimal projectId, decimal videoId)
        {
             await AddVideoToProjectAlt1AsyncWithHttpInfo(projectId, videoId);

        }

        /// <summary>
        /// Add a specific video to a folder This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> AddVideoToProjectAlt1AsyncWithHttpInfo (decimal projectId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/me/projects/{project_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoToProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of videos to a folder This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns></returns>
        public void AddVideosToProject (decimal projectId, decimal userId, string uris)
        {
             AddVideosToProjectWithHttpInfo(projectId, userId, uris);
        }

        /// <summary>
        /// Add a list of videos to a folder This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> AddVideosToProjectWithHttpInfo (decimal projectId, decimal userId, string uris)
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'uris' when calling FoldersVideosApi->AddVideosToProject");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "uris", uris));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/{user_id}/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideosToProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of videos to a folder This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddVideosToProjectAsync (decimal projectId, decimal userId, string uris)
        {
             await AddVideosToProjectAsyncWithHttpInfo(projectId, userId, uris);

        }

        /// <summary>
        /// Add a list of videos to a folder This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> AddVideosToProjectAsyncWithHttpInfo (decimal projectId, decimal userId, string uris)
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'uris' when calling FoldersVideosApi->AddVideosToProject");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "uris", uris));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/{user_id}/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideosToProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of videos to a folder This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns></returns>
        public void AddVideosToProjectAlt1 (decimal projectId, string uris)
        {
             AddVideosToProjectAlt1WithHttpInfo(projectId, uris);
        }

        /// <summary>
        /// Add a list of videos to a folder This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> AddVideosToProjectAlt1WithHttpInfo (decimal projectId, string uris)
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'uris' when calling FoldersVideosApi->AddVideosToProjectAlt1");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "uris", uris));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/me/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideosToProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of videos to a folder This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddVideosToProjectAlt1Async (decimal projectId, string uris)
        {
             await AddVideosToProjectAlt1AsyncWithHttpInfo(projectId, uris);

        }

        /// <summary>
        /// Add a list of videos to a folder This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of video URIs to add.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> AddVideosToProjectAlt1AsyncWithHttpInfo (decimal projectId, string uris)
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'uris' when calling FoldersVideosApi->AddVideosToProjectAlt1");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "uris", uris));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/me/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideosToProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in a folder This method returns all the videos that belong to the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetProjectVideos (decimal projectId, decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetProjectVideosWithHttpInfo(projectId, userId, direction, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the videos in a folder This method returns all the videos that belong to the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetProjectVideosWithHttpInfo (decimal projectId, decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/users/{user_id}/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in a folder This method returns all the videos that belong to the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetProjectVideosAsync (decimal projectId, decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetProjectVideosAsyncWithHttpInfo(projectId, userId, direction, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the videos in a folder This method returns all the videos that belong to the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetProjectVideosAsyncWithHttpInfo (decimal projectId, decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/users/{user_id}/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in a folder This method returns all the videos that belong to the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetProjectVideosAlt1 (decimal projectId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetProjectVideosAlt1WithHttpInfo(projectId, direction, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the videos in a folder This method returns all the videos that belong to the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetProjectVideosAlt1WithHttpInfo (decimal projectId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/me/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectVideosAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in a folder This method returns all the videos that belong to the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetProjectVideosAlt1Async (decimal projectId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetProjectVideosAlt1AsyncWithHttpInfo(projectId, direction, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the videos in a folder This method returns all the videos that belong to the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sort order.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by the date of the last user action.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetProjectVideosAlt1AsyncWithHttpInfo (decimal projectId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/me/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectVideosAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific video from a folder This method removes a single video from the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void RemoveVideoFromProject (decimal projectId, decimal userId, decimal videoId)
        {
             RemoveVideoFromProjectWithHttpInfo(projectId, userId, videoId);
        }

        /// <summary>
        /// Remove a specific video from a folder This method removes a single video from the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> RemoveVideoFromProjectWithHttpInfo (decimal projectId, decimal userId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_id}/projects/{project_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideoFromProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific video from a folder This method removes a single video from the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveVideoFromProjectAsync (decimal projectId, decimal userId, decimal videoId)
        {
             await RemoveVideoFromProjectAsyncWithHttpInfo(projectId, userId, videoId);

        }

        /// <summary>
        /// Remove a specific video from a folder This method removes a single video from the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> RemoveVideoFromProjectAsyncWithHttpInfo (decimal projectId, decimal userId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_id}/projects/{project_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideoFromProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific video from a folder This method removes a single video from the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void RemoveVideoFromProjectAlt1 (decimal projectId, decimal videoId)
        {
             RemoveVideoFromProjectAlt1WithHttpInfo(projectId, videoId);
        }

        /// <summary>
        /// Remove a specific video from a folder This method removes a single video from the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> RemoveVideoFromProjectAlt1WithHttpInfo (decimal projectId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/me/projects/{project_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideoFromProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific video from a folder This method removes a single video from the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveVideoFromProjectAlt1Async (decimal projectId, decimal videoId)
        {
             await RemoveVideoFromProjectAlt1AsyncWithHttpInfo(projectId, videoId);

        }

        /// <summary>
        /// Remove a specific video from a folder This method removes a single video from the specified folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> RemoveVideoFromProjectAlt1AsyncWithHttpInfo (decimal projectId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/me/projects/{project_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideoFromProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a list of videos from a folder This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns></returns>
        public void RemoveVideosFromProject (decimal projectId, decimal userId, string uris, bool? shouldDeleteClips = default(bool?))
        {
             RemoveVideosFromProjectWithHttpInfo(projectId, userId, uris, shouldDeleteClips);
        }

        /// <summary>
        /// Remove a list of videos from a folder This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> RemoveVideosFromProjectWithHttpInfo (decimal projectId, decimal userId, string uris, bool? shouldDeleteClips = default(bool?))
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'uris' when calling FoldersVideosApi->RemoveVideosFromProject");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (shouldDeleteClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "should_delete_clips", shouldDeleteClips));
            }
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "uris", uris));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_id}/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideosFromProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a list of videos from a folder This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveVideosFromProjectAsync (decimal projectId, decimal userId, string uris, bool? shouldDeleteClips = default(bool?))
        {
             await RemoveVideosFromProjectAsyncWithHttpInfo(projectId, userId, uris, shouldDeleteClips);

        }

        /// <summary>
        /// Remove a list of videos from a folder This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> RemoveVideosFromProjectAsyncWithHttpInfo (decimal projectId, decimal userId, string uris, bool? shouldDeleteClips = default(bool?))
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'uris' when calling FoldersVideosApi->RemoveVideosFromProject");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (shouldDeleteClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "should_delete_clips", shouldDeleteClips));
            }
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "uris", uris));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_id}/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideosFromProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a list of videos from a folder This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns></returns>
        public void RemoveVideosFromProjectAlt1 (decimal projectId, string uris, bool? shouldDeleteClips = default(bool?))
        {
             RemoveVideosFromProjectAlt1WithHttpInfo(projectId, uris, shouldDeleteClips);
        }

        /// <summary>
        /// Remove a list of videos from a folder This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> RemoveVideosFromProjectAlt1WithHttpInfo (decimal projectId, string uris, bool? shouldDeleteClips = default(bool?))
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'uris' when calling FoldersVideosApi->RemoveVideosFromProjectAlt1");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (shouldDeleteClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "should_delete_clips", shouldDeleteClips));
            }
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "uris", uris));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/me/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideosFromProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a list of videos from a folder This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveVideosFromProjectAlt1Async (decimal projectId, string uris, bool? shouldDeleteClips = default(bool?))
        {
             await RemoveVideosFromProjectAlt1AsyncWithHttpInfo(projectId, uris, shouldDeleteClips);

        }

        /// <summary>
        /// Remove a list of videos from a folder This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="uris">A comma-separated list of the video URIs to remove.</param>
        /// <param name="shouldDeleteClips">Whether to delete the videos when removing them from the folder. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> RemoveVideosFromProjectAlt1AsyncWithHttpInfo (decimal projectId, string uris, bool? shouldDeleteClips = default(bool?))
        {
            // verify the required parameter 'uris' is set
            if (uris == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'uris' when calling FoldersVideosApi->RemoveVideosFromProjectAlt1");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (shouldDeleteClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "should_delete_clips", shouldDeleteClips));
            }
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "uris", uris));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/me/projects/{project_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideosFromProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
