/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersEssentialsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder for the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject48"></param>
        /// <returns>Project</returns>
        Project CreateProject (decimal userId, InlineObject48 inlineObject48);

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder for the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject48"></param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> CreateProjectWithHttpInfo (decimal userId, InlineObject48 inlineObject48);
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder for the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject24"></param>
        /// <returns>Project</returns>
        Project CreateProjectAlt1 (InlineObject24 inlineObject24);

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder for the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject24"></param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> CreateProjectAlt1WithHttpInfo (InlineObject24 inlineObject24);
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns></returns>
        void DeleteProject (decimal projectId, decimal userId, bool? shouldDeleteClips = default(bool?));

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectWithHttpInfo (decimal projectId, decimal userId, bool? shouldDeleteClips = default(bool?));
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns></returns>
        void DeleteProjectAlt1 (decimal projectId, bool? shouldDeleteClips = default(bool?));

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectAlt1WithHttpInfo (decimal projectId, bool? shouldDeleteClips = default(bool?));
        /// <summary>
        /// Edit a folder
        /// </summary>
        /// <remarks>
        /// This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject49"></param>
        /// <returns>Project</returns>
        Project EditProject (decimal projectId, decimal userId, InlineObject49 inlineObject49);

        /// <summary>
        /// Edit a folder
        /// </summary>
        /// <remarks>
        /// This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject49"></param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> EditProjectWithHttpInfo (decimal projectId, decimal userId, InlineObject49 inlineObject49);
        /// <summary>
        /// Edit a folder
        /// </summary>
        /// <remarks>
        /// This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="inlineObject25"></param>
        /// <returns>Project</returns>
        Project EditProjectAlt1 (decimal projectId, InlineObject25 inlineObject25);

        /// <summary>
        /// Edit a folder
        /// </summary>
        /// <remarks>
        /// This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="inlineObject25"></param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> EditProjectAlt1WithHttpInfo (decimal projectId, InlineObject25 inlineObject25);
        /// <summary>
        /// Get a specific folder
        /// </summary>
        /// <remarks>
        /// This method returns a single folder belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Project</returns>
        Project GetProject (decimal projectId, decimal userId);

        /// <summary>
        /// Get a specific folder
        /// </summary>
        /// <remarks>
        /// This method returns a single folder belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> GetProjectWithHttpInfo (decimal projectId, decimal userId);
        /// <summary>
        /// Get a specific folder
        /// </summary>
        /// <remarks>
        /// This method returns a single folder belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <returns>Project</returns>
        Project GetProjectAlt1 (decimal projectId);

        /// <summary>
        /// Get a specific folder
        /// </summary>
        /// <remarks>
        /// This method returns a single folder belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> GetProjectAlt1WithHttpInfo (decimal projectId);
        /// <summary>
        /// Get all the folders that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns all the folders belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>List&lt;Project&gt;</returns>
        List<Project> GetProjects (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the folders that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns all the folders belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Project&gt;</returns>
        ApiResponse<List<Project>> GetProjectsWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Get all the folders that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns all the folders belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>List&lt;Project&gt;</returns>
        List<Project> GetProjectsAlt1 (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the folders that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns all the folders belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Project&gt;</returns>
        ApiResponse<List<Project>> GetProjectsAlt1WithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersEssentialsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder for the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject48"></param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> CreateProjectAsync (decimal userId, InlineObject48 inlineObject48);

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder for the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject48"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (decimal userId, InlineObject48 inlineObject48);
        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder for the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject24"></param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> CreateProjectAlt1Async (InlineObject24 inlineObject24);

        /// <summary>
        /// Create a folder
        /// </summary>
        /// <remarks>
        /// This method creates a new folder for the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject24"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> CreateProjectAlt1AsyncWithHttpInfo (InlineObject24 inlineObject24);
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectAsync (decimal projectId, decimal userId, bool? shouldDeleteClips = default(bool?));

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectAsyncWithHttpInfo (decimal projectId, decimal userId, bool? shouldDeleteClips = default(bool?));
        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectAlt1Async (decimal projectId, bool? shouldDeleteClips = default(bool?));

        /// <summary>
        /// Delete a folder
        /// </summary>
        /// <remarks>
        /// This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectAlt1AsyncWithHttpInfo (decimal projectId, bool? shouldDeleteClips = default(bool?));
        /// <summary>
        /// Edit a folder
        /// </summary>
        /// <remarks>
        /// This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject49"></param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> EditProjectAsync (decimal projectId, decimal userId, InlineObject49 inlineObject49);

        /// <summary>
        /// Edit a folder
        /// </summary>
        /// <remarks>
        /// This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject49"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> EditProjectAsyncWithHttpInfo (decimal projectId, decimal userId, InlineObject49 inlineObject49);
        /// <summary>
        /// Edit a folder
        /// </summary>
        /// <remarks>
        /// This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="inlineObject25"></param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> EditProjectAlt1Async (decimal projectId, InlineObject25 inlineObject25);

        /// <summary>
        /// Edit a folder
        /// </summary>
        /// <remarks>
        /// This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="inlineObject25"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> EditProjectAlt1AsyncWithHttpInfo (decimal projectId, InlineObject25 inlineObject25);
        /// <summary>
        /// Get a specific folder
        /// </summary>
        /// <remarks>
        /// This method returns a single folder belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> GetProjectAsync (decimal projectId, decimal userId);

        /// <summary>
        /// Get a specific folder
        /// </summary>
        /// <remarks>
        /// This method returns a single folder belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> GetProjectAsyncWithHttpInfo (decimal projectId, decimal userId);
        /// <summary>
        /// Get a specific folder
        /// </summary>
        /// <remarks>
        /// This method returns a single folder belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> GetProjectAlt1Async (decimal projectId);

        /// <summary>
        /// Get a specific folder
        /// </summary>
        /// <remarks>
        /// This method returns a single folder belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> GetProjectAlt1AsyncWithHttpInfo (decimal projectId);
        /// <summary>
        /// Get all the folders that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns all the folders belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of List&lt;Project&gt;</returns>
        System.Threading.Tasks.Task<List<Project>> GetProjectsAsync (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the folders that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns all the folders belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Project&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Project>>> GetProjectsAsyncWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Get all the folders that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns all the folders belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of List&lt;Project&gt;</returns>
        System.Threading.Tasks.Task<List<Project>> GetProjectsAlt1Async (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the folders that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns all the folders belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Project&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Project>>> GetProjectsAlt1AsyncWithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoldersEssentialsApi : IFoldersEssentialsApiSync, IFoldersEssentialsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoldersEssentialsApi : IFoldersEssentialsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersEssentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersEssentialsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersEssentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersEssentialsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersEssentialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoldersEssentialsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersEssentialsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FoldersEssentialsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a folder This method creates a new folder for the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject48"></param>
        /// <returns>Project</returns>
        public Project CreateProject (decimal userId, InlineObject48 inlineObject48)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = CreateProjectWithHttpInfo(userId, inlineObject48);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a folder This method creates a new folder for the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject48"></param>
        /// <returns>ApiResponse of Project</returns>
        public VimeoOpenApi.Client.ApiResponse< Project > CreateProjectWithHttpInfo (decimal userId, InlineObject48 inlineObject48)
        {
            // verify the required parameter 'inlineObject48' is set
            if (inlineObject48 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject48' when calling FoldersEssentialsApi->CreateProject");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject48;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Project >("/users/{user_id}/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a folder This method creates a new folder for the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject48"></param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> CreateProjectAsync (decimal userId, InlineObject48 inlineObject48)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = await CreateProjectAsyncWithHttpInfo(userId, inlineObject48);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a folder This method creates a new folder for the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject48"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (decimal userId, InlineObject48 inlineObject48)
        {
            // verify the required parameter 'inlineObject48' is set
            if (inlineObject48 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject48' when calling FoldersEssentialsApi->CreateProject");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject48;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Project>("/users/{user_id}/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a folder This method creates a new folder for the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject24"></param>
        /// <returns>Project</returns>
        public Project CreateProjectAlt1 (InlineObject24 inlineObject24)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = CreateProjectAlt1WithHttpInfo(inlineObject24);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a folder This method creates a new folder for the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject24"></param>
        /// <returns>ApiResponse of Project</returns>
        public VimeoOpenApi.Client.ApiResponse< Project > CreateProjectAlt1WithHttpInfo (InlineObject24 inlineObject24)
        {
            // verify the required parameter 'inlineObject24' is set
            if (inlineObject24 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject24' when calling FoldersEssentialsApi->CreateProjectAlt1");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject24;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Project >("/me/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a folder This method creates a new folder for the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject24"></param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> CreateProjectAlt1Async (InlineObject24 inlineObject24)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = await CreateProjectAlt1AsyncWithHttpInfo(inlineObject24);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a folder This method creates a new folder for the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject24"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Project>> CreateProjectAlt1AsyncWithHttpInfo (InlineObject24 inlineObject24)
        {
            // verify the required parameter 'inlineObject24' is set
            if (inlineObject24 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject24' when calling FoldersEssentialsApi->CreateProjectAlt1");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject24;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Project>("/me/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a folder This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns></returns>
        public void DeleteProject (decimal projectId, decimal userId, bool? shouldDeleteClips = default(bool?))
        {
             DeleteProjectWithHttpInfo(projectId, userId, shouldDeleteClips);
        }

        /// <summary>
        /// Delete a folder This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteProjectWithHttpInfo (decimal projectId, decimal userId, bool? shouldDeleteClips = default(bool?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (shouldDeleteClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "should_delete_clips", shouldDeleteClips));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_id}/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a folder This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectAsync (decimal projectId, decimal userId, bool? shouldDeleteClips = default(bool?))
        {
             await DeleteProjectAsyncWithHttpInfo(projectId, userId, shouldDeleteClips);

        }

        /// <summary>
        /// Delete a folder This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteProjectAsyncWithHttpInfo (decimal projectId, decimal userId, bool? shouldDeleteClips = default(bool?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (shouldDeleteClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "should_delete_clips", shouldDeleteClips));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_id}/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a folder This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns></returns>
        public void DeleteProjectAlt1 (decimal projectId, bool? shouldDeleteClips = default(bool?))
        {
             DeleteProjectAlt1WithHttpInfo(projectId, shouldDeleteClips);
        }

        /// <summary>
        /// Delete a folder This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteProjectAlt1WithHttpInfo (decimal projectId, bool? shouldDeleteClips = default(bool?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (shouldDeleteClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "should_delete_clips", shouldDeleteClips));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/me/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a folder This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectAlt1Async (decimal projectId, bool? shouldDeleteClips = default(bool?))
        {
             await DeleteProjectAlt1AsyncWithHttpInfo(projectId, shouldDeleteClips);

        }

        /// <summary>
        /// Delete a folder This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="shouldDeleteClips">Whether to delete all the videos in the folder along with the folder itself. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteProjectAlt1AsyncWithHttpInfo (decimal projectId, bool? shouldDeleteClips = default(bool?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (shouldDeleteClips != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "should_delete_clips", shouldDeleteClips));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/me/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a folder This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject49"></param>
        /// <returns>Project</returns>
        public Project EditProject (decimal projectId, decimal userId, InlineObject49 inlineObject49)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = EditProjectWithHttpInfo(projectId, userId, inlineObject49);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a folder This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject49"></param>
        /// <returns>ApiResponse of Project</returns>
        public VimeoOpenApi.Client.ApiResponse< Project > EditProjectWithHttpInfo (decimal projectId, decimal userId, InlineObject49 inlineObject49)
        {
            // verify the required parameter 'inlineObject49' is set
            if (inlineObject49 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject49' when calling FoldersEssentialsApi->EditProject");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject49;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Project >("/users/{user_id}/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a folder This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject49"></param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> EditProjectAsync (decimal projectId, decimal userId, InlineObject49 inlineObject49)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = await EditProjectAsyncWithHttpInfo(projectId, userId, inlineObject49);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a folder This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject49"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Project>> EditProjectAsyncWithHttpInfo (decimal projectId, decimal userId, InlineObject49 inlineObject49)
        {
            // verify the required parameter 'inlineObject49' is set
            if (inlineObject49 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject49' when calling FoldersEssentialsApi->EditProject");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject49;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Project>("/users/{user_id}/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a folder This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="inlineObject25"></param>
        /// <returns>Project</returns>
        public Project EditProjectAlt1 (decimal projectId, InlineObject25 inlineObject25)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = EditProjectAlt1WithHttpInfo(projectId, inlineObject25);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a folder This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="inlineObject25"></param>
        /// <returns>ApiResponse of Project</returns>
        public VimeoOpenApi.Client.ApiResponse< Project > EditProjectAlt1WithHttpInfo (decimal projectId, InlineObject25 inlineObject25)
        {
            // verify the required parameter 'inlineObject25' is set
            if (inlineObject25 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject25' when calling FoldersEssentialsApi->EditProjectAlt1");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = inlineObject25;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Project >("/me/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a folder This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="inlineObject25"></param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> EditProjectAlt1Async (decimal projectId, InlineObject25 inlineObject25)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = await EditProjectAlt1AsyncWithHttpInfo(projectId, inlineObject25);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a folder This method edits the specified folder. The authenticated user must be the owner of the folder.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="inlineObject25"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Project>> EditProjectAlt1AsyncWithHttpInfo (decimal projectId, InlineObject25 inlineObject25)
        {
            // verify the required parameter 'inlineObject25' is set
            if (inlineObject25 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject25' when calling FoldersEssentialsApi->EditProjectAlt1");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = inlineObject25;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Project>("/me/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific folder This method returns a single folder belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Project</returns>
        public Project GetProject (decimal projectId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = GetProjectWithHttpInfo(projectId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific folder This method returns a single folder belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Project</returns>
        public VimeoOpenApi.Client.ApiResponse< Project > GetProjectWithHttpInfo (decimal projectId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Project >("/users/{user_id}/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific folder This method returns a single folder belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> GetProjectAsync (decimal projectId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = await GetProjectAsyncWithHttpInfo(projectId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific folder This method returns a single folder belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Project>> GetProjectAsyncWithHttpInfo (decimal projectId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Project>("/users/{user_id}/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific folder This method returns a single folder belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <returns>Project</returns>
        public Project GetProjectAlt1 (decimal projectId)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = GetProjectAlt1WithHttpInfo(projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific folder This method returns a single folder belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <returns>ApiResponse of Project</returns>
        public VimeoOpenApi.Client.ApiResponse< Project > GetProjectAlt1WithHttpInfo (decimal projectId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Project >("/me/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific folder This method returns a single folder belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> GetProjectAlt1Async (decimal projectId)
        {
             VimeoOpenApi.Client.ApiResponse<Project> localVarResponse = await GetProjectAlt1AsyncWithHttpInfo(projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific folder This method returns a single folder belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The ID of the folder.</param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Project>> GetProjectAlt1AsyncWithHttpInfo (decimal projectId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("project_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Project>("/me/projects/{project_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the folders that belong to the user This method returns all the folders belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>List&lt;Project&gt;</returns>
        public List<Project> GetProjects (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Project>> localVarResponse = GetProjectsWithHttpInfo(userId, direction, page, perPage, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the folders that belong to the user This method returns all the folders belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Project&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Project> > GetProjectsWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Project> >("/users/{user_id}/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the folders that belong to the user This method returns all the folders belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of List&lt;Project&gt;</returns>
        public async System.Threading.Tasks.Task<List<Project>> GetProjectsAsync (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Project>> localVarResponse = await GetProjectsAsyncWithHttpInfo(userId, direction, page, perPage, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the folders that belong to the user This method returns all the folders belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Project&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Project>>> GetProjectsAsyncWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Project>>("/users/{user_id}/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the folders that belong to the user This method returns all the folders belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>List&lt;Project&gt;</returns>
        public List<Project> GetProjectsAlt1 (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Project>> localVarResponse = GetProjectsAlt1WithHttpInfo(direction, page, perPage, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the folders that belong to the user This method returns all the folders belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;Project&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Project> > GetProjectsAlt1WithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Project> >("/me/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectsAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the folders that belong to the user This method returns all the folders belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of List&lt;Project&gt;</returns>
        public async System.Threading.Tasks.Task<List<Project>> GetProjectsAlt1Async (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Project>> localVarResponse = await GetProjectsAlt1AsyncWithHttpInfo(direction, page, perPage, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the folders that belong to the user This method returns all the folders belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Project&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Project>>> GetProjectsAlt1AsyncWithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Project>>("/me/projects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectsAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
