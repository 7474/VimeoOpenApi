/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsTagsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a specific tag to a channel
        /// </summary>
        /// <remarks>
        /// This method adds a single tag to the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns></returns>
        void AddChannelTag (decimal channelId, string word);

        /// <summary>
        /// Add a specific tag to a channel
        /// </summary>
        /// <remarks>
        /// This method adds a single tag to the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddChannelTagWithHttpInfo (decimal channelId, string word);
        /// <summary>
        /// Add a list of tags to a channel
        /// </summary>
        /// <remarks>
        /// This method adds multiple tags to the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject7"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> AddTagsToChannel (decimal channelId, InlineObject7 inlineObject7);

        /// <summary>
        /// Add a list of tags to a channel
        /// </summary>
        /// <remarks>
        /// This method adds multiple tags to the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject7"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> AddTagsToChannelWithHttpInfo (decimal channelId, InlineObject7 inlineObject7);
        /// <summary>
        /// Check if a tag has been added to a channel
        /// </summary>
        /// <remarks>
        /// This method determines whether a tag has been added to the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns></returns>
        void CheckIfChannelHasTag (decimal channelId, string word);

        /// <summary>
        /// Check if a tag has been added to a channel
        /// </summary>
        /// <remarks>
        /// This method determines whether a tag has been added to the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckIfChannelHasTagWithHttpInfo (decimal channelId, string word);
        /// <summary>
        /// Remove a tag from a channel
        /// </summary>
        /// <remarks>
        /// This method removes a single tag from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns></returns>
        void DeleteTagFromChannel (decimal channelId, string word);

        /// <summary>
        /// Remove a tag from a channel
        /// </summary>
        /// <remarks>
        /// This method removes a single tag from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTagFromChannelWithHttpInfo (decimal channelId, string word);
        /// <summary>
        /// Get all the tags that have been added to a channel
        /// </summary>
        /// <remarks>
        /// This method returns every tag that has been added to the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> GetChannelTags (decimal channelId);

        /// <summary>
        /// Get all the tags that have been added to a channel
        /// </summary>
        /// <remarks>
        /// This method returns every tag that has been added to the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> GetChannelTagsWithHttpInfo (decimal channelId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsTagsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a specific tag to a channel
        /// </summary>
        /// <remarks>
        /// This method adds a single tag to the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddChannelTagAsync (decimal channelId, string word);

        /// <summary>
        /// Add a specific tag to a channel
        /// </summary>
        /// <remarks>
        /// This method adds a single tag to the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddChannelTagAsyncWithHttpInfo (decimal channelId, string word);
        /// <summary>
        /// Add a list of tags to a channel
        /// </summary>
        /// <remarks>
        /// This method adds multiple tags to the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject7"></param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> AddTagsToChannelAsync (decimal channelId, InlineObject7 inlineObject7);

        /// <summary>
        /// Add a list of tags to a channel
        /// </summary>
        /// <remarks>
        /// This method adds multiple tags to the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject7"></param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> AddTagsToChannelAsyncWithHttpInfo (decimal channelId, InlineObject7 inlineObject7);
        /// <summary>
        /// Check if a tag has been added to a channel
        /// </summary>
        /// <remarks>
        /// This method determines whether a tag has been added to the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckIfChannelHasTagAsync (decimal channelId, string word);

        /// <summary>
        /// Check if a tag has been added to a channel
        /// </summary>
        /// <remarks>
        /// This method determines whether a tag has been added to the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckIfChannelHasTagAsyncWithHttpInfo (decimal channelId, string word);
        /// <summary>
        /// Remove a tag from a channel
        /// </summary>
        /// <remarks>
        /// This method removes a single tag from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTagFromChannelAsync (decimal channelId, string word);

        /// <summary>
        /// Remove a tag from a channel
        /// </summary>
        /// <remarks>
        /// This method removes a single tag from the specified channel. The authenticated user must be the owner of the channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTagFromChannelAsyncWithHttpInfo (decimal channelId, string word);
        /// <summary>
        /// Get all the tags that have been added to a channel
        /// </summary>
        /// <remarks>
        /// This method returns every tag that has been added to the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> GetChannelTagsAsync (decimal channelId);

        /// <summary>
        /// Get all the tags that have been added to a channel
        /// </summary>
        /// <remarks>
        /// This method returns every tag that has been added to the specified channel.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> GetChannelTagsAsyncWithHttpInfo (decimal channelId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsTagsApi : IChannelsTagsApiSync, IChannelsTagsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelsTagsApi : IChannelsTagsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsTagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelsTagsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsTagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelsTagsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsTagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelsTagsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsTagsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChannelsTagsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a specific tag to a channel This method adds a single tag to the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns></returns>
        public void AddChannelTag (decimal channelId, string word)
        {
             AddChannelTagWithHttpInfo(channelId, word);
        }

        /// <summary>
        /// Add a specific tag to a channel This method adds a single tag to the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> AddChannelTagWithHttpInfo (decimal channelId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling ChannelsTagsApi->AddChannelTag");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/channels/{channel_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChannelTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a specific tag to a channel This method adds a single tag to the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddChannelTagAsync (decimal channelId, string word)
        {
             await AddChannelTagAsyncWithHttpInfo(channelId, word);

        }

        /// <summary>
        /// Add a specific tag to a channel This method adds a single tag to the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> AddChannelTagAsyncWithHttpInfo (decimal channelId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling ChannelsTagsApi->AddChannelTag");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/channels/{channel_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddChannelTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of tags to a channel This method adds multiple tags to the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject7"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> AddTagsToChannel (decimal channelId, InlineObject7 inlineObject7)
        {
             VimeoOpenApi.Client.ApiResponse<List<Tag>> localVarResponse = AddTagsToChannelWithHttpInfo(channelId, inlineObject7);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a list of tags to a channel This method adds multiple tags to the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject7"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Tag> > AddTagsToChannelWithHttpInfo (decimal channelId, InlineObject7 inlineObject7)
        {
            // verify the required parameter 'inlineObject7' is set
            if (inlineObject7 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject7' when calling ChannelsTagsApi->AddTagsToChannel");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.Data = inlineObject7;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< List<Tag> >("/channels/{channel_id}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTagsToChannel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of tags to a channel This method adds multiple tags to the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject7"></param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> AddTagsToChannelAsync (decimal channelId, InlineObject7 inlineObject7)
        {
             VimeoOpenApi.Client.ApiResponse<List<Tag>> localVarResponse = await AddTagsToChannelAsyncWithHttpInfo(channelId, inlineObject7);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a list of tags to a channel This method adds multiple tags to the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="inlineObject7"></param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Tag>>> AddTagsToChannelAsyncWithHttpInfo (decimal channelId, InlineObject7 inlineObject7)
        {
            // verify the required parameter 'inlineObject7' is set
            if (inlineObject7 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject7' when calling ChannelsTagsApi->AddTagsToChannel");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.Data = inlineObject7;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<List<Tag>>("/channels/{channel_id}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddTagsToChannel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if a tag has been added to a channel This method determines whether a tag has been added to the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns></returns>
        public void CheckIfChannelHasTag (decimal channelId, string word)
        {
             CheckIfChannelHasTagWithHttpInfo(channelId, word);
        }

        /// <summary>
        /// Check if a tag has been added to a channel This method determines whether a tag has been added to the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> CheckIfChannelHasTagWithHttpInfo (decimal channelId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling ChannelsTagsApi->CheckIfChannelHasTag");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/channels/{channel_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfChannelHasTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if a tag has been added to a channel This method determines whether a tag has been added to the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckIfChannelHasTagAsync (decimal channelId, string word)
        {
             await CheckIfChannelHasTagAsyncWithHttpInfo(channelId, word);

        }

        /// <summary>
        /// Check if a tag has been added to a channel This method determines whether a tag has been added to the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> CheckIfChannelHasTagAsyncWithHttpInfo (decimal channelId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling ChannelsTagsApi->CheckIfChannelHasTag");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/channels/{channel_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfChannelHasTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a tag from a channel This method removes a single tag from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns></returns>
        public void DeleteTagFromChannel (decimal channelId, string word)
        {
             DeleteTagFromChannelWithHttpInfo(channelId, word);
        }

        /// <summary>
        /// Remove a tag from a channel This method removes a single tag from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteTagFromChannelWithHttpInfo (decimal channelId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling ChannelsTagsApi->DeleteTagFromChannel");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/channels/{channel_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTagFromChannel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a tag from a channel This method removes a single tag from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTagFromChannelAsync (decimal channelId, string word)
        {
             await DeleteTagFromChannelAsyncWithHttpInfo(channelId, word);

        }

        /// <summary>
        /// Remove a tag from a channel This method removes a single tag from the specified channel. The authenticated user must be the owner of the channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="word">The word to use as the tag.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteTagFromChannelAsyncWithHttpInfo (decimal channelId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling ChannelsTagsApi->DeleteTagFromChannel");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/channels/{channel_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTagFromChannel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the tags that have been added to a channel This method returns every tag that has been added to the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> GetChannelTags (decimal channelId)
        {
             VimeoOpenApi.Client.ApiResponse<List<Tag>> localVarResponse = GetChannelTagsWithHttpInfo(channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the tags that have been added to a channel This method returns every tag that has been added to the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Tag> > GetChannelTagsWithHttpInfo (decimal channelId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Tag> >("/channels/{channel_id}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the tags that have been added to a channel This method returns every tag that has been added to the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> GetChannelTagsAsync (decimal channelId)
        {
             VimeoOpenApi.Client.ApiResponse<List<Tag>> localVarResponse = await GetChannelTagsAsyncWithHttpInfo(channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the tags that have been added to a channel This method returns every tag that has been added to the specified channel.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Tag>>> GetChannelTagsAsyncWithHttpInfo (decimal channelId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Tag>>("/channels/{channel_id}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChannelTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
