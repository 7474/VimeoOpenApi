/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersPicturesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a picture to the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        Picture CreatePicture (decimal userId);

        /// <summary>
        /// Add a picture to the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> CreatePictureWithHttpInfo (decimal userId);
        /// <summary>
        /// Add a picture to the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Picture</returns>
        Picture CreatePictureAlt1 ();

        /// <summary>
        /// Add a picture to the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> CreatePictureAlt1WithHttpInfo ();
        /// <summary>
        /// Delete a picture from the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        void DeletePicture (decimal portraitsetId, decimal userId);

        /// <summary>
        /// Delete a picture from the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePictureWithHttpInfo (decimal portraitsetId, decimal userId);
        /// <summary>
        /// Delete a picture from the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns></returns>
        void DeletePictureAlt1 (decimal portraitsetId);

        /// <summary>
        /// Delete a picture from the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePictureAlt1WithHttpInfo (decimal portraitsetId);
        /// <summary>
        /// Edit a picture in the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method edits the specified portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject46"> (optional)</param>
        /// <returns>Picture</returns>
        Picture EditPicture (decimal portraitsetId, decimal userId, InlineObject46 inlineObject46 = default(InlineObject46));

        /// <summary>
        /// Edit a picture in the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method edits the specified portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject46"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> EditPictureWithHttpInfo (decimal portraitsetId, decimal userId, InlineObject46 inlineObject46 = default(InlineObject46));
        /// <summary>
        /// Edit a picture in the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method edits the specified portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="inlineObject22"> (optional)</param>
        /// <returns>Picture</returns>
        Picture EditPictureAlt1 (decimal portraitsetId, InlineObject22 inlineObject22 = default(InlineObject22));

        /// <summary>
        /// Edit a picture in the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method edits the specified portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="inlineObject22"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> EditPictureAlt1WithHttpInfo (decimal portraitsetId, InlineObject22 inlineObject22 = default(InlineObject22));
        /// <summary>
        /// Get a specific picture that belongs to the user
        /// </summary>
        /// <remarks>
        /// This method returns a single portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        Picture GetPicture (decimal portraitsetId, decimal userId);

        /// <summary>
        /// Get a specific picture that belongs to the user
        /// </summary>
        /// <remarks>
        /// This method returns a single portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> GetPictureWithHttpInfo (decimal portraitsetId, decimal userId);
        /// <summary>
        /// Get a specific picture that belongs to the user
        /// </summary>
        /// <remarks>
        /// This method returns a single portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>Picture</returns>
        Picture GetPictureAlt1 (decimal portraitsetId);

        /// <summary>
        /// Get a specific picture that belongs to the user
        /// </summary>
        /// <remarks>
        /// This method returns a single portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> GetPictureAlt1WithHttpInfo (decimal portraitsetId);
        /// <summary>
        /// Get all the pictures that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        List<Picture> GetPictures (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the pictures that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        ApiResponse<List<Picture>> GetPicturesWithHttpInfo (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Get all the pictures that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        List<Picture> GetPicturesAlt1 (decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the pictures that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        ApiResponse<List<Picture>> GetPicturesAlt1WithHttpInfo (decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersPicturesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a picture to the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> CreatePictureAsync (decimal userId);

        /// <summary>
        /// Add a picture to the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> CreatePictureAsyncWithHttpInfo (decimal userId);
        /// <summary>
        /// Add a picture to the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> CreatePictureAlt1Async ();

        /// <summary>
        /// Add a picture to the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> CreatePictureAlt1AsyncWithHttpInfo ();
        /// <summary>
        /// Delete a picture from the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePictureAsync (decimal portraitsetId, decimal userId);

        /// <summary>
        /// Delete a picture from the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePictureAsyncWithHttpInfo (decimal portraitsetId, decimal userId);
        /// <summary>
        /// Delete a picture from the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePictureAlt1Async (decimal portraitsetId);

        /// <summary>
        /// Delete a picture from the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePictureAlt1AsyncWithHttpInfo (decimal portraitsetId);
        /// <summary>
        /// Edit a picture in the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method edits the specified portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject46"> (optional)</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> EditPictureAsync (decimal portraitsetId, decimal userId, InlineObject46 inlineObject46 = default(InlineObject46));

        /// <summary>
        /// Edit a picture in the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method edits the specified portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject46"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> EditPictureAsyncWithHttpInfo (decimal portraitsetId, decimal userId, InlineObject46 inlineObject46 = default(InlineObject46));
        /// <summary>
        /// Edit a picture in the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method edits the specified portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="inlineObject22"> (optional)</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> EditPictureAlt1Async (decimal portraitsetId, InlineObject22 inlineObject22 = default(InlineObject22));

        /// <summary>
        /// Edit a picture in the user&#39;s account
        /// </summary>
        /// <remarks>
        /// This method edits the specified portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="inlineObject22"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> EditPictureAlt1AsyncWithHttpInfo (decimal portraitsetId, InlineObject22 inlineObject22 = default(InlineObject22));
        /// <summary>
        /// Get a specific picture that belongs to the user
        /// </summary>
        /// <remarks>
        /// This method returns a single portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> GetPictureAsync (decimal portraitsetId, decimal userId);

        /// <summary>
        /// Get a specific picture that belongs to the user
        /// </summary>
        /// <remarks>
        /// This method returns a single portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> GetPictureAsyncWithHttpInfo (decimal portraitsetId, decimal userId);
        /// <summary>
        /// Get a specific picture that belongs to the user
        /// </summary>
        /// <remarks>
        /// This method returns a single portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> GetPictureAlt1Async (decimal portraitsetId);

        /// <summary>
        /// Get a specific picture that belongs to the user
        /// </summary>
        /// <remarks>
        /// This method returns a single portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> GetPictureAlt1AsyncWithHttpInfo (decimal portraitsetId);
        /// <summary>
        /// Get all the pictures that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        System.Threading.Tasks.Task<List<Picture>> GetPicturesAsync (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the pictures that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Picture>>> GetPicturesAsyncWithHttpInfo (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Get all the pictures that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        System.Threading.Tasks.Task<List<Picture>> GetPicturesAlt1Async (decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the pictures that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every portrait image belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Picture>>> GetPicturesAlt1AsyncWithHttpInfo (decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersPicturesApi : IUsersPicturesApiSync, IUsersPicturesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersPicturesApi : IUsersPicturesApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersPicturesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersPicturesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersPicturesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersPicturesApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersPicturesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersPicturesApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersPicturesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersPicturesApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a picture to the user&#39;s account This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        public Picture CreatePicture (decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = CreatePictureWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a picture to the user&#39;s account This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > CreatePictureWithHttpInfo (decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Picture >("/users/{user_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePicture", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a picture to the user&#39;s account This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> CreatePictureAsync (decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await CreatePictureAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a picture to the user&#39;s account This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> CreatePictureAsyncWithHttpInfo (decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Picture>("/users/{user_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePicture", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a picture to the user&#39;s account This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Picture</returns>
        public Picture CreatePictureAlt1 ()
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = CreatePictureAlt1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a picture to the user&#39;s account This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > CreatePictureAlt1WithHttpInfo ()
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Picture >("/me/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePictureAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a picture to the user&#39;s account This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> CreatePictureAlt1Async ()
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await CreatePictureAlt1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a picture to the user&#39;s account This method adds a portrait image to the authenticated user&#39;s Vimeo account. Send the binary data of the image file to the location that you receive from the **link** field in the response. For step-by-step instructions, see [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> CreatePictureAlt1AsyncWithHttpInfo ()
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Picture>("/me/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePictureAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a picture from the user&#39;s account This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        public void DeletePicture (decimal portraitsetId, decimal userId)
        {
             DeletePictureWithHttpInfo(portraitsetId, userId);
        }

        /// <summary>
        /// Delete a picture from the user&#39;s account This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeletePictureWithHttpInfo (decimal portraitsetId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_id}/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePicture", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a picture from the user&#39;s account This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePictureAsync (decimal portraitsetId, decimal userId)
        {
             await DeletePictureAsyncWithHttpInfo(portraitsetId, userId);

        }

        /// <summary>
        /// Delete a picture from the user&#39;s account This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeletePictureAsyncWithHttpInfo (decimal portraitsetId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_id}/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePicture", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a picture from the user&#39;s account This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns></returns>
        public void DeletePictureAlt1 (decimal portraitsetId)
        {
             DeletePictureAlt1WithHttpInfo(portraitsetId);
        }

        /// <summary>
        /// Delete a picture from the user&#39;s account This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeletePictureAlt1WithHttpInfo (decimal portraitsetId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/me/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePictureAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a picture from the user&#39;s account This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePictureAlt1Async (decimal portraitsetId)
        {
             await DeletePictureAlt1AsyncWithHttpInfo(portraitsetId);

        }

        /// <summary>
        /// Delete a picture from the user&#39;s account This method removes the specified portrait image from the authenticated user&#39;s Vimeo account.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeletePictureAlt1AsyncWithHttpInfo (decimal portraitsetId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/me/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePictureAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a picture in the user&#39;s account This method edits the specified portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject46"> (optional)</param>
        /// <returns>Picture</returns>
        public Picture EditPicture (decimal portraitsetId, decimal userId, InlineObject46 inlineObject46 = default(InlineObject46))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = EditPictureWithHttpInfo(portraitsetId, userId, inlineObject46);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a picture in the user&#39;s account This method edits the specified portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject46"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > EditPictureWithHttpInfo (decimal portraitsetId, decimal userId, InlineObject46 inlineObject46 = default(InlineObject46))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject46;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Picture >("/users/{user_id}/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditPicture", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a picture in the user&#39;s account This method edits the specified portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject46"> (optional)</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> EditPictureAsync (decimal portraitsetId, decimal userId, InlineObject46 inlineObject46 = default(InlineObject46))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await EditPictureAsyncWithHttpInfo(portraitsetId, userId, inlineObject46);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a picture in the user&#39;s account This method edits the specified portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject46"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> EditPictureAsyncWithHttpInfo (decimal portraitsetId, decimal userId, InlineObject46 inlineObject46 = default(InlineObject46))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject46;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Picture>("/users/{user_id}/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditPicture", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a picture in the user&#39;s account This method edits the specified portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="inlineObject22"> (optional)</param>
        /// <returns>Picture</returns>
        public Picture EditPictureAlt1 (decimal portraitsetId, InlineObject22 inlineObject22 = default(InlineObject22))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = EditPictureAlt1WithHttpInfo(portraitsetId, inlineObject22);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a picture in the user&#39;s account This method edits the specified portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="inlineObject22"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > EditPictureAlt1WithHttpInfo (decimal portraitsetId, InlineObject22 inlineObject22 = default(InlineObject22))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter
            localVarRequestOptions.Data = inlineObject22;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Picture >("/me/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditPictureAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a picture in the user&#39;s account This method edits the specified portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="inlineObject22"> (optional)</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> EditPictureAlt1Async (decimal portraitsetId, InlineObject22 inlineObject22 = default(InlineObject22))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await EditPictureAlt1AsyncWithHttpInfo(portraitsetId, inlineObject22);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a picture in the user&#39;s account This method edits the specified portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="inlineObject22"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> EditPictureAlt1AsyncWithHttpInfo (decimal portraitsetId, InlineObject22 inlineObject22 = default(InlineObject22))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter
            localVarRequestOptions.Data = inlineObject22;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Picture>("/me/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditPictureAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific picture that belongs to the user This method returns a single portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        public Picture GetPicture (decimal portraitsetId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = GetPictureWithHttpInfo(portraitsetId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific picture that belongs to the user This method returns a single portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > GetPictureWithHttpInfo (decimal portraitsetId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Picture >("/users/{user_id}/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPicture", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific picture that belongs to the user This method returns a single portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> GetPictureAsync (decimal portraitsetId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await GetPictureAsyncWithHttpInfo(portraitsetId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific picture that belongs to the user This method returns a single portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> GetPictureAsyncWithHttpInfo (decimal portraitsetId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Picture>("/users/{user_id}/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPicture", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific picture that belongs to the user This method returns a single portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>Picture</returns>
        public Picture GetPictureAlt1 (decimal portraitsetId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = GetPictureAlt1WithHttpInfo(portraitsetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific picture that belongs to the user This method returns a single portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > GetPictureAlt1WithHttpInfo (decimal portraitsetId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Picture >("/me/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPictureAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific picture that belongs to the user This method returns a single portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> GetPictureAlt1Async (decimal portraitsetId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await GetPictureAlt1AsyncWithHttpInfo(portraitsetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific picture that belongs to the user This method returns a single portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portraitsetId">The ID of the picture.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> GetPictureAlt1AsyncWithHttpInfo (decimal portraitsetId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("portraitset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(portraitsetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Picture>("/me/pictures/{portraitset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPictureAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the pictures that belong to the user This method returns every portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        public List<Picture> GetPictures (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = GetPicturesWithHttpInfo(userId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the pictures that belong to the user This method returns every portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Picture> > GetPicturesWithHttpInfo (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Picture> >("/users/{user_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPictures", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the pictures that belong to the user This method returns every portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        public async System.Threading.Tasks.Task<List<Picture>> GetPicturesAsync (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = await GetPicturesAsyncWithHttpInfo(userId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the pictures that belong to the user This method returns every portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Picture>>> GetPicturesAsyncWithHttpInfo (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Picture>>("/users/{user_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPictures", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the pictures that belong to the user This method returns every portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        public List<Picture> GetPicturesAlt1 (decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = GetPicturesAlt1WithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the pictures that belong to the user This method returns every portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Picture> > GetPicturesAlt1WithHttpInfo (decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Picture> >("/me/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPicturesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the pictures that belong to the user This method returns every portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        public async System.Threading.Tasks.Task<List<Picture>> GetPicturesAlt1Async (decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = await GetPicturesAlt1AsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the pictures that belong to the user This method returns every portrait image belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Picture>>> GetPicturesAlt1AsyncWithHttpInfo (decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Picture>>("/me/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPicturesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
