/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandPurchasesAndRentalsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check if a user has made a purchase or rental from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandPage</returns>
        OnDemandPage CheckIfVodWasPurchasedAlt1 (decimal ondemandId);

        /// <summary>
        /// Check if a user has made a purchase or rental from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandPage</returns>
        ApiResponse<OnDemandPage> CheckIfVodWasPurchasedAlt1WithHttpInfo (decimal ondemandId);
        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made
        /// </summary>
        /// <remarks>
        /// This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>List&lt;OnDemandPage&gt;</returns>
        List<OnDemandPage> GetVodPurchases (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made
        /// </summary>
        /// <remarks>
        /// This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;OnDemandPage&gt;</returns>
        ApiResponse<List<OnDemandPage>> GetVodPurchasesWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made
        /// </summary>
        /// <remarks>
        /// This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>List&lt;OnDemandPage&gt;</returns>
        List<OnDemandPage> GetVodPurchasesAlt1 (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made
        /// </summary>
        /// <remarks>
        /// This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;OnDemandPage&gt;</returns>
        ApiResponse<List<OnDemandPage>> GetVodPurchasesAlt1WithHttpInfo (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandPurchasesAndRentalsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check if a user has made a purchase or rental from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandPage</returns>
        System.Threading.Tasks.Task<OnDemandPage> CheckIfVodWasPurchasedAlt1Async (decimal ondemandId);

        /// <summary>
        /// Check if a user has made a purchase or rental from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandPage>> CheckIfVodWasPurchasedAlt1AsyncWithHttpInfo (decimal ondemandId);
        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made
        /// </summary>
        /// <remarks>
        /// This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of List&lt;OnDemandPage&gt;</returns>
        System.Threading.Tasks.Task<List<OnDemandPage>> GetVodPurchasesAsync (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made
        /// </summary>
        /// <remarks>
        /// This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandPage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OnDemandPage>>> GetVodPurchasesAsyncWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made
        /// </summary>
        /// <remarks>
        /// This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of List&lt;OnDemandPage&gt;</returns>
        System.Threading.Tasks.Task<List<OnDemandPage>> GetVodPurchasesAlt1Async (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made
        /// </summary>
        /// <remarks>
        /// This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandPage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OnDemandPage>>> GetVodPurchasesAlt1AsyncWithHttpInfo (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandPurchasesAndRentalsApi : IOnDemandPurchasesAndRentalsApiSync, IOnDemandPurchasesAndRentalsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OnDemandPurchasesAndRentalsApi : IOnDemandPurchasesAndRentalsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPurchasesAndRentalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnDemandPurchasesAndRentalsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPurchasesAndRentalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnDemandPurchasesAndRentalsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPurchasesAndRentalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OnDemandPurchasesAndRentalsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPurchasesAndRentalsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OnDemandPurchasesAndRentalsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check if a user has made a purchase or rental from an On Demand page This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandPage</returns>
        public OnDemandPage CheckIfVodWasPurchasedAlt1 (decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPage> localVarResponse = CheckIfVodWasPurchasedAlt1WithHttpInfo(ondemandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if a user has made a purchase or rental from an On Demand page This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandPage</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandPage > CheckIfVodWasPurchasedAlt1WithHttpInfo (decimal ondemandId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.page+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnDemandPage >("/me/ondemand/purchases/{ondemand_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfVodWasPurchasedAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if a user has made a purchase or rental from an On Demand page This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandPage</returns>
        public async System.Threading.Tasks.Task<OnDemandPage> CheckIfVodWasPurchasedAlt1Async (decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPage> localVarResponse = await CheckIfVodWasPurchasedAlt1AsyncWithHttpInfo(ondemandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if a user has made a purchase or rental from an On Demand page This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandPage)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandPage>> CheckIfVodWasPurchasedAlt1AsyncWithHttpInfo (decimal ondemandId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.page+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnDemandPage>("/me/ondemand/purchases/{ondemand_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfVodWasPurchasedAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>List&lt;OnDemandPage&gt;</returns>
        public List<OnDemandPage> GetVodPurchases (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandPage>> localVarResponse = GetVodPurchasesWithHttpInfo(userId, direction, filter, page, perPage, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;OnDemandPage&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<OnDemandPage> > GetVodPurchasesWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.page+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<OnDemandPage> >("/users/{user_id}/ondemand/purchases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodPurchases", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of List&lt;OnDemandPage&gt;</returns>
        public async System.Threading.Tasks.Task<List<OnDemandPage>> GetVodPurchasesAsync (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandPage>> localVarResponse = await GetVodPurchasesAsyncWithHttpInfo(userId, direction, filter, page, perPage, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandPage&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<OnDemandPage>>> GetVodPurchasesAsyncWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.page+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OnDemandPage>>("/users/{user_id}/ondemand/purchases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodPurchases", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>List&lt;OnDemandPage&gt;</returns>
        public List<OnDemandPage> GetVodPurchasesAlt1 (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandPage>> localVarResponse = GetVodPurchasesAlt1WithHttpInfo(direction, filter, page, perPage, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;OnDemandPage&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<OnDemandPage> > GetVodPurchasesAlt1WithHttpInfo (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.page+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<OnDemandPage> >("/me/ondemand/purchases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodPurchasesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of List&lt;OnDemandPage&gt;</returns>
        public async System.Threading.Tasks.Task<List<OnDemandPage>> GetVodPurchasesAlt1Async (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandPage>> localVarResponse = await GetVodPurchasesAlt1AsyncWithHttpInfo(direction, filter, page, perPage, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the On Demand purchases and rentals that the user has made This method returns every purchase and rental that the authenticated user has made across all On Demand pages.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The type of On Demand videos to show.  Option descriptions:  * &#x60;important&#x60; - This option shows the pages that are about to expire.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandPage&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<OnDemandPage>>> GetVodPurchasesAlt1AsyncWithHttpInfo (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.page+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OnDemandPage>>("/me/ondemand/purchases", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodPurchasesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
