/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosTextTracksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a text track to a video
        /// </summary>
        /// <remarks>
        /// This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject62"></param>
        /// <returns>TextTrack</returns>
        TextTrack CreateTextTrack (decimal videoId, InlineObject62 inlineObject62);

        /// <summary>
        /// Add a text track to a video
        /// </summary>
        /// <remarks>
        /// This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject62"></param>
        /// <returns>ApiResponse of TextTrack</returns>
        ApiResponse<TextTrack> CreateTextTrackWithHttpInfo (decimal videoId, InlineObject62 inlineObject62);
        /// <summary>
        /// Add a text track to a video
        /// </summary>
        /// <remarks>
        /// This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject13"></param>
        /// <returns>TextTrack</returns>
        TextTrack CreateTextTrackAlt1 (decimal channelId, decimal videoId, InlineObject13 inlineObject13);

        /// <summary>
        /// Add a text track to a video
        /// </summary>
        /// <remarks>
        /// This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject13"></param>
        /// <returns>ApiResponse of TextTrack</returns>
        ApiResponse<TextTrack> CreateTextTrackAlt1WithHttpInfo (decimal channelId, decimal videoId, InlineObject13 inlineObject13);
        /// <summary>
        /// Delete a text track
        /// </summary>
        /// <remarks>
        /// This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void DeleteTextTrack (decimal texttrackId, decimal videoId);

        /// <summary>
        /// Delete a text track
        /// </summary>
        /// <remarks>
        /// This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTextTrackWithHttpInfo (decimal texttrackId, decimal videoId);
        /// <summary>
        /// Edit a text track
        /// </summary>
        /// <remarks>
        /// This method edits the specified text track of a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject63"> (optional)</param>
        /// <returns>TextTrack</returns>
        TextTrack EditTextTrack (decimal texttrackId, decimal videoId, InlineObject63 inlineObject63 = default(InlineObject63));

        /// <summary>
        /// Edit a text track
        /// </summary>
        /// <remarks>
        /// This method edits the specified text track of a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject63"> (optional)</param>
        /// <returns>ApiResponse of TextTrack</returns>
        ApiResponse<TextTrack> EditTextTrackWithHttpInfo (decimal texttrackId, decimal videoId, InlineObject63 inlineObject63 = default(InlineObject63));
        /// <summary>
        /// Get a specific text track
        /// </summary>
        /// <remarks>
        /// This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>TextTrack</returns>
        TextTrack GetTextTrack (decimal texttrackId, decimal videoId);

        /// <summary>
        /// Get a specific text track
        /// </summary>
        /// <remarks>
        /// This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of TextTrack</returns>
        ApiResponse<TextTrack> GetTextTrackWithHttpInfo (decimal texttrackId, decimal videoId);
        /// <summary>
        /// Get all the text tracks of a video
        /// </summary>
        /// <remarks>
        /// This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>List&lt;TextTrack&gt;</returns>
        List<TextTrack> GetTextTracks (decimal videoId);

        /// <summary>
        /// Get all the text tracks of a video
        /// </summary>
        /// <remarks>
        /// This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of List&lt;TextTrack&gt;</returns>
        ApiResponse<List<TextTrack>> GetTextTracksWithHttpInfo (decimal videoId);
        /// <summary>
        /// Get all the text tracks of a video
        /// </summary>
        /// <remarks>
        /// This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>List&lt;TextTrack&gt;</returns>
        List<TextTrack> GetTextTracksAlt1 (decimal channelId, decimal videoId);

        /// <summary>
        /// Get all the text tracks of a video
        /// </summary>
        /// <remarks>
        /// This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of List&lt;TextTrack&gt;</returns>
        ApiResponse<List<TextTrack>> GetTextTracksAlt1WithHttpInfo (decimal channelId, decimal videoId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosTextTracksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a text track to a video
        /// </summary>
        /// <remarks>
        /// This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject62"></param>
        /// <returns>Task of TextTrack</returns>
        System.Threading.Tasks.Task<TextTrack> CreateTextTrackAsync (decimal videoId, InlineObject62 inlineObject62);

        /// <summary>
        /// Add a text track to a video
        /// </summary>
        /// <remarks>
        /// This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject62"></param>
        /// <returns>Task of ApiResponse (TextTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextTrack>> CreateTextTrackAsyncWithHttpInfo (decimal videoId, InlineObject62 inlineObject62);
        /// <summary>
        /// Add a text track to a video
        /// </summary>
        /// <remarks>
        /// This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject13"></param>
        /// <returns>Task of TextTrack</returns>
        System.Threading.Tasks.Task<TextTrack> CreateTextTrackAlt1Async (decimal channelId, decimal videoId, InlineObject13 inlineObject13);

        /// <summary>
        /// Add a text track to a video
        /// </summary>
        /// <remarks>
        /// This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject13"></param>
        /// <returns>Task of ApiResponse (TextTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextTrack>> CreateTextTrackAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, InlineObject13 inlineObject13);
        /// <summary>
        /// Delete a text track
        /// </summary>
        /// <remarks>
        /// This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTextTrackAsync (decimal texttrackId, decimal videoId);

        /// <summary>
        /// Delete a text track
        /// </summary>
        /// <remarks>
        /// This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTextTrackAsyncWithHttpInfo (decimal texttrackId, decimal videoId);
        /// <summary>
        /// Edit a text track
        /// </summary>
        /// <remarks>
        /// This method edits the specified text track of a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject63"> (optional)</param>
        /// <returns>Task of TextTrack</returns>
        System.Threading.Tasks.Task<TextTrack> EditTextTrackAsync (decimal texttrackId, decimal videoId, InlineObject63 inlineObject63 = default(InlineObject63));

        /// <summary>
        /// Edit a text track
        /// </summary>
        /// <remarks>
        /// This method edits the specified text track of a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject63"> (optional)</param>
        /// <returns>Task of ApiResponse (TextTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextTrack>> EditTextTrackAsyncWithHttpInfo (decimal texttrackId, decimal videoId, InlineObject63 inlineObject63 = default(InlineObject63));
        /// <summary>
        /// Get a specific text track
        /// </summary>
        /// <remarks>
        /// This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of TextTrack</returns>
        System.Threading.Tasks.Task<TextTrack> GetTextTrackAsync (decimal texttrackId, decimal videoId);

        /// <summary>
        /// Get a specific text track
        /// </summary>
        /// <remarks>
        /// This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (TextTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextTrack>> GetTextTrackAsyncWithHttpInfo (decimal texttrackId, decimal videoId);
        /// <summary>
        /// Get all the text tracks of a video
        /// </summary>
        /// <remarks>
        /// This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of List&lt;TextTrack&gt;</returns>
        System.Threading.Tasks.Task<List<TextTrack>> GetTextTracksAsync (decimal videoId);

        /// <summary>
        /// Get all the text tracks of a video
        /// </summary>
        /// <remarks>
        /// This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (List&lt;TextTrack&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TextTrack>>> GetTextTracksAsyncWithHttpInfo (decimal videoId);
        /// <summary>
        /// Get all the text tracks of a video
        /// </summary>
        /// <remarks>
        /// This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of List&lt;TextTrack&gt;</returns>
        System.Threading.Tasks.Task<List<TextTrack>> GetTextTracksAlt1Async (decimal channelId, decimal videoId);

        /// <summary>
        /// Get all the text tracks of a video
        /// </summary>
        /// <remarks>
        /// This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (List&lt;TextTrack&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TextTrack>>> GetTextTracksAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosTextTracksApi : IVideosTextTracksApiSync, IVideosTextTracksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VideosTextTracksApi : IVideosTextTracksApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosTextTracksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosTextTracksApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosTextTracksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosTextTracksApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosTextTracksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VideosTextTracksApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosTextTracksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VideosTextTracksApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a text track to a video This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject62"></param>
        /// <returns>TextTrack</returns>
        public TextTrack CreateTextTrack (decimal videoId, InlineObject62 inlineObject62)
        {
             VimeoOpenApi.Client.ApiResponse<TextTrack> localVarResponse = CreateTextTrackWithHttpInfo(videoId, inlineObject62);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a text track to a video This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject62"></param>
        /// <returns>ApiResponse of TextTrack</returns>
        public VimeoOpenApi.Client.ApiResponse< TextTrack > CreateTextTrackWithHttpInfo (decimal videoId, InlineObject62 inlineObject62)
        {
            // verify the required parameter 'inlineObject62' is set
            if (inlineObject62 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject62' when calling VideosTextTracksApi->CreateTextTrack");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject62;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< TextTrack >("/videos/{video_id}/texttracks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTextTrack", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a text track to a video This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject62"></param>
        /// <returns>Task of TextTrack</returns>
        public async System.Threading.Tasks.Task<TextTrack> CreateTextTrackAsync (decimal videoId, InlineObject62 inlineObject62)
        {
             VimeoOpenApi.Client.ApiResponse<TextTrack> localVarResponse = await CreateTextTrackAsyncWithHttpInfo(videoId, inlineObject62);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a text track to a video This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject62"></param>
        /// <returns>Task of ApiResponse (TextTrack)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<TextTrack>> CreateTextTrackAsyncWithHttpInfo (decimal videoId, InlineObject62 inlineObject62)
        {
            // verify the required parameter 'inlineObject62' is set
            if (inlineObject62 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject62' when calling VideosTextTracksApi->CreateTextTrack");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject62;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TextTrack>("/videos/{video_id}/texttracks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTextTrack", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a text track to a video This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject13"></param>
        /// <returns>TextTrack</returns>
        public TextTrack CreateTextTrackAlt1 (decimal channelId, decimal videoId, InlineObject13 inlineObject13)
        {
             VimeoOpenApi.Client.ApiResponse<TextTrack> localVarResponse = CreateTextTrackAlt1WithHttpInfo(channelId, videoId, inlineObject13);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a text track to a video This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject13"></param>
        /// <returns>ApiResponse of TextTrack</returns>
        public VimeoOpenApi.Client.ApiResponse< TextTrack > CreateTextTrackAlt1WithHttpInfo (decimal channelId, decimal videoId, InlineObject13 inlineObject13)
        {
            // verify the required parameter 'inlineObject13' is set
            if (inlineObject13 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject13' when calling VideosTextTracksApi->CreateTextTrackAlt1");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject13;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< TextTrack >("/channels/{channel_id}/videos/{video_id}/texttracks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTextTrackAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a text track to a video This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject13"></param>
        /// <returns>Task of TextTrack</returns>
        public async System.Threading.Tasks.Task<TextTrack> CreateTextTrackAlt1Async (decimal channelId, decimal videoId, InlineObject13 inlineObject13)
        {
             VimeoOpenApi.Client.ApiResponse<TextTrack> localVarResponse = await CreateTextTrackAlt1AsyncWithHttpInfo(channelId, videoId, inlineObject13);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a text track to a video This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject13"></param>
        /// <returns>Task of ApiResponse (TextTrack)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<TextTrack>> CreateTextTrackAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, InlineObject13 inlineObject13)
        {
            // verify the required parameter 'inlineObject13' is set
            if (inlineObject13 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject13' when calling VideosTextTracksApi->CreateTextTrackAlt1");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject13;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TextTrack>("/channels/{channel_id}/videos/{video_id}/texttracks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTextTrackAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a text track This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void DeleteTextTrack (decimal texttrackId, decimal videoId)
        {
             DeleteTextTrackWithHttpInfo(texttrackId, videoId);
        }

        /// <summary>
        /// Delete a text track This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteTextTrackWithHttpInfo (decimal texttrackId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("texttrack_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(texttrackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/videos/{video_id}/texttracks/{texttrack_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTextTrack", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a text track This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTextTrackAsync (decimal texttrackId, decimal videoId)
        {
             await DeleteTextTrackAsyncWithHttpInfo(texttrackId, videoId);

        }

        /// <summary>
        /// Delete a text track This method deletes the specified text track from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteTextTrackAsyncWithHttpInfo (decimal texttrackId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("texttrack_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(texttrackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/videos/{video_id}/texttracks/{texttrack_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTextTrack", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a text track This method edits the specified text track of a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject63"> (optional)</param>
        /// <returns>TextTrack</returns>
        public TextTrack EditTextTrack (decimal texttrackId, decimal videoId, InlineObject63 inlineObject63 = default(InlineObject63))
        {
             VimeoOpenApi.Client.ApiResponse<TextTrack> localVarResponse = EditTextTrackWithHttpInfo(texttrackId, videoId, inlineObject63);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a text track This method edits the specified text track of a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject63"> (optional)</param>
        /// <returns>ApiResponse of TextTrack</returns>
        public VimeoOpenApi.Client.ApiResponse< TextTrack > EditTextTrackWithHttpInfo (decimal texttrackId, decimal videoId, InlineObject63 inlineObject63 = default(InlineObject63))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("texttrack_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(texttrackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject63;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< TextTrack >("/videos/{video_id}/texttracks/{texttrack_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditTextTrack", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a text track This method edits the specified text track of a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject63"> (optional)</param>
        /// <returns>Task of TextTrack</returns>
        public async System.Threading.Tasks.Task<TextTrack> EditTextTrackAsync (decimal texttrackId, decimal videoId, InlineObject63 inlineObject63 = default(InlineObject63))
        {
             VimeoOpenApi.Client.ApiResponse<TextTrack> localVarResponse = await EditTextTrackAsyncWithHttpInfo(texttrackId, videoId, inlineObject63);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a text track This method edits the specified text track of a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject63"> (optional)</param>
        /// <returns>Task of ApiResponse (TextTrack)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<TextTrack>> EditTextTrackAsyncWithHttpInfo (decimal texttrackId, decimal videoId, InlineObject63 inlineObject63 = default(InlineObject63))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("texttrack_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(texttrackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject63;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<TextTrack>("/videos/{video_id}/texttracks/{texttrack_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditTextTrack", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific text track This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>TextTrack</returns>
        public TextTrack GetTextTrack (decimal texttrackId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<TextTrack> localVarResponse = GetTextTrackWithHttpInfo(texttrackId, videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific text track This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of TextTrack</returns>
        public VimeoOpenApi.Client.ApiResponse< TextTrack > GetTextTrackWithHttpInfo (decimal texttrackId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("texttrack_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(texttrackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TextTrack >("/videos/{video_id}/texttracks/{texttrack_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextTrack", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific text track This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of TextTrack</returns>
        public async System.Threading.Tasks.Task<TextTrack> GetTextTrackAsync (decimal texttrackId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<TextTrack> localVarResponse = await GetTextTrackAsyncWithHttpInfo(texttrackId, videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific text track This method returns a single text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="texttrackId">The ID of the text track.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (TextTrack)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<TextTrack>> GetTextTrackAsyncWithHttpInfo (decimal texttrackId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("texttrack_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(texttrackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TextTrack>("/videos/{video_id}/texttracks/{texttrack_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextTrack", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the text tracks of a video This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>List&lt;TextTrack&gt;</returns>
        public List<TextTrack> GetTextTracks (decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<List<TextTrack>> localVarResponse = GetTextTracksWithHttpInfo(videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the text tracks of a video This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of List&lt;TextTrack&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<TextTrack> > GetTextTracksWithHttpInfo (decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<TextTrack> >("/videos/{video_id}/texttracks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextTracks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the text tracks of a video This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of List&lt;TextTrack&gt;</returns>
        public async System.Threading.Tasks.Task<List<TextTrack>> GetTextTracksAsync (decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<List<TextTrack>> localVarResponse = await GetTextTracksAsyncWithHttpInfo(videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the text tracks of a video This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (List&lt;TextTrack&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<TextTrack>>> GetTextTracksAsyncWithHttpInfo (decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TextTrack>>("/videos/{video_id}/texttracks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextTracks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the text tracks of a video This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>List&lt;TextTrack&gt;</returns>
        public List<TextTrack> GetTextTracksAlt1 (decimal channelId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<List<TextTrack>> localVarResponse = GetTextTracksAlt1WithHttpInfo(channelId, videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the text tracks of a video This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of List&lt;TextTrack&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<TextTrack> > GetTextTracksAlt1WithHttpInfo (decimal channelId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<TextTrack> >("/channels/{channel_id}/videos/{video_id}/texttracks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextTracksAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the text tracks of a video This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of List&lt;TextTrack&gt;</returns>
        public async System.Threading.Tasks.Task<List<TextTrack>> GetTextTracksAlt1Async (decimal channelId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<List<TextTrack>> localVarResponse = await GetTextTracksAlt1AsyncWithHttpInfo(channelId, videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the text tracks of a video This method returns every text track of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (List&lt;TextTrack&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<TextTrack>>> GetTextTracksAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video.texttrack+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TextTrack>>("/channels/{channel_id}/videos/{video_id}/texttracks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTextTracksAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
