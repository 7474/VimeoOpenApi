/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShowcasesCustomShowcaseLogosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a custom logo to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        Picture CreateShowcaseLogo (decimal albumId, decimal userId);

        /// <summary>
        /// Add a custom logo to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> CreateShowcaseLogoWithHttpInfo (decimal albumId, decimal userId);
        /// <summary>
        /// Delete a custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        void DeleteShowcaseLogo (decimal albumId, decimal logoId, decimal userId);

        /// <summary>
        /// Delete a custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteShowcaseLogoWithHttpInfo (decimal albumId, decimal logoId, decimal userId);
        /// <summary>
        /// Get a specific custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        Picture GetShowcaseLogo (decimal albumId, decimal logoId, decimal userId);

        /// <summary>
        /// Get a specific custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> GetShowcaseLogoWithHttpInfo (decimal albumId, decimal logoId, decimal userId);
        /// <summary>
        /// Get all the custom logos of a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        List<Picture> GetShowcaseLogos (decimal albumId, decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the custom logos of a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        ApiResponse<List<Picture>> GetShowcaseLogosWithHttpInfo (decimal albumId, decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Replace a custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject41"> (optional)</param>
        /// <returns>Picture</returns>
        Picture ReplaceShowcaseLogo (decimal albumId, decimal logoId, decimal userId, InlineObject41 inlineObject41 = default(InlineObject41));

        /// <summary>
        /// Replace a custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject41"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> ReplaceShowcaseLogoWithHttpInfo (decimal albumId, decimal logoId, decimal userId, InlineObject41 inlineObject41 = default(InlineObject41));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShowcasesCustomShowcaseLogosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a custom logo to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> CreateShowcaseLogoAsync (decimal albumId, decimal userId);

        /// <summary>
        /// Add a custom logo to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> CreateShowcaseLogoAsyncWithHttpInfo (decimal albumId, decimal userId);
        /// <summary>
        /// Delete a custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteShowcaseLogoAsync (decimal albumId, decimal logoId, decimal userId);

        /// <summary>
        /// Delete a custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteShowcaseLogoAsyncWithHttpInfo (decimal albumId, decimal logoId, decimal userId);
        /// <summary>
        /// Get a specific custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> GetShowcaseLogoAsync (decimal albumId, decimal logoId, decimal userId);

        /// <summary>
        /// Get a specific custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> GetShowcaseLogoAsyncWithHttpInfo (decimal albumId, decimal logoId, decimal userId);
        /// <summary>
        /// Get all the custom logos of a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        System.Threading.Tasks.Task<List<Picture>> GetShowcaseLogosAsync (decimal albumId, decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the custom logos of a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Picture>>> GetShowcaseLogosAsyncWithHttpInfo (decimal albumId, decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Replace a custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject41"> (optional)</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> ReplaceShowcaseLogoAsync (decimal albumId, decimal logoId, decimal userId, InlineObject41 inlineObject41 = default(InlineObject41));

        /// <summary>
        /// Replace a custom showcase logo
        /// </summary>
        /// <remarks>
        /// This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject41"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> ReplaceShowcaseLogoAsyncWithHttpInfo (decimal albumId, decimal logoId, decimal userId, InlineObject41 inlineObject41 = default(InlineObject41));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShowcasesCustomShowcaseLogosApi : IShowcasesCustomShowcaseLogosApiSync, IShowcasesCustomShowcaseLogosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShowcasesCustomShowcaseLogosApi : IShowcasesCustomShowcaseLogosApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesCustomShowcaseLogosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShowcasesCustomShowcaseLogosApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesCustomShowcaseLogosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShowcasesCustomShowcaseLogosApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesCustomShowcaseLogosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShowcasesCustomShowcaseLogosApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesCustomShowcaseLogosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ShowcasesCustomShowcaseLogosApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a custom logo to a showcase This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        public Picture CreateShowcaseLogo (decimal albumId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = CreateShowcaseLogoWithHttpInfo(albumId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a custom logo to a showcase This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > CreateShowcaseLogoWithHttpInfo (decimal albumId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Picture >("/users/{user_id}/albums/{album_id}/logos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShowcaseLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a custom logo to a showcase This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> CreateShowcaseLogoAsync (decimal albumId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await CreateShowcaseLogoAsyncWithHttpInfo(albumId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a custom logo to a showcase This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> CreateShowcaseLogoAsyncWithHttpInfo (decimal albumId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Picture>("/users/{user_id}/albums/{album_id}/logos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShowcaseLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a custom showcase logo This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        public void DeleteShowcaseLogo (decimal albumId, decimal logoId, decimal userId)
        {
             DeleteShowcaseLogoWithHttpInfo(albumId, logoId, userId);
        }

        /// <summary>
        /// Delete a custom showcase logo This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteShowcaseLogoWithHttpInfo (decimal albumId, decimal logoId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("logo_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(logoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_id}/albums/{album_id}/logos/{logo_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteShowcaseLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a custom showcase logo This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteShowcaseLogoAsync (decimal albumId, decimal logoId, decimal userId)
        {
             await DeleteShowcaseLogoAsyncWithHttpInfo(albumId, logoId, userId);

        }

        /// <summary>
        /// Delete a custom showcase logo This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteShowcaseLogoAsyncWithHttpInfo (decimal albumId, decimal logoId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("logo_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(logoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_id}/albums/{album_id}/logos/{logo_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteShowcaseLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific custom showcase logo This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Picture</returns>
        public Picture GetShowcaseLogo (decimal albumId, decimal logoId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = GetShowcaseLogoWithHttpInfo(albumId, logoId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific custom showcase logo This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > GetShowcaseLogoWithHttpInfo (decimal albumId, decimal logoId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("logo_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(logoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Picture >("/users/{user_id}/albums/{album_id}/logos/{logo_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific custom showcase logo This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> GetShowcaseLogoAsync (decimal albumId, decimal logoId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await GetShowcaseLogoAsyncWithHttpInfo(albumId, logoId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific custom showcase logo This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> GetShowcaseLogoAsyncWithHttpInfo (decimal albumId, decimal logoId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("logo_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(logoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Picture>("/users/{user_id}/albums/{album_id}/logos/{logo_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the custom logos of a showcase This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        public List<Picture> GetShowcaseLogos (decimal albumId, decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = GetShowcaseLogosWithHttpInfo(albumId, userId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the custom logos of a showcase This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Picture> > GetShowcaseLogosWithHttpInfo (decimal albumId, decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Picture> >("/users/{user_id}/albums/{album_id}/logos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseLogos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the custom logos of a showcase This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        public async System.Threading.Tasks.Task<List<Picture>> GetShowcaseLogosAsync (decimal albumId, decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = await GetShowcaseLogosAsyncWithHttpInfo(albumId, userId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the custom logos of a showcase This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Picture>>> GetShowcaseLogosAsyncWithHttpInfo (decimal albumId, decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Picture>>("/users/{user_id}/albums/{album_id}/logos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseLogos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace a custom showcase logo This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject41"> (optional)</param>
        /// <returns>Picture</returns>
        public Picture ReplaceShowcaseLogo (decimal albumId, decimal logoId, decimal userId, InlineObject41 inlineObject41 = default(InlineObject41))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = ReplaceShowcaseLogoWithHttpInfo(albumId, logoId, userId, inlineObject41);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a custom showcase logo This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject41"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > ReplaceShowcaseLogoWithHttpInfo (decimal albumId, decimal logoId, decimal userId, InlineObject41 inlineObject41 = default(InlineObject41))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("logo_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(logoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject41;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Picture >("/users/{user_id}/albums/{album_id}/logos/{logo_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceShowcaseLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace a custom showcase logo This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject41"> (optional)</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> ReplaceShowcaseLogoAsync (decimal albumId, decimal logoId, decimal userId, InlineObject41 inlineObject41 = default(InlineObject41))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await ReplaceShowcaseLogoAsyncWithHttpInfo(albumId, logoId, userId, inlineObject41);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace a custom showcase logo This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.  For information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="logoId">The ID of the custom logo.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject41"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> ReplaceShowcaseLogoAsyncWithHttpInfo (decimal albumId, decimal logoId, decimal userId, InlineObject41 inlineObject41 = default(InlineObject41))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("logo_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(logoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject41;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Picture>("/users/{user_id}/albums/{album_id}/logos/{logo_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceShowcaseLogo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
