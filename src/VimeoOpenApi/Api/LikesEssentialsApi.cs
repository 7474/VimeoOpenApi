/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILikesEssentialsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check if the user has liked a video
        /// </summary>
        /// <remarks>
        /// This method checks if the authenticated user has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void CheckIfUserLikedVideo (decimal userId, decimal videoId);

        /// <summary>
        /// Check if the user has liked a video
        /// </summary>
        /// <remarks>
        /// This method checks if the authenticated user has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckIfUserLikedVideoWithHttpInfo (decimal userId, decimal videoId);
        /// <summary>
        /// Check if the user has liked a video
        /// </summary>
        /// <remarks>
        /// This method checks if the authenticated user has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void CheckIfUserLikedVideoAlt1 (decimal videoId);

        /// <summary>
        /// Check if the user has liked a video
        /// </summary>
        /// <remarks>
        /// This method checks if the authenticated user has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckIfUserLikedVideoAlt1WithHttpInfo (decimal videoId);
        /// <summary>
        /// Get all the videos that a user has liked
        /// </summary>
        /// <remarks>
        /// This method returns every video that the authenticated user has liked.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetLikes (decimal userId, string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos that a user has liked
        /// </summary>
        /// <remarks>
        /// This method returns every video that the authenticated user has liked.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetLikesWithHttpInfo (decimal userId, string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the videos that a user has liked
        /// </summary>
        /// <remarks>
        /// This method returns every video that the authenticated user has liked.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetLikesAlt1 (string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos that a user has liked
        /// </summary>
        /// <remarks>
        /// This method returns every video that the authenticated user has liked.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetLikesAlt1WithHttpInfo (string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the users who have liked a video
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetVideoLikes (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the users who have liked a video
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetVideoLikesWithHttpInfo (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Get all the users who have liked a video
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetVideoLikesAlt1 (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the users who have liked a video
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetVideoLikesAlt1WithHttpInfo (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Get all the users who have liked a video on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video on an On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;extra&#x60; - Consider extra content only.  * &#x60;main&#x60; - Consider main content only.  * &#x60;trailer&#x60; - Consider trailer content only.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetVodLikes (decimal ondemandId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the users who have liked a video on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video on an On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;extra&#x60; - Consider extra content only.  * &#x60;main&#x60; - Consider main content only.  * &#x60;trailer&#x60; - Consider trailer content only.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetVodLikesWithHttpInfo (decimal ondemandId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Cause the user to like a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void LikeVideo (decimal userId, decimal videoId);

        /// <summary>
        /// Cause the user to like a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LikeVideoWithHttpInfo (decimal userId, decimal videoId);
        /// <summary>
        /// Cause the user to like a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void LikeVideoAlt1 (decimal videoId);

        /// <summary>
        /// Cause the user to like a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LikeVideoAlt1WithHttpInfo (decimal videoId);
        /// <summary>
        /// Cause a user to unlike a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to unlike the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void UnlikeVideo (decimal userId, decimal videoId);

        /// <summary>
        /// Cause a user to unlike a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to unlike the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlikeVideoWithHttpInfo (decimal userId, decimal videoId);
        /// <summary>
        /// Cause a user to unlike a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to unlike the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void UnlikeVideoAlt1 (decimal videoId);

        /// <summary>
        /// Cause a user to unlike a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to unlike the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlikeVideoAlt1WithHttpInfo (decimal videoId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILikesEssentialsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check if the user has liked a video
        /// </summary>
        /// <remarks>
        /// This method checks if the authenticated user has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckIfUserLikedVideoAsync (decimal userId, decimal videoId);

        /// <summary>
        /// Check if the user has liked a video
        /// </summary>
        /// <remarks>
        /// This method checks if the authenticated user has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckIfUserLikedVideoAsyncWithHttpInfo (decimal userId, decimal videoId);
        /// <summary>
        /// Check if the user has liked a video
        /// </summary>
        /// <remarks>
        /// This method checks if the authenticated user has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckIfUserLikedVideoAlt1Async (decimal videoId);

        /// <summary>
        /// Check if the user has liked a video
        /// </summary>
        /// <remarks>
        /// This method checks if the authenticated user has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckIfUserLikedVideoAlt1AsyncWithHttpInfo (decimal videoId);
        /// <summary>
        /// Get all the videos that a user has liked
        /// </summary>
        /// <remarks>
        /// This method returns every video that the authenticated user has liked.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetLikesAsync (decimal userId, string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos that a user has liked
        /// </summary>
        /// <remarks>
        /// This method returns every video that the authenticated user has liked.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetLikesAsyncWithHttpInfo (decimal userId, string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the videos that a user has liked
        /// </summary>
        /// <remarks>
        /// This method returns every video that the authenticated user has liked.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetLikesAlt1Async (string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos that a user has liked
        /// </summary>
        /// <remarks>
        /// This method returns every video that the authenticated user has liked.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetLikesAlt1AsyncWithHttpInfo (string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the users who have liked a video
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetVideoLikesAsync (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the users who have liked a video
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetVideoLikesAsyncWithHttpInfo (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Get all the users who have liked a video
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetVideoLikesAlt1Async (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the users who have liked a video
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetVideoLikesAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Get all the users who have liked a video on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video on an On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;extra&#x60; - Consider extra content only.  * &#x60;main&#x60; - Consider main content only.  * &#x60;trailer&#x60; - Consider trailer content only.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetVodLikesAsync (decimal ondemandId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the users who have liked a video on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every user who has liked the specified video on an On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;extra&#x60; - Consider extra content only.  * &#x60;main&#x60; - Consider main content only.  * &#x60;trailer&#x60; - Consider trailer content only.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetVodLikesAsyncWithHttpInfo (decimal ondemandId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Cause the user to like a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LikeVideoAsync (decimal userId, decimal videoId);

        /// <summary>
        /// Cause the user to like a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LikeVideoAsyncWithHttpInfo (decimal userId, decimal videoId);
        /// <summary>
        /// Cause the user to like a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LikeVideoAlt1Async (decimal videoId);

        /// <summary>
        /// Cause the user to like a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LikeVideoAlt1AsyncWithHttpInfo (decimal videoId);
        /// <summary>
        /// Cause a user to unlike a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to unlike the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlikeVideoAsync (decimal userId, decimal videoId);

        /// <summary>
        /// Cause a user to unlike a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to unlike the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnlikeVideoAsyncWithHttpInfo (decimal userId, decimal videoId);
        /// <summary>
        /// Cause a user to unlike a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to unlike the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlikeVideoAlt1Async (decimal videoId);

        /// <summary>
        /// Cause a user to unlike a video
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to unlike the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnlikeVideoAlt1AsyncWithHttpInfo (decimal videoId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILikesEssentialsApi : ILikesEssentialsApiSync, ILikesEssentialsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LikesEssentialsApi : ILikesEssentialsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LikesEssentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LikesEssentialsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LikesEssentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LikesEssentialsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LikesEssentialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LikesEssentialsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LikesEssentialsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LikesEssentialsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check if the user has liked a video This method checks if the authenticated user has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void CheckIfUserLikedVideo (decimal userId, decimal videoId)
        {
             CheckIfUserLikedVideoWithHttpInfo(userId, videoId);
        }

        /// <summary>
        /// Check if the user has liked a video This method checks if the authenticated user has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> CheckIfUserLikedVideoWithHttpInfo (decimal userId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/users/{user_id}/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserLikedVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the user has liked a video This method checks if the authenticated user has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckIfUserLikedVideoAsync (decimal userId, decimal videoId)
        {
             await CheckIfUserLikedVideoAsyncWithHttpInfo(userId, videoId);

        }

        /// <summary>
        /// Check if the user has liked a video This method checks if the authenticated user has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> CheckIfUserLikedVideoAsyncWithHttpInfo (decimal userId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/users/{user_id}/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserLikedVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the user has liked a video This method checks if the authenticated user has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void CheckIfUserLikedVideoAlt1 (decimal videoId)
        {
             CheckIfUserLikedVideoAlt1WithHttpInfo(videoId);
        }

        /// <summary>
        /// Check if the user has liked a video This method checks if the authenticated user has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> CheckIfUserLikedVideoAlt1WithHttpInfo (decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/me/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserLikedVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the user has liked a video This method checks if the authenticated user has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckIfUserLikedVideoAlt1Async (decimal videoId)
        {
             await CheckIfUserLikedVideoAlt1AsyncWithHttpInfo(videoId);

        }

        /// <summary>
        /// Check if the user has liked a video This method checks if the authenticated user has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> CheckIfUserLikedVideoAlt1AsyncWithHttpInfo (decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/me/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserLikedVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos that a user has liked This method returns every video that the authenticated user has liked.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetLikes (decimal userId, string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetLikesWithHttpInfo(userId, filter, filterEmbeddable, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the videos that a user has liked This method returns every video that the authenticated user has liked.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetLikesWithHttpInfo (decimal userId, string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/users/{user_id}/likes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLikes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos that a user has liked This method returns every video that the authenticated user has liked.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetLikesAsync (decimal userId, string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetLikesAsyncWithHttpInfo(userId, filter, filterEmbeddable, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the videos that a user has liked This method returns every video that the authenticated user has liked.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetLikesAsyncWithHttpInfo (decimal userId, string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/users/{user_id}/likes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLikes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos that a user has liked This method returns every video that the authenticated user has liked.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetLikesAlt1 (string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetLikesAlt1WithHttpInfo(filter, filterEmbeddable, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the videos that a user has liked This method returns every video that the authenticated user has liked.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetLikesAlt1WithHttpInfo (string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/me/likes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLikesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos that a user has liked This method returns every video that the authenticated user has liked.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetLikesAlt1Async (string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetLikesAlt1AsyncWithHttpInfo(filter, filterEmbeddable, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the videos that a user has liked This method returns every video that the authenticated user has liked.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by creation date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetLikesAlt1AsyncWithHttpInfo (string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/me/likes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLikesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the users who have liked a video This method returns every user who has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetVideoLikes (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = GetVideoLikesWithHttpInfo(videoId, direction, page, perPage, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the users who have liked a video This method returns every user who has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<User> > GetVideoLikesWithHttpInfo (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<User> >("/videos/{video_id}/likes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoLikes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the users who have liked a video This method returns every user who has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetVideoLikesAsync (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = await GetVideoLikesAsyncWithHttpInfo(videoId, direction, page, perPage, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the users who have liked a video This method returns every user who has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<User>>> GetVideoLikesAsyncWithHttpInfo (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/videos/{video_id}/likes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoLikes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the users who have liked a video This method returns every user who has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetVideoLikesAlt1 (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = GetVideoLikesAlt1WithHttpInfo(channelId, videoId, direction, page, perPage, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the users who have liked a video This method returns every user who has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<User> > GetVideoLikesAlt1WithHttpInfo (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<User> >("/channels/{channel_id}/videos/{video_id}/likes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoLikesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the users who have liked a video This method returns every user who has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetVideoLikesAlt1Async (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = await GetVideoLikesAlt1AsyncWithHttpInfo(channelId, videoId, direction, page, perPage, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the users who have liked a video This method returns every user who has liked the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<User>>> GetVideoLikesAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/channels/{channel_id}/videos/{video_id}/likes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoLikesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the users who have liked a video on an On Demand page This method returns every user who has liked the specified video on an On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;extra&#x60; - Consider extra content only.  * &#x60;main&#x60; - Consider main content only.  * &#x60;trailer&#x60; - Consider trailer content only.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetVodLikes (decimal ondemandId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = GetVodLikesWithHttpInfo(ondemandId, direction, filter, page, perPage, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the users who have liked a video on an On Demand page This method returns every user who has liked the specified video on an On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;extra&#x60; - Consider extra content only.  * &#x60;main&#x60; - Consider main content only.  * &#x60;trailer&#x60; - Consider trailer content only.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<User> > GetVodLikesWithHttpInfo (decimal ondemandId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<User> >("/ondemand/pages/{ondemand_id}/likes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodLikes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the users who have liked a video on an On Demand page This method returns every user who has liked the specified video on an On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;extra&#x60; - Consider extra content only.  * &#x60;main&#x60; - Consider main content only.  * &#x60;trailer&#x60; - Consider trailer content only.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetVodLikesAsync (decimal ondemandId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = await GetVodLikesAsyncWithHttpInfo(ondemandId, direction, filter, page, perPage, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the users who have liked a video on an On Demand page This method returns every user who has liked the specified video on an On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;extra&#x60; - Consider extra content only.  * &#x60;main&#x60; - Consider main content only.  * &#x60;trailer&#x60; - Consider trailer content only.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by join date.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<User>>> GetVodLikesAsyncWithHttpInfo (decimal ondemandId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/ondemand/pages/{ondemand_id}/likes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodLikes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cause the user to like a video This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void LikeVideo (decimal userId, decimal videoId)
        {
             LikeVideoWithHttpInfo(userId, videoId);
        }

        /// <summary>
        /// Cause the user to like a video This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> LikeVideoWithHttpInfo (decimal userId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/{user_id}/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LikeVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cause the user to like a video This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LikeVideoAsync (decimal userId, decimal videoId)
        {
             await LikeVideoAsyncWithHttpInfo(userId, videoId);

        }

        /// <summary>
        /// Cause the user to like a video This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> LikeVideoAsyncWithHttpInfo (decimal userId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/{user_id}/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LikeVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cause the user to like a video This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void LikeVideoAlt1 (decimal videoId)
        {
             LikeVideoAlt1WithHttpInfo(videoId);
        }

        /// <summary>
        /// Cause the user to like a video This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> LikeVideoAlt1WithHttpInfo (decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/me/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LikeVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cause the user to like a video This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LikeVideoAlt1Async (decimal videoId)
        {
             await LikeVideoAlt1AsyncWithHttpInfo(videoId);

        }

        /// <summary>
        /// Cause the user to like a video This method causes the authenticated user to like the specified video. The user can&#39;t like their own video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> LikeVideoAlt1AsyncWithHttpInfo (decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/me/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LikeVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cause a user to unlike a video This method causes the authenticated user to unlike the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void UnlikeVideo (decimal userId, decimal videoId)
        {
             UnlikeVideoWithHttpInfo(userId, videoId);
        }

        /// <summary>
        /// Cause a user to unlike a video This method causes the authenticated user to unlike the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> UnlikeVideoWithHttpInfo (decimal userId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_id}/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlikeVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cause a user to unlike a video This method causes the authenticated user to unlike the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlikeVideoAsync (decimal userId, decimal videoId)
        {
             await UnlikeVideoAsyncWithHttpInfo(userId, videoId);

        }

        /// <summary>
        /// Cause a user to unlike a video This method causes the authenticated user to unlike the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> UnlikeVideoAsyncWithHttpInfo (decimal userId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_id}/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlikeVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cause a user to unlike a video This method causes the authenticated user to unlike the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void UnlikeVideoAlt1 (decimal videoId)
        {
             UnlikeVideoAlt1WithHttpInfo(videoId);
        }

        /// <summary>
        /// Cause a user to unlike a video This method causes the authenticated user to unlike the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> UnlikeVideoAlt1WithHttpInfo (decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/me/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlikeVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cause a user to unlike a video This method causes the authenticated user to unlike the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlikeVideoAlt1Async (decimal videoId)
        {
             await UnlikeVideoAlt1AsyncWithHttpInfo(videoId);

        }

        /// <summary>
        /// Cause a user to unlike a video This method causes the authenticated user to unlike the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> UnlikeVideoAlt1AsyncWithHttpInfo (decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/me/likes/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlikeVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
