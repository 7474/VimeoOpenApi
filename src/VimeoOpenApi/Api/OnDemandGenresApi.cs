/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandGenresApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a genre to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandGenre</returns>
        OnDemandGenre AddVodGenre (string genreId, decimal ondemandId);

        /// <summary>
        /// Add a genre to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandGenre</returns>
        ApiResponse<OnDemandGenre> AddVodGenreWithHttpInfo (string genreId, decimal ondemandId);
        /// <summary>
        /// Remove a genre from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns></returns>
        void DeleteVodGenre (string genreId, decimal ondemandId);

        /// <summary>
        /// Remove a genre from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVodGenreWithHttpInfo (string genreId, decimal ondemandId);
        /// <summary>
        /// Get a specific On Demand page in a genre
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand page that belongs to the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandPage</returns>
        OnDemandPage GetGenreVod (string genreId, decimal ondemandId);

        /// <summary>
        /// Get a specific On Demand page in a genre
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand page that belongs to the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandPage</returns>
        ApiResponse<OnDemandPage> GetGenreVodWithHttpInfo (string genreId, decimal ondemandId);
        /// <summary>
        /// Get all the On Demand pages in a genre
        /// </summary>
        /// <remarks>
        /// This method returns every On Demand page that belongs to the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>List&lt;OnDemandPage&gt;</returns>
        List<OnDemandPage> GetGenreVods (string genreId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the On Demand pages in a genre
        /// </summary>
        /// <remarks>
        /// This method returns every On Demand page that belongs to the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;OnDemandPage&gt;</returns>
        ApiResponse<List<OnDemandPage>> GetGenreVodsWithHttpInfo (string genreId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get a specific On Demand genre
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <returns>OnDemandGenre</returns>
        OnDemandGenre GetVodGenre (string genreId);

        /// <summary>
        /// Get a specific On Demand genre
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <returns>ApiResponse of OnDemandGenre</returns>
        ApiResponse<OnDemandGenre> GetVodGenreWithHttpInfo (string genreId);
        /// <summary>
        /// Check whether an On Demand page belongs to a specific genre
        /// </summary>
        /// <remarks>
        /// This method determines whether an On Demand page is associated with the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandGenre</returns>
        OnDemandGenre GetVodGenreByOndemandId (string genreId, decimal ondemandId);

        /// <summary>
        /// Check whether an On Demand page belongs to a specific genre
        /// </summary>
        /// <remarks>
        /// This method determines whether an On Demand page is associated with the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandGenre</returns>
        ApiResponse<OnDemandGenre> GetVodGenreByOndemandIdWithHttpInfo (string genreId, decimal ondemandId);
        /// <summary>
        /// Get all On Demand genres
        /// </summary>
        /// <remarks>
        /// This method returns every existing On Demand genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OnDemandGenre&gt;</returns>
        List<OnDemandGenre> GetVodGenres ();

        /// <summary>
        /// Get all On Demand genres
        /// </summary>
        /// <remarks>
        /// This method returns every existing On Demand genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OnDemandGenre&gt;</returns>
        ApiResponse<List<OnDemandGenre>> GetVodGenresWithHttpInfo ();
        /// <summary>
        /// Get all the genres of an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every genre associated with the specified On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>List&lt;OnDemandGenre&gt;</returns>
        List<OnDemandGenre> GetVodGenresByOndemandId (decimal ondemandId);

        /// <summary>
        /// Get all the genres of an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every genre associated with the specified On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of List&lt;OnDemandGenre&gt;</returns>
        ApiResponse<List<OnDemandGenre>> GetVodGenresByOndemandIdWithHttpInfo (decimal ondemandId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandGenresApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a genre to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandGenre</returns>
        System.Threading.Tasks.Task<OnDemandGenre> AddVodGenreAsync (string genreId, decimal ondemandId);

        /// <summary>
        /// Add a genre to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandGenre)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandGenre>> AddVodGenreAsyncWithHttpInfo (string genreId, decimal ondemandId);
        /// <summary>
        /// Remove a genre from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVodGenreAsync (string genreId, decimal ondemandId);

        /// <summary>
        /// Remove a genre from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVodGenreAsyncWithHttpInfo (string genreId, decimal ondemandId);
        /// <summary>
        /// Get a specific On Demand page in a genre
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand page that belongs to the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandPage</returns>
        System.Threading.Tasks.Task<OnDemandPage> GetGenreVodAsync (string genreId, decimal ondemandId);

        /// <summary>
        /// Get a specific On Demand page in a genre
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand page that belongs to the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandPage>> GetGenreVodAsyncWithHttpInfo (string genreId, decimal ondemandId);
        /// <summary>
        /// Get all the On Demand pages in a genre
        /// </summary>
        /// <remarks>
        /// This method returns every On Demand page that belongs to the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of List&lt;OnDemandPage&gt;</returns>
        System.Threading.Tasks.Task<List<OnDemandPage>> GetGenreVodsAsync (string genreId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the On Demand pages in a genre
        /// </summary>
        /// <remarks>
        /// This method returns every On Demand page that belongs to the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandPage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OnDemandPage>>> GetGenreVodsAsyncWithHttpInfo (string genreId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get a specific On Demand genre
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <returns>Task of OnDemandGenre</returns>
        System.Threading.Tasks.Task<OnDemandGenre> GetVodGenreAsync (string genreId);

        /// <summary>
        /// Get a specific On Demand genre
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <returns>Task of ApiResponse (OnDemandGenre)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandGenre>> GetVodGenreAsyncWithHttpInfo (string genreId);
        /// <summary>
        /// Check whether an On Demand page belongs to a specific genre
        /// </summary>
        /// <remarks>
        /// This method determines whether an On Demand page is associated with the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandGenre</returns>
        System.Threading.Tasks.Task<OnDemandGenre> GetVodGenreByOndemandIdAsync (string genreId, decimal ondemandId);

        /// <summary>
        /// Check whether an On Demand page belongs to a specific genre
        /// </summary>
        /// <remarks>
        /// This method determines whether an On Demand page is associated with the specified genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandGenre)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandGenre>> GetVodGenreByOndemandIdAsyncWithHttpInfo (string genreId, decimal ondemandId);
        /// <summary>
        /// Get all On Demand genres
        /// </summary>
        /// <remarks>
        /// This method returns every existing On Demand genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OnDemandGenre&gt;</returns>
        System.Threading.Tasks.Task<List<OnDemandGenre>> GetVodGenresAsync ();

        /// <summary>
        /// Get all On Demand genres
        /// </summary>
        /// <remarks>
        /// This method returns every existing On Demand genre.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OnDemandGenre&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OnDemandGenre>>> GetVodGenresAsyncWithHttpInfo ();
        /// <summary>
        /// Get all the genres of an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every genre associated with the specified On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of List&lt;OnDemandGenre&gt;</returns>
        System.Threading.Tasks.Task<List<OnDemandGenre>> GetVodGenresByOndemandIdAsync (decimal ondemandId);

        /// <summary>
        /// Get all the genres of an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every genre associated with the specified On Demand page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandGenre&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OnDemandGenre>>> GetVodGenresByOndemandIdAsyncWithHttpInfo (decimal ondemandId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandGenresApi : IOnDemandGenresApiSync, IOnDemandGenresApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OnDemandGenresApi : IOnDemandGenresApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandGenresApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnDemandGenresApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandGenresApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnDemandGenresApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandGenresApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OnDemandGenresApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandGenresApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OnDemandGenresApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a genre to an On Demand page This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandGenre</returns>
        public OnDemandGenre AddVodGenre (string genreId, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandGenre> localVarResponse = AddVodGenreWithHttpInfo(genreId, ondemandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a genre to an On Demand page This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandGenre</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandGenre > AddVodGenreWithHttpInfo (string genreId, decimal ondemandId)
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->AddVodGenre");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< OnDemandGenre >("/ondemand/pages/{ondemand_id}/genres/{genre_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVodGenre", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a genre to an On Demand page This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandGenre</returns>
        public async System.Threading.Tasks.Task<OnDemandGenre> AddVodGenreAsync (string genreId, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandGenre> localVarResponse = await AddVodGenreAsyncWithHttpInfo(genreId, ondemandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a genre to an On Demand page This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandGenre)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandGenre>> AddVodGenreAsyncWithHttpInfo (string genreId, decimal ondemandId)
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->AddVodGenre");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<OnDemandGenre>("/ondemand/pages/{ondemand_id}/genres/{genre_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVodGenre", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a genre from an On Demand page This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns></returns>
        public void DeleteVodGenre (string genreId, decimal ondemandId)
        {
             DeleteVodGenreWithHttpInfo(genreId, ondemandId);
        }

        /// <summary>
        /// Remove a genre from an On Demand page This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteVodGenreWithHttpInfo (string genreId, decimal ondemandId)
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->DeleteVodGenre");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ondemand/pages/{ondemand_id}/genres/{genre_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVodGenre", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a genre from an On Demand page This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVodGenreAsync (string genreId, decimal ondemandId)
        {
             await DeleteVodGenreAsyncWithHttpInfo(genreId, ondemandId);

        }

        /// <summary>
        /// Remove a genre from an On Demand page This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteVodGenreAsyncWithHttpInfo (string genreId, decimal ondemandId)
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->DeleteVodGenre");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ondemand/pages/{ondemand_id}/genres/{genre_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVodGenre", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific On Demand page in a genre This method returns a single On Demand page that belongs to the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandPage</returns>
        public OnDemandPage GetGenreVod (string genreId, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPage> localVarResponse = GetGenreVodWithHttpInfo(genreId, ondemandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific On Demand page in a genre This method returns a single On Demand page that belongs to the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandPage</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandPage > GetGenreVodWithHttpInfo (string genreId, decimal ondemandId)
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->GetGenreVod");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.page+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnDemandPage >("/ondemand/genres/{genre_id}/pages/{ondemand_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGenreVod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific On Demand page in a genre This method returns a single On Demand page that belongs to the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandPage</returns>
        public async System.Threading.Tasks.Task<OnDemandPage> GetGenreVodAsync (string genreId, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPage> localVarResponse = await GetGenreVodAsyncWithHttpInfo(genreId, ondemandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific On Demand page in a genre This method returns a single On Demand page that belongs to the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandPage)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandPage>> GetGenreVodAsyncWithHttpInfo (string genreId, decimal ondemandId)
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->GetGenreVod");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.page+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnDemandPage>("/ondemand/genres/{genre_id}/pages/{ondemand_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGenreVod", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the On Demand pages in a genre This method returns every On Demand page that belongs to the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>List&lt;OnDemandPage&gt;</returns>
        public List<OnDemandPage> GetGenreVods (string genreId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandPage>> localVarResponse = GetGenreVodsWithHttpInfo(genreId, direction, filter, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the On Demand pages in a genre This method returns every On Demand page that belongs to the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>ApiResponse of List&lt;OnDemandPage&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<OnDemandPage> > GetGenreVodsWithHttpInfo (string genreId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->GetGenreVods");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.page+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<OnDemandPage> >("/ondemand/genres/{genre_id}/pages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGenreVods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the On Demand pages in a genre This method returns every On Demand page that belongs to the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of List&lt;OnDemandPage&gt;</returns>
        public async System.Threading.Tasks.Task<List<OnDemandPage>> GetGenreVodsAsync (string genreId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandPage>> localVarResponse = await GetGenreVodsAsyncWithHttpInfo(genreId, direction, filter, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the On Demand pages in a genre This method returns every On Demand page that belongs to the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandPage&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<OnDemandPage>>> GetGenreVodsAsyncWithHttpInfo (string genreId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->GetGenreVods");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.page+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OnDemandPage>>("/ondemand/genres/{genre_id}/pages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGenreVods", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific On Demand genre This method returns a single On Demand genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <returns>OnDemandGenre</returns>
        public OnDemandGenre GetVodGenre (string genreId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandGenre> localVarResponse = GetVodGenreWithHttpInfo(genreId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific On Demand genre This method returns a single On Demand genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <returns>ApiResponse of OnDemandGenre</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandGenre > GetVodGenreWithHttpInfo (string genreId)
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->GetVodGenre");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnDemandGenre >("/ondemand/genres/{genre_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodGenre", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific On Demand genre This method returns a single On Demand genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <returns>Task of OnDemandGenre</returns>
        public async System.Threading.Tasks.Task<OnDemandGenre> GetVodGenreAsync (string genreId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandGenre> localVarResponse = await GetVodGenreAsyncWithHttpInfo(genreId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific On Demand genre This method returns a single On Demand genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <returns>Task of ApiResponse (OnDemandGenre)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandGenre>> GetVodGenreAsyncWithHttpInfo (string genreId)
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->GetVodGenre");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnDemandGenre>("/ondemand/genres/{genre_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodGenre", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check whether an On Demand page belongs to a specific genre This method determines whether an On Demand page is associated with the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandGenre</returns>
        public OnDemandGenre GetVodGenreByOndemandId (string genreId, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandGenre> localVarResponse = GetVodGenreByOndemandIdWithHttpInfo(genreId, ondemandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether an On Demand page belongs to a specific genre This method determines whether an On Demand page is associated with the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandGenre</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandGenre > GetVodGenreByOndemandIdWithHttpInfo (string genreId, decimal ondemandId)
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->GetVodGenreByOndemandId");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnDemandGenre >("/ondemand/pages/{ondemand_id}/genres/{genre_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodGenreByOndemandId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check whether an On Demand page belongs to a specific genre This method determines whether an On Demand page is associated with the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandGenre</returns>
        public async System.Threading.Tasks.Task<OnDemandGenre> GetVodGenreByOndemandIdAsync (string genreId, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandGenre> localVarResponse = await GetVodGenreByOndemandIdAsyncWithHttpInfo(genreId, ondemandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check whether an On Demand page belongs to a specific genre This method determines whether an On Demand page is associated with the specified genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="genreId">The ID of the genre.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandGenre)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandGenre>> GetVodGenreByOndemandIdAsyncWithHttpInfo (string genreId, decimal ondemandId)
        {
            // verify the required parameter 'genreId' is set
            if (genreId == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'genreId' when calling OnDemandGenresApi->GetVodGenreByOndemandId");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("genre_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(genreId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnDemandGenre>("/ondemand/pages/{ondemand_id}/genres/{genre_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodGenreByOndemandId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all On Demand genres This method returns every existing On Demand genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OnDemandGenre&gt;</returns>
        public List<OnDemandGenre> GetVodGenres ()
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandGenre>> localVarResponse = GetVodGenresWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all On Demand genres This method returns every existing On Demand genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OnDemandGenre&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<OnDemandGenre> > GetVodGenresWithHttpInfo ()
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<OnDemandGenre> >("/ondemand/genres", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodGenres", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all On Demand genres This method returns every existing On Demand genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OnDemandGenre&gt;</returns>
        public async System.Threading.Tasks.Task<List<OnDemandGenre>> GetVodGenresAsync ()
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandGenre>> localVarResponse = await GetVodGenresAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all On Demand genres This method returns every existing On Demand genre.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OnDemandGenre&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<OnDemandGenre>>> GetVodGenresAsyncWithHttpInfo ()
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OnDemandGenre>>("/ondemand/genres", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodGenres", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the genres of an On Demand page This method returns every genre associated with the specified On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>List&lt;OnDemandGenre&gt;</returns>
        public List<OnDemandGenre> GetVodGenresByOndemandId (decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandGenre>> localVarResponse = GetVodGenresByOndemandIdWithHttpInfo(ondemandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the genres of an On Demand page This method returns every genre associated with the specified On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of List&lt;OnDemandGenre&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<OnDemandGenre> > GetVodGenresByOndemandIdWithHttpInfo (decimal ondemandId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<OnDemandGenre> >("/ondemand/pages/{ondemand_id}/genres", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodGenresByOndemandId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the genres of an On Demand page This method returns every genre associated with the specified On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of List&lt;OnDemandGenre&gt;</returns>
        public async System.Threading.Tasks.Task<List<OnDemandGenre>> GetVodGenresByOndemandIdAsync (decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandGenre>> localVarResponse = await GetVodGenresByOndemandIdAsyncWithHttpInfo(ondemandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the genres of an On Demand page This method returns every genre associated with the specified On Demand page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandGenre&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<OnDemandGenre>>> GetVodGenresByOndemandIdAsyncWithHttpInfo (decimal ondemandId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.genre+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OnDemandGenre>>("/ondemand/pages/{ondemand_id}/genres", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodGenresByOndemandId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
