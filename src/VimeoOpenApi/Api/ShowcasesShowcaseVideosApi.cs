/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShowcasesShowcaseVideosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a specific video to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void AddVideoToShowcase (decimal albumId, decimal userId, decimal videoId);

        /// <summary>
        /// Add a specific video to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddVideoToShowcaseWithHttpInfo (decimal albumId, decimal userId, decimal videoId);
        /// <summary>
        /// Add a specific video to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void AddVideoToShowcaseAlt1 (decimal albumId, decimal videoId);

        /// <summary>
        /// Add a specific video to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddVideoToShowcaseAlt1WithHttpInfo (decimal albumId, decimal videoId);
        /// <summary>
        /// Get all the user&#39;s videos that can be added to or removed from a showcase
        /// </summary>
        /// <remarks>
        /// This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by most recent user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetAvailableShowcaseVideos (decimal albumId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the user&#39;s videos that can be added to or removed from a showcase
        /// </summary>
        /// <remarks>
        /// This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by most recent user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetAvailableShowcaseVideosWithHttpInfo (decimal albumId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Get all the showcases to which the user can add or remove a specific video
        /// </summary>
        /// <remarks>
        /// This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Album&gt;</returns>
        List<Album> GetAvailableVideoShowcases (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the showcases to which the user can add or remove a specific video
        /// </summary>
        /// <remarks>
        /// This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Album&gt;</returns>
        ApiResponse<List<Album>> GetAvailableVideoShowcasesWithHttpInfo (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Get a specific video in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Video</returns>
        Video GetShowcaseVideo (decimal albumId, decimal userId, decimal videoId, string password = default(string));

        /// <summary>
        /// Get a specific video in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> GetShowcaseVideoWithHttpInfo (decimal albumId, decimal userId, decimal videoId, string password = default(string));
        /// <summary>
        /// Get a specific video in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Video</returns>
        Video GetShowcaseVideoAlt1 (decimal albumId, decimal videoId, string password = default(string));

        /// <summary>
        /// Get a specific video in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> GetShowcaseVideoAlt1WithHttpInfo (decimal albumId, decimal videoId, string password = default(string));
        /// <summary>
        /// Get all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetShowcaseVideos (decimal albumId, decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?));

        /// <summary>
        /// Get all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetShowcaseVideosWithHttpInfo (decimal albumId, decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?));
        /// <summary>
        /// Get all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetShowcaseVideosAlt1 (decimal albumId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?));

        /// <summary>
        /// Get all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetShowcaseVideosAlt1WithHttpInfo (decimal albumId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?));
        /// <summary>
        /// Remove a video from a showcase
        /// </summary>
        /// <remarks>
        /// This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void RemoveVideoFromShowcase (decimal albumId, decimal userId, decimal videoId);

        /// <summary>
        /// Remove a video from a showcase
        /// </summary>
        /// <remarks>
        /// This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveVideoFromShowcaseWithHttpInfo (decimal albumId, decimal userId, decimal videoId);
        /// <summary>
        /// Remove a video from a showcase
        /// </summary>
        /// <remarks>
        /// This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void RemoveVideoFromShowcaseAlt1 (decimal albumId, decimal videoId);

        /// <summary>
        /// Remove a video from a showcase
        /// </summary>
        /// <remarks>
        /// This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveVideoFromShowcaseAlt1WithHttpInfo (decimal albumId, decimal videoId);
        /// <summary>
        /// Replace all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject42"></param>
        /// <returns></returns>
        void ReplaceVideosInShowcase (decimal albumId, decimal userId, InlineObject42 inlineObject42);

        /// <summary>
        /// Replace all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject42"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceVideosInShowcaseWithHttpInfo (decimal albumId, decimal userId, InlineObject42 inlineObject42);
        /// <summary>
        /// Replace all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject18"></param>
        /// <returns></returns>
        void ReplaceVideosInShowcaseAlt1 (decimal albumId, InlineObject18 inlineObject18);

        /// <summary>
        /// Replace all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject18"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceVideosInShowcaseAlt1WithHttpInfo (decimal albumId, InlineObject18 inlineObject18);
        /// <summary>
        /// Set the featured video of a showcase
        /// </summary>
        /// <remarks>
        /// This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Album</returns>
        Album SetVideoAsShowcaseFeatured (decimal albumId, decimal userId, decimal videoId);

        /// <summary>
        /// Set the featured video of a showcase
        /// </summary>
        /// <remarks>
        /// This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Album</returns>
        ApiResponse<Album> SetVideoAsShowcaseFeaturedWithHttpInfo (decimal albumId, decimal userId, decimal videoId);
        /// <summary>
        /// Set the featured video of a showcase
        /// </summary>
        /// <remarks>
        /// This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Album</returns>
        Album SetVideoAsShowcaseFeaturedAlt1 (decimal albumId, decimal videoId);

        /// <summary>
        /// Set the featured video of a showcase
        /// </summary>
        /// <remarks>
        /// This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Album</returns>
        ApiResponse<Album> SetVideoAsShowcaseFeaturedAlt1WithHttpInfo (decimal albumId, decimal videoId);
        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video
        /// </summary>
        /// <remarks>
        /// This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject43"> (optional)</param>
        /// <returns>Album</returns>
        Album SetVideoAsShowcaseThumbnail (decimal albumId, decimal userId, decimal videoId, InlineObject43 inlineObject43 = default(InlineObject43));

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video
        /// </summary>
        /// <remarks>
        /// This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject43"> (optional)</param>
        /// <returns>ApiResponse of Album</returns>
        ApiResponse<Album> SetVideoAsShowcaseThumbnailWithHttpInfo (decimal albumId, decimal userId, decimal videoId, InlineObject43 inlineObject43 = default(InlineObject43));
        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video
        /// </summary>
        /// <remarks>
        /// This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>Album</returns>
        Album SetVideoAsShowcaseThumbnailAlt1 (decimal albumId, decimal videoId, InlineObject19 inlineObject19 = default(InlineObject19));

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video
        /// </summary>
        /// <remarks>
        /// This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>ApiResponse of Album</returns>
        ApiResponse<Album> SetVideoAsShowcaseThumbnailAlt1WithHttpInfo (decimal albumId, decimal videoId, InlineObject19 inlineObject19 = default(InlineObject19));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShowcasesShowcaseVideosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a specific video to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddVideoToShowcaseAsync (decimal albumId, decimal userId, decimal videoId);

        /// <summary>
        /// Add a specific video to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddVideoToShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId, decimal videoId);
        /// <summary>
        /// Add a specific video to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddVideoToShowcaseAlt1Async (decimal albumId, decimal videoId);

        /// <summary>
        /// Add a specific video to a showcase
        /// </summary>
        /// <remarks>
        /// This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddVideoToShowcaseAlt1AsyncWithHttpInfo (decimal albumId, decimal videoId);
        /// <summary>
        /// Get all the user&#39;s videos that can be added to or removed from a showcase
        /// </summary>
        /// <remarks>
        /// This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by most recent user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetAvailableShowcaseVideosAsync (decimal albumId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the user&#39;s videos that can be added to or removed from a showcase
        /// </summary>
        /// <remarks>
        /// This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by most recent user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetAvailableShowcaseVideosAsyncWithHttpInfo (decimal albumId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        /// <summary>
        /// Get all the showcases to which the user can add or remove a specific video
        /// </summary>
        /// <remarks>
        /// This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Album&gt;</returns>
        System.Threading.Tasks.Task<List<Album>> GetAvailableVideoShowcasesAsync (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the showcases to which the user can add or remove a specific video
        /// </summary>
        /// <remarks>
        /// This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Album&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Album>>> GetAvailableVideoShowcasesAsyncWithHttpInfo (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Get a specific video in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> GetShowcaseVideoAsync (decimal albumId, decimal userId, decimal videoId, string password = default(string));

        /// <summary>
        /// Get a specific video in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> GetShowcaseVideoAsyncWithHttpInfo (decimal albumId, decimal userId, decimal videoId, string password = default(string));
        /// <summary>
        /// Get a specific video in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> GetShowcaseVideoAlt1Async (decimal albumId, decimal videoId, string password = default(string));

        /// <summary>
        /// Get a specific video in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> GetShowcaseVideoAlt1AsyncWithHttpInfo (decimal albumId, decimal videoId, string password = default(string));
        /// <summary>
        /// Get all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetShowcaseVideosAsync (decimal albumId, decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?));

        /// <summary>
        /// Get all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetShowcaseVideosAsyncWithHttpInfo (decimal albumId, decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?));
        /// <summary>
        /// Get all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetShowcaseVideosAlt1Async (decimal albumId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?));

        /// <summary>
        /// Get all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetShowcaseVideosAlt1AsyncWithHttpInfo (decimal albumId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?));
        /// <summary>
        /// Remove a video from a showcase
        /// </summary>
        /// <remarks>
        /// This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveVideoFromShowcaseAsync (decimal albumId, decimal userId, decimal videoId);

        /// <summary>
        /// Remove a video from a showcase
        /// </summary>
        /// <remarks>
        /// This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveVideoFromShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId, decimal videoId);
        /// <summary>
        /// Remove a video from a showcase
        /// </summary>
        /// <remarks>
        /// This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveVideoFromShowcaseAlt1Async (decimal albumId, decimal videoId);

        /// <summary>
        /// Remove a video from a showcase
        /// </summary>
        /// <remarks>
        /// This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveVideoFromShowcaseAlt1AsyncWithHttpInfo (decimal albumId, decimal videoId);
        /// <summary>
        /// Replace all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject42"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceVideosInShowcaseAsync (decimal albumId, decimal userId, InlineObject42 inlineObject42);

        /// <summary>
        /// Replace all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject42"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceVideosInShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId, InlineObject42 inlineObject42);
        /// <summary>
        /// Replace all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject18"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceVideosInShowcaseAlt1Async (decimal albumId, InlineObject18 inlineObject18);

        /// <summary>
        /// Replace all the videos in a showcase
        /// </summary>
        /// <remarks>
        /// This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject18"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceVideosInShowcaseAlt1AsyncWithHttpInfo (decimal albumId, InlineObject18 inlineObject18);
        /// <summary>
        /// Set the featured video of a showcase
        /// </summary>
        /// <remarks>
        /// This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Album</returns>
        System.Threading.Tasks.Task<Album> SetVideoAsShowcaseFeaturedAsync (decimal albumId, decimal userId, decimal videoId);

        /// <summary>
        /// Set the featured video of a showcase
        /// </summary>
        /// <remarks>
        /// This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        System.Threading.Tasks.Task<ApiResponse<Album>> SetVideoAsShowcaseFeaturedAsyncWithHttpInfo (decimal albumId, decimal userId, decimal videoId);
        /// <summary>
        /// Set the featured video of a showcase
        /// </summary>
        /// <remarks>
        /// This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Album</returns>
        System.Threading.Tasks.Task<Album> SetVideoAsShowcaseFeaturedAlt1Async (decimal albumId, decimal videoId);

        /// <summary>
        /// Set the featured video of a showcase
        /// </summary>
        /// <remarks>
        /// This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        System.Threading.Tasks.Task<ApiResponse<Album>> SetVideoAsShowcaseFeaturedAlt1AsyncWithHttpInfo (decimal albumId, decimal videoId);
        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video
        /// </summary>
        /// <remarks>
        /// This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject43"> (optional)</param>
        /// <returns>Task of Album</returns>
        System.Threading.Tasks.Task<Album> SetVideoAsShowcaseThumbnailAsync (decimal albumId, decimal userId, decimal videoId, InlineObject43 inlineObject43 = default(InlineObject43));

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video
        /// </summary>
        /// <remarks>
        /// This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject43"> (optional)</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        System.Threading.Tasks.Task<ApiResponse<Album>> SetVideoAsShowcaseThumbnailAsyncWithHttpInfo (decimal albumId, decimal userId, decimal videoId, InlineObject43 inlineObject43 = default(InlineObject43));
        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video
        /// </summary>
        /// <remarks>
        /// This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>Task of Album</returns>
        System.Threading.Tasks.Task<Album> SetVideoAsShowcaseThumbnailAlt1Async (decimal albumId, decimal videoId, InlineObject19 inlineObject19 = default(InlineObject19));

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video
        /// </summary>
        /// <remarks>
        /// This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        System.Threading.Tasks.Task<ApiResponse<Album>> SetVideoAsShowcaseThumbnailAlt1AsyncWithHttpInfo (decimal albumId, decimal videoId, InlineObject19 inlineObject19 = default(InlineObject19));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShowcasesShowcaseVideosApi : IShowcasesShowcaseVideosApiSync, IShowcasesShowcaseVideosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShowcasesShowcaseVideosApi : IShowcasesShowcaseVideosApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesShowcaseVideosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShowcasesShowcaseVideosApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesShowcaseVideosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShowcasesShowcaseVideosApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesShowcaseVideosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShowcasesShowcaseVideosApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesShowcaseVideosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ShowcasesShowcaseVideosApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a specific video to a showcase This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void AddVideoToShowcase (decimal albumId, decimal userId, decimal videoId)
        {
             AddVideoToShowcaseWithHttpInfo(albumId, userId, videoId);
        }

        /// <summary>
        /// Add a specific video to a showcase This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> AddVideoToShowcaseWithHttpInfo (decimal albumId, decimal userId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/{user_id}/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoToShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a specific video to a showcase This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddVideoToShowcaseAsync (decimal albumId, decimal userId, decimal videoId)
        {
             await AddVideoToShowcaseAsyncWithHttpInfo(albumId, userId, videoId);

        }

        /// <summary>
        /// Add a specific video to a showcase This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> AddVideoToShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/{user_id}/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoToShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a specific video to a showcase This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void AddVideoToShowcaseAlt1 (decimal albumId, decimal videoId)
        {
             AddVideoToShowcaseAlt1WithHttpInfo(albumId, videoId);
        }

        /// <summary>
        /// Add a specific video to a showcase This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> AddVideoToShowcaseAlt1WithHttpInfo (decimal albumId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/me/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoToShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a specific video to a showcase This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddVideoToShowcaseAlt1Async (decimal albumId, decimal videoId)
        {
             await AddVideoToShowcaseAlt1AsyncWithHttpInfo(albumId, videoId);

        }

        /// <summary>
        /// Add a specific video to a showcase This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> AddVideoToShowcaseAlt1AsyncWithHttpInfo (decimal albumId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/me/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoToShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the user&#39;s videos that can be added to or removed from a showcase This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by most recent user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetAvailableShowcaseVideos (decimal albumId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetAvailableShowcaseVideosWithHttpInfo(albumId, direction, page, perPage, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the user&#39;s videos that can be added to or removed from a showcase This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by most recent user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetAvailableShowcaseVideosWithHttpInfo (decimal albumId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/albums/{album_id}/available_videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableShowcaseVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the user&#39;s videos that can be added to or removed from a showcase This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by most recent user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetAvailableShowcaseVideosAsync (decimal albumId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetAvailableShowcaseVideosAsyncWithHttpInfo(albumId, direction, page, perPage, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the user&#39;s videos that can be added to or removed from a showcase This endpoint returns every video belonging to the authenticated user that can be added to or removed from the specified showcase. The user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by most recent user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetAvailableShowcaseVideosAsyncWithHttpInfo (decimal albumId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/albums/{album_id}/available_videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableShowcaseVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the showcases to which the user can add or remove a specific video This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Album&gt;</returns>
        public List<Album> GetAvailableVideoShowcases (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Album>> localVarResponse = GetAvailableVideoShowcasesWithHttpInfo(videoId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the showcases to which the user can add or remove a specific video This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Album&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Album> > GetAvailableVideoShowcasesWithHttpInfo (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Album> >("/videos/{video_id}/available_albums", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableVideoShowcases", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the showcases to which the user can add or remove a specific video This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Album&gt;</returns>
        public async System.Threading.Tasks.Task<List<Album>> GetAvailableVideoShowcasesAsync (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Album>> localVarResponse = await GetAvailableVideoShowcasesAsyncWithHttpInfo(videoId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the showcases to which the user can add or remove a specific video This endpoint returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Album&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Album>>> GetAvailableVideoShowcasesAsyncWithHttpInfo (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Album>>("/videos/{video_id}/available_albums", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableVideoShowcases", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific video in a showcase This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Video</returns>
        public Video GetShowcaseVideo (decimal albumId, decimal userId, decimal videoId, string password = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = GetShowcaseVideoWithHttpInfo(albumId, userId, videoId, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific video in a showcase This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>ApiResponse of Video</returns>
        public VimeoOpenApi.Client.ApiResponse< Video > GetShowcaseVideoWithHttpInfo (decimal albumId, decimal userId, decimal videoId, string password = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Video >("/users/{user_id}/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific video in a showcase This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> GetShowcaseVideoAsync (decimal albumId, decimal userId, decimal videoId, string password = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = await GetShowcaseVideoAsyncWithHttpInfo(albumId, userId, videoId, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific video in a showcase This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Video>> GetShowcaseVideoAsyncWithHttpInfo (decimal albumId, decimal userId, decimal videoId, string password = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Video>("/users/{user_id}/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific video in a showcase This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Video</returns>
        public Video GetShowcaseVideoAlt1 (decimal albumId, decimal videoId, string password = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = GetShowcaseVideoAlt1WithHttpInfo(albumId, videoId, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific video in a showcase This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>ApiResponse of Video</returns>
        public VimeoOpenApi.Client.ApiResponse< Video > GetShowcaseVideoAlt1WithHttpInfo (decimal albumId, decimal videoId, string password = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Video >("/me/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific video in a showcase This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> GetShowcaseVideoAlt1Async (decimal albumId, decimal videoId, string password = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = await GetShowcaseVideoAlt1AsyncWithHttpInfo(albumId, videoId, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific video in a showcase This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Video>> GetShowcaseVideoAlt1AsyncWithHttpInfo (decimal albumId, decimal videoId, string password = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Video>("/me/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in a showcase This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetShowcaseVideos (decimal albumId, decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetShowcaseVideosWithHttpInfo(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the videos in a showcase This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetShowcaseVideosWithHttpInfo (decimal albumId, decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (containingUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "containing_uri", containingUri));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (weakSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "weak_search", weakSearch));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/users/{user_id}/albums/{album_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in a showcase This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetShowcaseVideosAsync (decimal albumId, decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetShowcaseVideosAsyncWithHttpInfo(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the videos in a showcase This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetShowcaseVideosAsyncWithHttpInfo (decimal albumId, decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (containingUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "containing_uri", containingUri));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (weakSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "weak_search", weakSearch));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/users/{user_id}/albums/{album_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in a showcase This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetShowcaseVideosAlt1 (decimal albumId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetShowcaseVideosAlt1WithHttpInfo(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the videos in a showcase This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetShowcaseVideosAlt1WithHttpInfo (decimal albumId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            if (containingUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "containing_uri", containingUri));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (weakSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "weak_search", weakSearch));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/me/albums/{album_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseVideosAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in a showcase This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetShowcaseVideosAlt1Async (decimal albumId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetShowcaseVideosAlt1AsyncWithHttpInfo(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the videos in a showcase This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="containingUri">The page containing the video URI. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Filter the results by the **embeddable** attribute.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="password">The password of the showcase. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Sort the results by the default method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;manual&#x60; - Sort the results by their manual order.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <param name="weakSearch">Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetShowcaseVideosAlt1AsyncWithHttpInfo (decimal albumId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), string password = default(string), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string), bool? weakSearch = default(bool?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            if (containingUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "containing_uri", containingUri));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (weakSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "weak_search", weakSearch));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/me/albums/{album_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseVideosAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a video from a showcase This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void RemoveVideoFromShowcase (decimal albumId, decimal userId, decimal videoId)
        {
             RemoveVideoFromShowcaseWithHttpInfo(albumId, userId, videoId);
        }

        /// <summary>
        /// Remove a video from a showcase This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> RemoveVideoFromShowcaseWithHttpInfo (decimal albumId, decimal userId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_id}/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideoFromShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a video from a showcase This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveVideoFromShowcaseAsync (decimal albumId, decimal userId, decimal videoId)
        {
             await RemoveVideoFromShowcaseAsyncWithHttpInfo(albumId, userId, videoId);

        }

        /// <summary>
        /// Remove a video from a showcase This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> RemoveVideoFromShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_id}/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideoFromShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a video from a showcase This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void RemoveVideoFromShowcaseAlt1 (decimal albumId, decimal videoId)
        {
             RemoveVideoFromShowcaseAlt1WithHttpInfo(albumId, videoId);
        }

        /// <summary>
        /// Remove a video from a showcase This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> RemoveVideoFromShowcaseAlt1WithHttpInfo (decimal albumId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/me/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideoFromShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a video from a showcase This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveVideoFromShowcaseAlt1Async (decimal albumId, decimal videoId)
        {
             await RemoveVideoFromShowcaseAlt1AsyncWithHttpInfo(albumId, videoId);

        }

        /// <summary>
        /// Remove a video from a showcase This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> RemoveVideoFromShowcaseAlt1AsyncWithHttpInfo (decimal albumId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/me/albums/{album_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveVideoFromShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace all the videos in a showcase This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject42"></param>
        /// <returns></returns>
        public void ReplaceVideosInShowcase (decimal albumId, decimal userId, InlineObject42 inlineObject42)
        {
             ReplaceVideosInShowcaseWithHttpInfo(albumId, userId, inlineObject42);
        }

        /// <summary>
        /// Replace all the videos in a showcase This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject42"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> ReplaceVideosInShowcaseWithHttpInfo (decimal albumId, decimal userId, InlineObject42 inlineObject42)
        {
            // verify the required parameter 'inlineObject42' is set
            if (inlineObject42 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject42' when calling ShowcasesShowcaseVideosApi->ReplaceVideosInShowcase");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject42;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/{user_id}/albums/{album_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceVideosInShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace all the videos in a showcase This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject42"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceVideosInShowcaseAsync (decimal albumId, decimal userId, InlineObject42 inlineObject42)
        {
             await ReplaceVideosInShowcaseAsyncWithHttpInfo(albumId, userId, inlineObject42);

        }

        /// <summary>
        /// Replace all the videos in a showcase This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject42"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> ReplaceVideosInShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId, InlineObject42 inlineObject42)
        {
            // verify the required parameter 'inlineObject42' is set
            if (inlineObject42 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject42' when calling ShowcasesShowcaseVideosApi->ReplaceVideosInShowcase");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject42;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/{user_id}/albums/{album_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceVideosInShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace all the videos in a showcase This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject18"></param>
        /// <returns></returns>
        public void ReplaceVideosInShowcaseAlt1 (decimal albumId, InlineObject18 inlineObject18)
        {
             ReplaceVideosInShowcaseAlt1WithHttpInfo(albumId, inlineObject18);
        }

        /// <summary>
        /// Replace all the videos in a showcase This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject18"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> ReplaceVideosInShowcaseAlt1WithHttpInfo (decimal albumId, InlineObject18 inlineObject18)
        {
            // verify the required parameter 'inlineObject18' is set
            if (inlineObject18 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject18' when calling ShowcasesShowcaseVideosApi->ReplaceVideosInShowcaseAlt1");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.Data = inlineObject18;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/me/albums/{album_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceVideosInShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace all the videos in a showcase This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject18"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceVideosInShowcaseAlt1Async (decimal albumId, InlineObject18 inlineObject18)
        {
             await ReplaceVideosInShowcaseAlt1AsyncWithHttpInfo(albumId, inlineObject18);

        }

        /// <summary>
        /// Replace all the videos in a showcase This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject18"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> ReplaceVideosInShowcaseAlt1AsyncWithHttpInfo (decimal albumId, InlineObject18 inlineObject18)
        {
            // verify the required parameter 'inlineObject18' is set
            if (inlineObject18 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject18' when calling ShowcasesShowcaseVideosApi->ReplaceVideosInShowcaseAlt1");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.Data = inlineObject18;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/me/albums/{album_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceVideosInShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the featured video of a showcase This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Album</returns>
        public Album SetVideoAsShowcaseFeatured (decimal albumId, decimal userId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = SetVideoAsShowcaseFeaturedWithHttpInfo(albumId, userId, videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the featured video of a showcase This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Album</returns>
        public VimeoOpenApi.Client.ApiResponse< Album > SetVideoAsShowcaseFeaturedWithHttpInfo (decimal albumId, decimal userId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Album >("/users/{user_id}/albums/{album_id}/videos/{video_id}/set_featured_video", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetVideoAsShowcaseFeatured", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the featured video of a showcase This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Album</returns>
        public async System.Threading.Tasks.Task<Album> SetVideoAsShowcaseFeaturedAsync (decimal albumId, decimal userId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = await SetVideoAsShowcaseFeaturedAsyncWithHttpInfo(albumId, userId, videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the featured video of a showcase This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Album>> SetVideoAsShowcaseFeaturedAsyncWithHttpInfo (decimal albumId, decimal userId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Album>("/users/{user_id}/albums/{album_id}/videos/{video_id}/set_featured_video", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetVideoAsShowcaseFeatured", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the featured video of a showcase This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Album</returns>
        public Album SetVideoAsShowcaseFeaturedAlt1 (decimal albumId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = SetVideoAsShowcaseFeaturedAlt1WithHttpInfo(albumId, videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the featured video of a showcase This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Album</returns>
        public VimeoOpenApi.Client.ApiResponse< Album > SetVideoAsShowcaseFeaturedAlt1WithHttpInfo (decimal albumId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Album >("/me/albums/{album_id}/videos/{video_id}/set_featured_video", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetVideoAsShowcaseFeaturedAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the featured video of a showcase This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Album</returns>
        public async System.Threading.Tasks.Task<Album> SetVideoAsShowcaseFeaturedAlt1Async (decimal albumId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = await SetVideoAsShowcaseFeaturedAlt1AsyncWithHttpInfo(albumId, videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the featured video of a showcase This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Album>> SetVideoAsShowcaseFeaturedAlt1AsyncWithHttpInfo (decimal albumId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Album>("/me/albums/{album_id}/videos/{video_id}/set_featured_video", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetVideoAsShowcaseFeaturedAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject43"> (optional)</param>
        /// <returns>Album</returns>
        public Album SetVideoAsShowcaseThumbnail (decimal albumId, decimal userId, decimal videoId, InlineObject43 inlineObject43 = default(InlineObject43))
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = SetVideoAsShowcaseThumbnailWithHttpInfo(albumId, userId, videoId, inlineObject43);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject43"> (optional)</param>
        /// <returns>ApiResponse of Album</returns>
        public VimeoOpenApi.Client.ApiResponse< Album > SetVideoAsShowcaseThumbnailWithHttpInfo (decimal albumId, decimal userId, decimal videoId, InlineObject43 inlineObject43 = default(InlineObject43))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject43;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Album >("/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetVideoAsShowcaseThumbnail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject43"> (optional)</param>
        /// <returns>Task of Album</returns>
        public async System.Threading.Tasks.Task<Album> SetVideoAsShowcaseThumbnailAsync (decimal albumId, decimal userId, decimal videoId, InlineObject43 inlineObject43 = default(InlineObject43))
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = await SetVideoAsShowcaseThumbnailAsyncWithHttpInfo(albumId, userId, videoId, inlineObject43);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject43"> (optional)</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Album>> SetVideoAsShowcaseThumbnailAsyncWithHttpInfo (decimal albumId, decimal userId, decimal videoId, InlineObject43 inlineObject43 = default(InlineObject43))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject43;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Album>("/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetVideoAsShowcaseThumbnail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>Album</returns>
        public Album SetVideoAsShowcaseThumbnailAlt1 (decimal albumId, decimal videoId, InlineObject19 inlineObject19 = default(InlineObject19))
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = SetVideoAsShowcaseThumbnailAlt1WithHttpInfo(albumId, videoId, inlineObject19);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>ApiResponse of Album</returns>
        public VimeoOpenApi.Client.ApiResponse< Album > SetVideoAsShowcaseThumbnailAlt1WithHttpInfo (decimal albumId, decimal videoId, InlineObject19 inlineObject19 = default(InlineObject19))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject19;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Album >("/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetVideoAsShowcaseThumbnailAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>Task of Album</returns>
        public async System.Threading.Tasks.Task<Album> SetVideoAsShowcaseThumbnailAlt1Async (decimal albumId, decimal videoId, InlineObject19 inlineObject19 = default(InlineObject19))
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = await SetVideoAsShowcaseThumbnailAlt1AsyncWithHttpInfo(albumId, videoId, inlineObject19);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a thumbnail for a showcase from a showcase video This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject19"> (optional)</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Album>> SetVideoAsShowcaseThumbnailAlt1AsyncWithHttpInfo (decimal albumId, decimal videoId, InlineObject19 inlineObject19 = default(InlineObject19))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject19;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Album>("/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetVideoAsShowcaseThumbnailAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
