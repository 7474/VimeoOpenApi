/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShowcasesEssentialsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a showcase
        /// </summary>
        /// <remarks>
        /// This method creates a new showcase for the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject38"></param>
        /// <returns>Album</returns>
        Album CreateShowcase (decimal userId, InlineObject38 inlineObject38);

        /// <summary>
        /// Create a showcase
        /// </summary>
        /// <remarks>
        /// This method creates a new showcase for the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject38"></param>
        /// <returns>ApiResponse of Album</returns>
        ApiResponse<Album> CreateShowcaseWithHttpInfo (decimal userId, InlineObject38 inlineObject38);
        /// <summary>
        /// Create a showcase
        /// </summary>
        /// <remarks>
        /// This method creates a new showcase for the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"></param>
        /// <returns>Album</returns>
        Album CreateShowcaseAlt1 (InlineObject16 inlineObject16);

        /// <summary>
        /// Create a showcase
        /// </summary>
        /// <remarks>
        /// This method creates a new showcase for the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"></param>
        /// <returns>ApiResponse of Album</returns>
        ApiResponse<Album> CreateShowcaseAlt1WithHttpInfo (InlineObject16 inlineObject16);
        /// <summary>
        /// Delete a showcase
        /// </summary>
        /// <remarks>
        /// This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        void DeleteShowcase (decimal albumId, decimal userId);

        /// <summary>
        /// Delete a showcase
        /// </summary>
        /// <remarks>
        /// This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteShowcaseWithHttpInfo (decimal albumId, decimal userId);
        /// <summary>
        /// Delete a showcase
        /// </summary>
        /// <remarks>
        /// This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns></returns>
        void DeleteShowcaseAlt1 (decimal albumId);

        /// <summary>
        /// Delete a showcase
        /// </summary>
        /// <remarks>
        /// This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteShowcaseAlt1WithHttpInfo (decimal albumId);
        /// <summary>
        /// Edit a showcase
        /// </summary>
        /// <remarks>
        /// This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject39"> (optional)</param>
        /// <returns>Album</returns>
        Album EditShowcase (decimal albumId, decimal userId, InlineObject39 inlineObject39 = default(InlineObject39));

        /// <summary>
        /// Edit a showcase
        /// </summary>
        /// <remarks>
        /// This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject39"> (optional)</param>
        /// <returns>ApiResponse of Album</returns>
        ApiResponse<Album> EditShowcaseWithHttpInfo (decimal albumId, decimal userId, InlineObject39 inlineObject39 = default(InlineObject39));
        /// <summary>
        /// Edit a showcase
        /// </summary>
        /// <remarks>
        /// This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>Album</returns>
        Album EditShowcaseAlt1 (decimal albumId, InlineObject17 inlineObject17 = default(InlineObject17));

        /// <summary>
        /// Edit a showcase
        /// </summary>
        /// <remarks>
        /// This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>ApiResponse of Album</returns>
        ApiResponse<Album> EditShowcaseAlt1WithHttpInfo (decimal albumId, InlineObject17 inlineObject17 = default(InlineObject17));
        /// <summary>
        /// Get a specific showcase
        /// </summary>
        /// <remarks>
        /// This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Album</returns>
        Album GetShowcase (decimal albumId, decimal userId);

        /// <summary>
        /// Get a specific showcase
        /// </summary>
        /// <remarks>
        /// This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Album</returns>
        ApiResponse<Album> GetShowcaseWithHttpInfo (decimal albumId, decimal userId);
        /// <summary>
        /// Get a specific showcase
        /// </summary>
        /// <remarks>
        /// This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>Album</returns>
        Album GetShowcaseAlt1 (decimal albumId);

        /// <summary>
        /// Get a specific showcase
        /// </summary>
        /// <remarks>
        /// This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>ApiResponse of Album</returns>
        ApiResponse<Album> GetShowcaseAlt1WithHttpInfo (decimal albumId);
        /// <summary>
        /// Get all the showcases that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every showcase belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>List&lt;Album&gt;</returns>
        List<Album> GetShowcases (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the showcases that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every showcase belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Album&gt;</returns>
        ApiResponse<List<Album>> GetShowcasesWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the showcases that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every showcase belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>List&lt;Album&gt;</returns>
        List<Album> GetShowcasesAlt1 (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the showcases that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every showcase belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Album&gt;</returns>
        ApiResponse<List<Album>> GetShowcasesAlt1WithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShowcasesEssentialsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a showcase
        /// </summary>
        /// <remarks>
        /// This method creates a new showcase for the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject38"></param>
        /// <returns>Task of Album</returns>
        System.Threading.Tasks.Task<Album> CreateShowcaseAsync (decimal userId, InlineObject38 inlineObject38);

        /// <summary>
        /// Create a showcase
        /// </summary>
        /// <remarks>
        /// This method creates a new showcase for the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject38"></param>
        /// <returns>Task of ApiResponse (Album)</returns>
        System.Threading.Tasks.Task<ApiResponse<Album>> CreateShowcaseAsyncWithHttpInfo (decimal userId, InlineObject38 inlineObject38);
        /// <summary>
        /// Create a showcase
        /// </summary>
        /// <remarks>
        /// This method creates a new showcase for the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"></param>
        /// <returns>Task of Album</returns>
        System.Threading.Tasks.Task<Album> CreateShowcaseAlt1Async (InlineObject16 inlineObject16);

        /// <summary>
        /// Create a showcase
        /// </summary>
        /// <remarks>
        /// This method creates a new showcase for the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"></param>
        /// <returns>Task of ApiResponse (Album)</returns>
        System.Threading.Tasks.Task<ApiResponse<Album>> CreateShowcaseAlt1AsyncWithHttpInfo (InlineObject16 inlineObject16);
        /// <summary>
        /// Delete a showcase
        /// </summary>
        /// <remarks>
        /// This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteShowcaseAsync (decimal albumId, decimal userId);

        /// <summary>
        /// Delete a showcase
        /// </summary>
        /// <remarks>
        /// This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId);
        /// <summary>
        /// Delete a showcase
        /// </summary>
        /// <remarks>
        /// This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteShowcaseAlt1Async (decimal albumId);

        /// <summary>
        /// Delete a showcase
        /// </summary>
        /// <remarks>
        /// This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteShowcaseAlt1AsyncWithHttpInfo (decimal albumId);
        /// <summary>
        /// Edit a showcase
        /// </summary>
        /// <remarks>
        /// This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject39"> (optional)</param>
        /// <returns>Task of Album</returns>
        System.Threading.Tasks.Task<Album> EditShowcaseAsync (decimal albumId, decimal userId, InlineObject39 inlineObject39 = default(InlineObject39));

        /// <summary>
        /// Edit a showcase
        /// </summary>
        /// <remarks>
        /// This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject39"> (optional)</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        System.Threading.Tasks.Task<ApiResponse<Album>> EditShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId, InlineObject39 inlineObject39 = default(InlineObject39));
        /// <summary>
        /// Edit a showcase
        /// </summary>
        /// <remarks>
        /// This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>Task of Album</returns>
        System.Threading.Tasks.Task<Album> EditShowcaseAlt1Async (decimal albumId, InlineObject17 inlineObject17 = default(InlineObject17));

        /// <summary>
        /// Edit a showcase
        /// </summary>
        /// <remarks>
        /// This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        System.Threading.Tasks.Task<ApiResponse<Album>> EditShowcaseAlt1AsyncWithHttpInfo (decimal albumId, InlineObject17 inlineObject17 = default(InlineObject17));
        /// <summary>
        /// Get a specific showcase
        /// </summary>
        /// <remarks>
        /// This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Album</returns>
        System.Threading.Tasks.Task<Album> GetShowcaseAsync (decimal albumId, decimal userId);

        /// <summary>
        /// Get a specific showcase
        /// </summary>
        /// <remarks>
        /// This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        System.Threading.Tasks.Task<ApiResponse<Album>> GetShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId);
        /// <summary>
        /// Get a specific showcase
        /// </summary>
        /// <remarks>
        /// This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>Task of Album</returns>
        System.Threading.Tasks.Task<Album> GetShowcaseAlt1Async (decimal albumId);

        /// <summary>
        /// Get a specific showcase
        /// </summary>
        /// <remarks>
        /// This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        System.Threading.Tasks.Task<ApiResponse<Album>> GetShowcaseAlt1AsyncWithHttpInfo (decimal albumId);
        /// <summary>
        /// Get all the showcases that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every showcase belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>Task of List&lt;Album&gt;</returns>
        System.Threading.Tasks.Task<List<Album>> GetShowcasesAsync (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the showcases that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every showcase belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Album&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Album>>> GetShowcasesAsyncWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the showcases that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every showcase belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>Task of List&lt;Album&gt;</returns>
        System.Threading.Tasks.Task<List<Album>> GetShowcasesAlt1Async (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the showcases that belong to the user
        /// </summary>
        /// <remarks>
        /// This method returns every showcase belonging to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Album&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Album>>> GetShowcasesAlt1AsyncWithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShowcasesEssentialsApi : IShowcasesEssentialsApiSync, IShowcasesEssentialsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShowcasesEssentialsApi : IShowcasesEssentialsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesEssentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShowcasesEssentialsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesEssentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShowcasesEssentialsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesEssentialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShowcasesEssentialsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShowcasesEssentialsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ShowcasesEssentialsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a showcase This method creates a new showcase for the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject38"></param>
        /// <returns>Album</returns>
        public Album CreateShowcase (decimal userId, InlineObject38 inlineObject38)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = CreateShowcaseWithHttpInfo(userId, inlineObject38);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a showcase This method creates a new showcase for the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject38"></param>
        /// <returns>ApiResponse of Album</returns>
        public VimeoOpenApi.Client.ApiResponse< Album > CreateShowcaseWithHttpInfo (decimal userId, InlineObject38 inlineObject38)
        {
            // verify the required parameter 'inlineObject38' is set
            if (inlineObject38 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject38' when calling ShowcasesEssentialsApi->CreateShowcase");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.album+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject38;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Album >("/users/{user_id}/albums", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a showcase This method creates a new showcase for the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject38"></param>
        /// <returns>Task of Album</returns>
        public async System.Threading.Tasks.Task<Album> CreateShowcaseAsync (decimal userId, InlineObject38 inlineObject38)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = await CreateShowcaseAsyncWithHttpInfo(userId, inlineObject38);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a showcase This method creates a new showcase for the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject38"></param>
        /// <returns>Task of ApiResponse (Album)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Album>> CreateShowcaseAsyncWithHttpInfo (decimal userId, InlineObject38 inlineObject38)
        {
            // verify the required parameter 'inlineObject38' is set
            if (inlineObject38 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject38' when calling ShowcasesEssentialsApi->CreateShowcase");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.album+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject38;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Album>("/users/{user_id}/albums", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a showcase This method creates a new showcase for the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"></param>
        /// <returns>Album</returns>
        public Album CreateShowcaseAlt1 (InlineObject16 inlineObject16)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = CreateShowcaseAlt1WithHttpInfo(inlineObject16);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a showcase This method creates a new showcase for the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"></param>
        /// <returns>ApiResponse of Album</returns>
        public VimeoOpenApi.Client.ApiResponse< Album > CreateShowcaseAlt1WithHttpInfo (InlineObject16 inlineObject16)
        {
            // verify the required parameter 'inlineObject16' is set
            if (inlineObject16 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject16' when calling ShowcasesEssentialsApi->CreateShowcaseAlt1");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.album+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject16;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Album >("/me/albums", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a showcase This method creates a new showcase for the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"></param>
        /// <returns>Task of Album</returns>
        public async System.Threading.Tasks.Task<Album> CreateShowcaseAlt1Async (InlineObject16 inlineObject16)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = await CreateShowcaseAlt1AsyncWithHttpInfo(inlineObject16);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a showcase This method creates a new showcase for the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject16"></param>
        /// <returns>Task of ApiResponse (Album)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Album>> CreateShowcaseAlt1AsyncWithHttpInfo (InlineObject16 inlineObject16)
        {
            // verify the required parameter 'inlineObject16' is set
            if (inlineObject16 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject16' when calling ShowcasesEssentialsApi->CreateShowcaseAlt1");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.album+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject16;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Album>("/me/albums", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a showcase This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        public void DeleteShowcase (decimal albumId, decimal userId)
        {
             DeleteShowcaseWithHttpInfo(albumId, userId);
        }

        /// <summary>
        /// Delete a showcase This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteShowcaseWithHttpInfo (decimal albumId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_id}/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a showcase This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteShowcaseAsync (decimal albumId, decimal userId)
        {
             await DeleteShowcaseAsyncWithHttpInfo(albumId, userId);

        }

        /// <summary>
        /// Delete a showcase This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_id}/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a showcase This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns></returns>
        public void DeleteShowcaseAlt1 (decimal albumId)
        {
             DeleteShowcaseAlt1WithHttpInfo(albumId);
        }

        /// <summary>
        /// Delete a showcase This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteShowcaseAlt1WithHttpInfo (decimal albumId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/me/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a showcase This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteShowcaseAlt1Async (decimal albumId)
        {
             await DeleteShowcaseAlt1AsyncWithHttpInfo(albumId);

        }

        /// <summary>
        /// Delete a showcase This method deletes the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteShowcaseAlt1AsyncWithHttpInfo (decimal albumId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/me/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a showcase This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject39"> (optional)</param>
        /// <returns>Album</returns>
        public Album EditShowcase (decimal albumId, decimal userId, InlineObject39 inlineObject39 = default(InlineObject39))
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = EditShowcaseWithHttpInfo(albumId, userId, inlineObject39);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a showcase This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject39"> (optional)</param>
        /// <returns>ApiResponse of Album</returns>
        public VimeoOpenApi.Client.ApiResponse< Album > EditShowcaseWithHttpInfo (decimal albumId, decimal userId, InlineObject39 inlineObject39 = default(InlineObject39))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.album+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject39;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Album >("/users/{user_id}/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a showcase This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject39"> (optional)</param>
        /// <returns>Task of Album</returns>
        public async System.Threading.Tasks.Task<Album> EditShowcaseAsync (decimal albumId, decimal userId, InlineObject39 inlineObject39 = default(InlineObject39))
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = await EditShowcaseAsyncWithHttpInfo(albumId, userId, inlineObject39);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a showcase This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject39"> (optional)</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Album>> EditShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId, InlineObject39 inlineObject39 = default(InlineObject39))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.album+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject39;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Album>("/users/{user_id}/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a showcase This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>Album</returns>
        public Album EditShowcaseAlt1 (decimal albumId, InlineObject17 inlineObject17 = default(InlineObject17))
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = EditShowcaseAlt1WithHttpInfo(albumId, inlineObject17);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a showcase This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>ApiResponse of Album</returns>
        public VimeoOpenApi.Client.ApiResponse< Album > EditShowcaseAlt1WithHttpInfo (decimal albumId, InlineObject17 inlineObject17 = default(InlineObject17))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.album+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.Data = inlineObject17;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Album >("/me/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a showcase This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>Task of Album</returns>
        public async System.Threading.Tasks.Task<Album> EditShowcaseAlt1Async (decimal albumId, InlineObject17 inlineObject17 = default(InlineObject17))
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = await EditShowcaseAlt1AsyncWithHttpInfo(albumId, inlineObject17);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a showcase This method edits the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="inlineObject17"> (optional)</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Album>> EditShowcaseAlt1AsyncWithHttpInfo (decimal albumId, InlineObject17 inlineObject17 = default(InlineObject17))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.album+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.Data = inlineObject17;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Album>("/me/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific showcase This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Album</returns>
        public Album GetShowcase (decimal albumId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = GetShowcaseWithHttpInfo(albumId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific showcase This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Album</returns>
        public VimeoOpenApi.Client.ApiResponse< Album > GetShowcaseWithHttpInfo (decimal albumId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Album >("/users/{user_id}/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific showcase This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Album</returns>
        public async System.Threading.Tasks.Task<Album> GetShowcaseAsync (decimal albumId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = await GetShowcaseAsyncWithHttpInfo(albumId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific showcase This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Album>> GetShowcaseAsyncWithHttpInfo (decimal albumId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Album>("/users/{user_id}/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific showcase This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>Album</returns>
        public Album GetShowcaseAlt1 (decimal albumId)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = GetShowcaseAlt1WithHttpInfo(albumId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific showcase This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>ApiResponse of Album</returns>
        public VimeoOpenApi.Client.ApiResponse< Album > GetShowcaseAlt1WithHttpInfo (decimal albumId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Album >("/me/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific showcase This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>Task of Album</returns>
        public async System.Threading.Tasks.Task<Album> GetShowcaseAlt1Async (decimal albumId)
        {
             VimeoOpenApi.Client.ApiResponse<Album> localVarResponse = await GetShowcaseAlt1AsyncWithHttpInfo(albumId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific showcase This method returns the specified showcase. The authenticated user must be the owner of the showcase.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="albumId">The ID of the showcase.</param>
        /// <returns>Task of ApiResponse (Album)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Album>> GetShowcaseAlt1AsyncWithHttpInfo (decimal albumId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.album+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("album_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(albumId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Album>("/me/albums/{album_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcaseAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the showcases that belong to the user This method returns every showcase belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>List&lt;Album&gt;</returns>
        public List<Album> GetShowcases (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Album>> localVarResponse = GetShowcasesWithHttpInfo(userId, direction, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the showcases that belong to the user This method returns every showcase belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Album&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Album> > GetShowcasesWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Album> >("/users/{user_id}/albums", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcases", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the showcases that belong to the user This method returns every showcase belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>Task of List&lt;Album&gt;</returns>
        public async System.Threading.Tasks.Task<List<Album>> GetShowcasesAsync (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Album>> localVarResponse = await GetShowcasesAsyncWithHttpInfo(userId, direction, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the showcases that belong to the user This method returns every showcase belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Album&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Album>>> GetShowcasesAsyncWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Album>>("/users/{user_id}/albums", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcases", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the showcases that belong to the user This method returns every showcase belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>List&lt;Album&gt;</returns>
        public List<Album> GetShowcasesAlt1 (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Album>> localVarResponse = GetShowcasesAlt1WithHttpInfo(direction, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the showcases that belong to the user This method returns every showcase belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Album&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Album> > GetShowcasesAlt1WithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Album> >("/me/albums", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcasesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the showcases that belong to the user This method returns every showcase belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>Task of List&lt;Album&gt;</returns>
        public async System.Threading.Tasks.Task<List<Album>> GetShowcasesAlt1Async (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Album>> localVarResponse = await GetShowcasesAlt1AsyncWithHttpInfo(direction, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the showcases that belong to the user This method returns every showcase belonging to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date of creation.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;videos&#x60; - Sort the results by the number of videos.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Album&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Album>>> GetShowcasesAlt1AsyncWithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Album>>("/me/albums", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShowcasesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
