/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosThumbnailsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject59"> (optional)</param>
        /// <returns>Picture</returns>
        Picture CreateVideoThumbnail (decimal videoId, InlineObject59 inlineObject59 = default(InlineObject59));

        /// <summary>
        /// Add a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject59"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> CreateVideoThumbnailWithHttpInfo (decimal videoId, InlineObject59 inlineObject59 = default(InlineObject59));
        /// <summary>
        /// Add a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>Picture</returns>
        Picture CreateVideoThumbnailAlt1 (decimal channelId, decimal videoId, InlineObject12 inlineObject12 = default(InlineObject12));

        /// <summary>
        /// Add a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> CreateVideoThumbnailAlt1WithHttpInfo (decimal channelId, decimal videoId, InlineObject12 inlineObject12 = default(InlineObject12));
        /// <summary>
        /// Delete a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method deletes the specified thumbnail image from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void DeleteVideoThumbnail (decimal pictureId, decimal videoId);

        /// <summary>
        /// Delete a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method deletes the specified thumbnail image from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVideoThumbnailWithHttpInfo (decimal pictureId, decimal videoId);
        /// <summary>
        /// Edit a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject60"> (optional)</param>
        /// <returns>Picture</returns>
        Picture EditVideoThumbnail (decimal pictureId, decimal videoId, InlineObject60 inlineObject60 = default(InlineObject60));

        /// <summary>
        /// Edit a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject60"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> EditVideoThumbnailWithHttpInfo (decimal pictureId, decimal videoId, InlineObject60 inlineObject60 = default(InlineObject60));
        /// <summary>
        /// Get a specific video thumbnail
        /// </summary>
        /// <remarks>
        /// This method returns a single thumbnail image from the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Picture</returns>
        Picture GetVideoThumbnail (decimal pictureId, decimal videoId);

        /// <summary>
        /// Get a specific video thumbnail
        /// </summary>
        /// <remarks>
        /// This method returns a single thumbnail image from the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> GetVideoThumbnailWithHttpInfo (decimal pictureId, decimal videoId);
        /// <summary>
        /// Get all the thumbnails of a video
        /// </summary>
        /// <remarks>
        /// This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        List<Picture> GetVideoThumbnails (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the thumbnails of a video
        /// </summary>
        /// <remarks>
        /// This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        ApiResponse<List<Picture>> GetVideoThumbnailsWithHttpInfo (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Get all the thumbnails of a video
        /// </summary>
        /// <remarks>
        /// This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        List<Picture> GetVideoThumbnailsAlt1 (decimal channelId, decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the thumbnails of a video
        /// </summary>
        /// <remarks>
        /// This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        ApiResponse<List<Picture>> GetVideoThumbnailsAlt1WithHttpInfo (decimal channelId, decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosThumbnailsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject59"> (optional)</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> CreateVideoThumbnailAsync (decimal videoId, InlineObject59 inlineObject59 = default(InlineObject59));

        /// <summary>
        /// Add a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject59"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> CreateVideoThumbnailAsyncWithHttpInfo (decimal videoId, InlineObject59 inlineObject59 = default(InlineObject59));
        /// <summary>
        /// Add a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> CreateVideoThumbnailAlt1Async (decimal channelId, decimal videoId, InlineObject12 inlineObject12 = default(InlineObject12));

        /// <summary>
        /// Add a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> CreateVideoThumbnailAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, InlineObject12 inlineObject12 = default(InlineObject12));
        /// <summary>
        /// Delete a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method deletes the specified thumbnail image from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVideoThumbnailAsync (decimal pictureId, decimal videoId);

        /// <summary>
        /// Delete a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method deletes the specified thumbnail image from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVideoThumbnailAsyncWithHttpInfo (decimal pictureId, decimal videoId);
        /// <summary>
        /// Edit a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject60"> (optional)</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> EditVideoThumbnailAsync (decimal pictureId, decimal videoId, InlineObject60 inlineObject60 = default(InlineObject60));

        /// <summary>
        /// Edit a video thumbnail
        /// </summary>
        /// <remarks>
        /// This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject60"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> EditVideoThumbnailAsyncWithHttpInfo (decimal pictureId, decimal videoId, InlineObject60 inlineObject60 = default(InlineObject60));
        /// <summary>
        /// Get a specific video thumbnail
        /// </summary>
        /// <remarks>
        /// This method returns a single thumbnail image from the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> GetVideoThumbnailAsync (decimal pictureId, decimal videoId);

        /// <summary>
        /// Get a specific video thumbnail
        /// </summary>
        /// <remarks>
        /// This method returns a single thumbnail image from the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> GetVideoThumbnailAsyncWithHttpInfo (decimal pictureId, decimal videoId);
        /// <summary>
        /// Get all the thumbnails of a video
        /// </summary>
        /// <remarks>
        /// This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        System.Threading.Tasks.Task<List<Picture>> GetVideoThumbnailsAsync (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the thumbnails of a video
        /// </summary>
        /// <remarks>
        /// This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Picture>>> GetVideoThumbnailsAsyncWithHttpInfo (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Get all the thumbnails of a video
        /// </summary>
        /// <remarks>
        /// This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        System.Threading.Tasks.Task<List<Picture>> GetVideoThumbnailsAlt1Async (decimal channelId, decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the thumbnails of a video
        /// </summary>
        /// <remarks>
        /// This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Picture>>> GetVideoThumbnailsAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosThumbnailsApi : IVideosThumbnailsApiSync, IVideosThumbnailsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VideosThumbnailsApi : IVideosThumbnailsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosThumbnailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosThumbnailsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosThumbnailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosThumbnailsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosThumbnailsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VideosThumbnailsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosThumbnailsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VideosThumbnailsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a video thumbnail This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject59"> (optional)</param>
        /// <returns>Picture</returns>
        public Picture CreateVideoThumbnail (decimal videoId, InlineObject59 inlineObject59 = default(InlineObject59))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = CreateVideoThumbnailWithHttpInfo(videoId, inlineObject59);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a video thumbnail This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject59"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > CreateVideoThumbnailWithHttpInfo (decimal videoId, InlineObject59 inlineObject59 = default(InlineObject59))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject59;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Picture >("/videos/{video_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVideoThumbnail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a video thumbnail This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject59"> (optional)</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> CreateVideoThumbnailAsync (decimal videoId, InlineObject59 inlineObject59 = default(InlineObject59))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await CreateVideoThumbnailAsyncWithHttpInfo(videoId, inlineObject59);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a video thumbnail This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject59"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> CreateVideoThumbnailAsyncWithHttpInfo (decimal videoId, InlineObject59 inlineObject59 = default(InlineObject59))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject59;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Picture>("/videos/{video_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVideoThumbnail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a video thumbnail This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>Picture</returns>
        public Picture CreateVideoThumbnailAlt1 (decimal channelId, decimal videoId, InlineObject12 inlineObject12 = default(InlineObject12))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = CreateVideoThumbnailAlt1WithHttpInfo(channelId, videoId, inlineObject12);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a video thumbnail This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > CreateVideoThumbnailAlt1WithHttpInfo (decimal channelId, decimal videoId, InlineObject12 inlineObject12 = default(InlineObject12))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject12;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Picture >("/channels/{channel_id}/videos/{video_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVideoThumbnailAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a video thumbnail This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> CreateVideoThumbnailAlt1Async (decimal channelId, decimal videoId, InlineObject12 inlineObject12 = default(InlineObject12))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await CreateVideoThumbnailAlt1AsyncWithHttpInfo(channelId, videoId, inlineObject12);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a video thumbnail This method adds a thumbnail image to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject12"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> CreateVideoThumbnailAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, InlineObject12 inlineObject12 = default(InlineObject12))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject12;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Picture>("/channels/{channel_id}/videos/{video_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVideoThumbnailAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a video thumbnail This method deletes the specified thumbnail image from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void DeleteVideoThumbnail (decimal pictureId, decimal videoId)
        {
             DeleteVideoThumbnailWithHttpInfo(pictureId, videoId);
        }

        /// <summary>
        /// Delete a video thumbnail This method deletes the specified thumbnail image from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteVideoThumbnailWithHttpInfo (decimal pictureId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("picture_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(pictureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/videos/{video_id}/pictures/{picture_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVideoThumbnail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a video thumbnail This method deletes the specified thumbnail image from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVideoThumbnailAsync (decimal pictureId, decimal videoId)
        {
             await DeleteVideoThumbnailAsyncWithHttpInfo(pictureId, videoId);

        }

        /// <summary>
        /// Delete a video thumbnail This method deletes the specified thumbnail image from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteVideoThumbnailAsyncWithHttpInfo (decimal pictureId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("picture_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(pictureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/videos/{video_id}/pictures/{picture_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVideoThumbnail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a video thumbnail This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject60"> (optional)</param>
        /// <returns>Picture</returns>
        public Picture EditVideoThumbnail (decimal pictureId, decimal videoId, InlineObject60 inlineObject60 = default(InlineObject60))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = EditVideoThumbnailWithHttpInfo(pictureId, videoId, inlineObject60);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a video thumbnail This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject60"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > EditVideoThumbnailWithHttpInfo (decimal pictureId, decimal videoId, InlineObject60 inlineObject60 = default(InlineObject60))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("picture_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(pictureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject60;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Picture >("/videos/{video_id}/pictures/{picture_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditVideoThumbnail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a video thumbnail This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject60"> (optional)</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> EditVideoThumbnailAsync (decimal pictureId, decimal videoId, InlineObject60 inlineObject60 = default(InlineObject60))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await EditVideoThumbnailAsyncWithHttpInfo(pictureId, videoId, inlineObject60);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a video thumbnail This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject60"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> EditVideoThumbnailAsyncWithHttpInfo (decimal pictureId, decimal videoId, InlineObject60 inlineObject60 = default(InlineObject60))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("picture_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(pictureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject60;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Picture>("/videos/{video_id}/pictures/{picture_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditVideoThumbnail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific video thumbnail This method returns a single thumbnail image from the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Picture</returns>
        public Picture GetVideoThumbnail (decimal pictureId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = GetVideoThumbnailWithHttpInfo(pictureId, videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific video thumbnail This method returns a single thumbnail image from the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > GetVideoThumbnailWithHttpInfo (decimal pictureId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("picture_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(pictureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Picture >("/videos/{video_id}/pictures/{picture_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoThumbnail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific video thumbnail This method returns a single thumbnail image from the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> GetVideoThumbnailAsync (decimal pictureId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await GetVideoThumbnailAsyncWithHttpInfo(pictureId, videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific video thumbnail This method returns a single thumbnail image from the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pictureId">The ID of the thumbnail.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> GetVideoThumbnailAsyncWithHttpInfo (decimal pictureId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("picture_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(pictureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Picture>("/videos/{video_id}/pictures/{picture_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoThumbnail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the thumbnails of a video This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        public List<Picture> GetVideoThumbnails (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = GetVideoThumbnailsWithHttpInfo(videoId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the thumbnails of a video This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Picture> > GetVideoThumbnailsWithHttpInfo (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Picture> >("/videos/{video_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoThumbnails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the thumbnails of a video This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        public async System.Threading.Tasks.Task<List<Picture>> GetVideoThumbnailsAsync (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = await GetVideoThumbnailsAsyncWithHttpInfo(videoId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the thumbnails of a video This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Picture>>> GetVideoThumbnailsAsyncWithHttpInfo (decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Picture>>("/videos/{video_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoThumbnails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the thumbnails of a video This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        public List<Picture> GetVideoThumbnailsAlt1 (decimal channelId, decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = GetVideoThumbnailsAlt1WithHttpInfo(channelId, videoId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the thumbnails of a video This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Picture> > GetVideoThumbnailsAlt1WithHttpInfo (decimal channelId, decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Picture> >("/channels/{channel_id}/videos/{video_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoThumbnailsAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the thumbnails of a video This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        public async System.Threading.Tasks.Task<List<Picture>> GetVideoThumbnailsAlt1Async (decimal channelId, decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = await GetVideoThumbnailsAlt1AsyncWithHttpInfo(channelId, videoId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the thumbnails of a video This method returns every thumbnail images of the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Picture>>> GetVideoThumbnailsAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Picture>>("/channels/{channel_id}/videos/{video_id}/pictures", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoThumbnailsAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
