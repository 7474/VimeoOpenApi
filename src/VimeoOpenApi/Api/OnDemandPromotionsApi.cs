/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandPromotionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a promotion to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject33"></param>
        /// <returns>OnDemandPromotion</returns>
        OnDemandPromotion CreateVodPromotion (decimal ondemandId, InlineObject33 inlineObject33);

        /// <summary>
        /// Add a promotion to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject33"></param>
        /// <returns>ApiResponse of OnDemandPromotion</returns>
        ApiResponse<OnDemandPromotion> CreateVodPromotionWithHttpInfo (decimal ondemandId, InlineObject33 inlineObject33);
        /// <summary>
        /// Delete a promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns></returns>
        void DeleteVodPromotion (decimal ondemandId, decimal promotionId);

        /// <summary>
        /// Delete a promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVodPromotionWithHttpInfo (decimal ondemandId, decimal promotionId);
        /// <summary>
        /// Get a specific promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>OnDemandPromotion</returns>
        OnDemandPromotion GetVodPromotion (decimal ondemandId, decimal promotionId);

        /// <summary>
        /// Get a specific promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>ApiResponse of OnDemandPromotion</returns>
        ApiResponse<OnDemandPromotion> GetVodPromotionWithHttpInfo (decimal ondemandId, decimal promotionId);
        /// <summary>
        /// Get all the codes of a promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>OnDemandPromotionCode</returns>
        OnDemandPromotionCode GetVodPromotionCodes (decimal ondemandId, decimal promotionId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the codes of a promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of OnDemandPromotionCode</returns>
        ApiResponse<OnDemandPromotionCode> GetVodPromotionCodesWithHttpInfo (decimal ondemandId, decimal promotionId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Get all the promotions on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="filter">The filter to apply to the results.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>OnDemandPromotion</returns>
        OnDemandPromotion GetVodPromotions (decimal ondemandId, string filter, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the promotions on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="filter">The filter to apply to the results.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of OnDemandPromotion</returns>
        ApiResponse<OnDemandPromotion> GetVodPromotionsWithHttpInfo (decimal ondemandId, string filter, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandPromotionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a promotion to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject33"></param>
        /// <returns>Task of OnDemandPromotion</returns>
        System.Threading.Tasks.Task<OnDemandPromotion> CreateVodPromotionAsync (decimal ondemandId, InlineObject33 inlineObject33);

        /// <summary>
        /// Add a promotion to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject33"></param>
        /// <returns>Task of ApiResponse (OnDemandPromotion)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandPromotion>> CreateVodPromotionAsyncWithHttpInfo (decimal ondemandId, InlineObject33 inlineObject33);
        /// <summary>
        /// Delete a promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVodPromotionAsync (decimal ondemandId, decimal promotionId);

        /// <summary>
        /// Delete a promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVodPromotionAsyncWithHttpInfo (decimal ondemandId, decimal promotionId);
        /// <summary>
        /// Get a specific promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>Task of OnDemandPromotion</returns>
        System.Threading.Tasks.Task<OnDemandPromotion> GetVodPromotionAsync (decimal ondemandId, decimal promotionId);

        /// <summary>
        /// Get a specific promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>Task of ApiResponse (OnDemandPromotion)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandPromotion>> GetVodPromotionAsyncWithHttpInfo (decimal ondemandId, decimal promotionId);
        /// <summary>
        /// Get all the codes of a promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of OnDemandPromotionCode</returns>
        System.Threading.Tasks.Task<OnDemandPromotionCode> GetVodPromotionCodesAsync (decimal ondemandId, decimal promotionId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the codes of a promotion on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (OnDemandPromotionCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandPromotionCode>> GetVodPromotionCodesAsyncWithHttpInfo (decimal ondemandId, decimal promotionId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Get all the promotions on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="filter">The filter to apply to the results.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of OnDemandPromotion</returns>
        System.Threading.Tasks.Task<OnDemandPromotion> GetVodPromotionsAsync (decimal ondemandId, string filter, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the promotions on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="filter">The filter to apply to the results.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (OnDemandPromotion)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandPromotion>> GetVodPromotionsAsyncWithHttpInfo (decimal ondemandId, string filter, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandPromotionsApi : IOnDemandPromotionsApiSync, IOnDemandPromotionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OnDemandPromotionsApi : IOnDemandPromotionsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPromotionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnDemandPromotionsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPromotionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnDemandPromotionsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPromotionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OnDemandPromotionsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandPromotionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OnDemandPromotionsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a promotion to an On Demand page This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject33"></param>
        /// <returns>OnDemandPromotion</returns>
        public OnDemandPromotion CreateVodPromotion (decimal ondemandId, InlineObject33 inlineObject33)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPromotion> localVarResponse = CreateVodPromotionWithHttpInfo(ondemandId, inlineObject33);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a promotion to an On Demand page This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject33"></param>
        /// <returns>ApiResponse of OnDemandPromotion</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandPromotion > CreateVodPromotionWithHttpInfo (decimal ondemandId, InlineObject33 inlineObject33)
        {
            // verify the required parameter 'inlineObject33' is set
            if (inlineObject33 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject33' when calling OnDemandPromotionsApi->CreateVodPromotion");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.ondemand.promotion+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.promotion+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.Data = inlineObject33;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< OnDemandPromotion >("/ondemand/pages/{ondemand_id}/promotions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVodPromotion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a promotion to an On Demand page This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject33"></param>
        /// <returns>Task of OnDemandPromotion</returns>
        public async System.Threading.Tasks.Task<OnDemandPromotion> CreateVodPromotionAsync (decimal ondemandId, InlineObject33 inlineObject33)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPromotion> localVarResponse = await CreateVodPromotionAsyncWithHttpInfo(ondemandId, inlineObject33);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a promotion to an On Demand page This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject33"></param>
        /// <returns>Task of ApiResponse (OnDemandPromotion)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandPromotion>> CreateVodPromotionAsyncWithHttpInfo (decimal ondemandId, InlineObject33 inlineObject33)
        {
            // verify the required parameter 'inlineObject33' is set
            if (inlineObject33 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject33' when calling OnDemandPromotionsApi->CreateVodPromotion");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.ondemand.promotion+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.promotion+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.Data = inlineObject33;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OnDemandPromotion>("/ondemand/pages/{ondemand_id}/promotions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVodPromotion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a promotion on an On Demand page This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns></returns>
        public void DeleteVodPromotion (decimal ondemandId, decimal promotionId)
        {
             DeleteVodPromotionWithHttpInfo(ondemandId, promotionId);
        }

        /// <summary>
        /// Delete a promotion on an On Demand page This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteVodPromotionWithHttpInfo (decimal ondemandId, decimal promotionId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("promotion_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(promotionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ondemand/pages/{ondemand_id}/promotions/{promotion_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVodPromotion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a promotion on an On Demand page This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVodPromotionAsync (decimal ondemandId, decimal promotionId)
        {
             await DeleteVodPromotionAsyncWithHttpInfo(ondemandId, promotionId);

        }

        /// <summary>
        /// Delete a promotion on an On Demand page This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteVodPromotionAsyncWithHttpInfo (decimal ondemandId, decimal promotionId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("promotion_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(promotionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ondemand/pages/{ondemand_id}/promotions/{promotion_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVodPromotion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific promotion on an On Demand page This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>OnDemandPromotion</returns>
        public OnDemandPromotion GetVodPromotion (decimal ondemandId, decimal promotionId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPromotion> localVarResponse = GetVodPromotionWithHttpInfo(ondemandId, promotionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific promotion on an On Demand page This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>ApiResponse of OnDemandPromotion</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandPromotion > GetVodPromotionWithHttpInfo (decimal ondemandId, decimal promotionId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.promotion+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("promotion_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(promotionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnDemandPromotion >("/ondemand/pages/{ondemand_id}/promotions/{promotion_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodPromotion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific promotion on an On Demand page This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>Task of OnDemandPromotion</returns>
        public async System.Threading.Tasks.Task<OnDemandPromotion> GetVodPromotionAsync (decimal ondemandId, decimal promotionId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPromotion> localVarResponse = await GetVodPromotionAsyncWithHttpInfo(ondemandId, promotionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific promotion on an On Demand page This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <returns>Task of ApiResponse (OnDemandPromotion)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandPromotion>> GetVodPromotionAsyncWithHttpInfo (decimal ondemandId, decimal promotionId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.promotion+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("promotion_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(promotionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnDemandPromotion>("/ondemand/pages/{ondemand_id}/promotions/{promotion_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodPromotion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the codes of a promotion on an On Demand page This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>OnDemandPromotionCode</returns>
        public OnDemandPromotionCode GetVodPromotionCodes (decimal ondemandId, decimal promotionId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPromotionCode> localVarResponse = GetVodPromotionCodesWithHttpInfo(ondemandId, promotionId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the codes of a promotion on an On Demand page This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of OnDemandPromotionCode</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandPromotionCode > GetVodPromotionCodesWithHttpInfo (decimal ondemandId, decimal promotionId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.promocode+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("promotion_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnDemandPromotionCode >("/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodPromotionCodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the codes of a promotion on an On Demand page This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of OnDemandPromotionCode</returns>
        public async System.Threading.Tasks.Task<OnDemandPromotionCode> GetVodPromotionCodesAsync (decimal ondemandId, decimal promotionId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPromotionCode> localVarResponse = await GetVodPromotionCodesAsyncWithHttpInfo(ondemandId, promotionId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the codes of a promotion on an On Demand page This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="promotionId">The ID of the promotion.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (OnDemandPromotionCode)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandPromotionCode>> GetVodPromotionCodesAsyncWithHttpInfo (decimal ondemandId, decimal promotionId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.promocode+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.PathParameters.Add("promotion_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(promotionId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnDemandPromotionCode>("/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodPromotionCodes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the promotions on an On Demand page This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="filter">The filter to apply to the results.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>OnDemandPromotion</returns>
        public OnDemandPromotion GetVodPromotions (decimal ondemandId, string filter, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPromotion> localVarResponse = GetVodPromotionsWithHttpInfo(ondemandId, filter, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the promotions on an On Demand page This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="filter">The filter to apply to the results.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of OnDemandPromotion</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandPromotion > GetVodPromotionsWithHttpInfo (decimal ondemandId, string filter, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'filter' when calling OnDemandPromotionsApi->GetVodPromotions");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.promotion+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnDemandPromotion >("/ondemand/pages/{ondemand_id}/promotions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodPromotions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the promotions on an On Demand page This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="filter">The filter to apply to the results.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of OnDemandPromotion</returns>
        public async System.Threading.Tasks.Task<OnDemandPromotion> GetVodPromotionsAsync (decimal ondemandId, string filter, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandPromotion> localVarResponse = await GetVodPromotionsAsyncWithHttpInfo(ondemandId, filter, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the promotions on an On Demand page This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="filter">The filter to apply to the results.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (OnDemandPromotion)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandPromotion>> GetVodPromotionsAsyncWithHttpInfo (decimal ondemandId, string filter, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            // verify the required parameter 'filter' is set
            if (filter == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'filter' when calling OnDemandPromotionsApi->GetVodPromotions");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.promotion+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnDemandPromotion>("/ondemand/pages/{ondemand_id}/promotions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodPromotions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
