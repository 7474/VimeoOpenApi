/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosCreditsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Credit a user in a video
        /// </summary>
        /// <remarks>
        /// This method adds a user credit to the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject57"></param>
        /// <returns>Credit</returns>
        Credit AddVideoCredit (decimal videoId, InlineObject57 inlineObject57);

        /// <summary>
        /// Credit a user in a video
        /// </summary>
        /// <remarks>
        /// This method adds a user credit to the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject57"></param>
        /// <returns>ApiResponse of Credit</returns>
        ApiResponse<Credit> AddVideoCreditWithHttpInfo (decimal videoId, InlineObject57 inlineObject57);
        /// <summary>
        /// Credit a user in a video
        /// </summary>
        /// <remarks>
        /// This method adds a user credit to the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject11"></param>
        /// <returns>Credit</returns>
        Credit AddVideoCreditAlt1 (decimal channelId, decimal videoId, InlineObject11 inlineObject11);

        /// <summary>
        /// Credit a user in a video
        /// </summary>
        /// <remarks>
        /// This method adds a user credit to the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject11"></param>
        /// <returns>ApiResponse of Credit</returns>
        ApiResponse<Credit> AddVideoCreditAlt1WithHttpInfo (decimal channelId, decimal videoId, InlineObject11 inlineObject11);
        /// <summary>
        /// Delete the credit for a user in a video
        /// </summary>
        /// <remarks>
        /// This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void DeleteVideoCredit (decimal creditId, decimal videoId);

        /// <summary>
        /// Delete the credit for a user in a video
        /// </summary>
        /// <remarks>
        /// This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVideoCreditWithHttpInfo (decimal creditId, decimal videoId);
        /// <summary>
        /// Edit the credit for a user in a video
        /// </summary>
        /// <remarks>
        /// This method edits the specified user credit in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject58"> (optional)</param>
        /// <returns>Credit</returns>
        Credit EditVideoCredit (decimal creditId, decimal videoId, InlineObject58 inlineObject58 = default(InlineObject58));

        /// <summary>
        /// Edit the credit for a user in a video
        /// </summary>
        /// <remarks>
        /// This method edits the specified user credit in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject58"> (optional)</param>
        /// <returns>ApiResponse of Credit</returns>
        ApiResponse<Credit> EditVideoCreditWithHttpInfo (decimal creditId, decimal videoId, InlineObject58 inlineObject58 = default(InlineObject58));
        /// <summary>
        /// Get a specific credited user in a video
        /// </summary>
        /// <remarks>
        /// This method returns a single credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Credit</returns>
        Credit GetVideoCredit (decimal creditId, decimal videoId);

        /// <summary>
        /// Get a specific credited user in a video
        /// </summary>
        /// <remarks>
        /// This method returns a single credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Credit</returns>
        ApiResponse<Credit> GetVideoCreditWithHttpInfo (decimal creditId, decimal videoId);
        /// <summary>
        /// Get all the credited users in a video
        /// </summary>
        /// <remarks>
        /// This method returns every credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>List&lt;Credit&gt;</returns>
        List<Credit> GetVideoCredits (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the credited users in a video
        /// </summary>
        /// <remarks>
        /// This method returns every credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Credit&gt;</returns>
        ApiResponse<List<Credit>> GetVideoCreditsWithHttpInfo (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the credited users in a video
        /// </summary>
        /// <remarks>
        /// This method returns every credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>List&lt;Credit&gt;</returns>
        List<Credit> GetVideoCreditsAlt1 (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the credited users in a video
        /// </summary>
        /// <remarks>
        /// This method returns every credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Credit&gt;</returns>
        ApiResponse<List<Credit>> GetVideoCreditsAlt1WithHttpInfo (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosCreditsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Credit a user in a video
        /// </summary>
        /// <remarks>
        /// This method adds a user credit to the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject57"></param>
        /// <returns>Task of Credit</returns>
        System.Threading.Tasks.Task<Credit> AddVideoCreditAsync (decimal videoId, InlineObject57 inlineObject57);

        /// <summary>
        /// Credit a user in a video
        /// </summary>
        /// <remarks>
        /// This method adds a user credit to the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject57"></param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credit>> AddVideoCreditAsyncWithHttpInfo (decimal videoId, InlineObject57 inlineObject57);
        /// <summary>
        /// Credit a user in a video
        /// </summary>
        /// <remarks>
        /// This method adds a user credit to the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject11"></param>
        /// <returns>Task of Credit</returns>
        System.Threading.Tasks.Task<Credit> AddVideoCreditAlt1Async (decimal channelId, decimal videoId, InlineObject11 inlineObject11);

        /// <summary>
        /// Credit a user in a video
        /// </summary>
        /// <remarks>
        /// This method adds a user credit to the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject11"></param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credit>> AddVideoCreditAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, InlineObject11 inlineObject11);
        /// <summary>
        /// Delete the credit for a user in a video
        /// </summary>
        /// <remarks>
        /// This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVideoCreditAsync (decimal creditId, decimal videoId);

        /// <summary>
        /// Delete the credit for a user in a video
        /// </summary>
        /// <remarks>
        /// This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVideoCreditAsyncWithHttpInfo (decimal creditId, decimal videoId);
        /// <summary>
        /// Edit the credit for a user in a video
        /// </summary>
        /// <remarks>
        /// This method edits the specified user credit in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject58"> (optional)</param>
        /// <returns>Task of Credit</returns>
        System.Threading.Tasks.Task<Credit> EditVideoCreditAsync (decimal creditId, decimal videoId, InlineObject58 inlineObject58 = default(InlineObject58));

        /// <summary>
        /// Edit the credit for a user in a video
        /// </summary>
        /// <remarks>
        /// This method edits the specified user credit in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject58"> (optional)</param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credit>> EditVideoCreditAsyncWithHttpInfo (decimal creditId, decimal videoId, InlineObject58 inlineObject58 = default(InlineObject58));
        /// <summary>
        /// Get a specific credited user in a video
        /// </summary>
        /// <remarks>
        /// This method returns a single credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Credit</returns>
        System.Threading.Tasks.Task<Credit> GetVideoCreditAsync (decimal creditId, decimal videoId);

        /// <summary>
        /// Get a specific credited user in a video
        /// </summary>
        /// <remarks>
        /// This method returns a single credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credit>> GetVideoCreditAsyncWithHttpInfo (decimal creditId, decimal videoId);
        /// <summary>
        /// Get all the credited users in a video
        /// </summary>
        /// <remarks>
        /// This method returns every credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>Task of List&lt;Credit&gt;</returns>
        System.Threading.Tasks.Task<List<Credit>> GetVideoCreditsAsync (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the credited users in a video
        /// </summary>
        /// <remarks>
        /// This method returns every credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Credit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Credit>>> GetVideoCreditsAsyncWithHttpInfo (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the credited users in a video
        /// </summary>
        /// <remarks>
        /// This method returns every credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>Task of List&lt;Credit&gt;</returns>
        System.Threading.Tasks.Task<List<Credit>> GetVideoCreditsAlt1Async (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the credited users in a video
        /// </summary>
        /// <remarks>
        /// This method returns every credited user in a video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Credit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Credit>>> GetVideoCreditsAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosCreditsApi : IVideosCreditsApiSync, IVideosCreditsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VideosCreditsApi : IVideosCreditsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosCreditsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosCreditsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosCreditsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosCreditsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosCreditsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VideosCreditsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosCreditsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VideosCreditsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Credit a user in a video This method adds a user credit to the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject57"></param>
        /// <returns>Credit</returns>
        public Credit AddVideoCredit (decimal videoId, InlineObject57 inlineObject57)
        {
             VimeoOpenApi.Client.ApiResponse<Credit> localVarResponse = AddVideoCreditWithHttpInfo(videoId, inlineObject57);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Credit a user in a video This method adds a user credit to the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject57"></param>
        /// <returns>ApiResponse of Credit</returns>
        public VimeoOpenApi.Client.ApiResponse< Credit > AddVideoCreditWithHttpInfo (decimal videoId, InlineObject57 inlineObject57)
        {
            // verify the required parameter 'inlineObject57' is set
            if (inlineObject57 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject57' when calling VideosCreditsApi->AddVideoCredit");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject57;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Credit >("/videos/{video_id}/credits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoCredit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Credit a user in a video This method adds a user credit to the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject57"></param>
        /// <returns>Task of Credit</returns>
        public async System.Threading.Tasks.Task<Credit> AddVideoCreditAsync (decimal videoId, InlineObject57 inlineObject57)
        {
             VimeoOpenApi.Client.ApiResponse<Credit> localVarResponse = await AddVideoCreditAsyncWithHttpInfo(videoId, inlineObject57);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Credit a user in a video This method adds a user credit to the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject57"></param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Credit>> AddVideoCreditAsyncWithHttpInfo (decimal videoId, InlineObject57 inlineObject57)
        {
            // verify the required parameter 'inlineObject57' is set
            if (inlineObject57 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject57' when calling VideosCreditsApi->AddVideoCredit");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject57;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Credit>("/videos/{video_id}/credits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoCredit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Credit a user in a video This method adds a user credit to the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject11"></param>
        /// <returns>Credit</returns>
        public Credit AddVideoCreditAlt1 (decimal channelId, decimal videoId, InlineObject11 inlineObject11)
        {
             VimeoOpenApi.Client.ApiResponse<Credit> localVarResponse = AddVideoCreditAlt1WithHttpInfo(channelId, videoId, inlineObject11);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Credit a user in a video This method adds a user credit to the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject11"></param>
        /// <returns>ApiResponse of Credit</returns>
        public VimeoOpenApi.Client.ApiResponse< Credit > AddVideoCreditAlt1WithHttpInfo (decimal channelId, decimal videoId, InlineObject11 inlineObject11)
        {
            // verify the required parameter 'inlineObject11' is set
            if (inlineObject11 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject11' when calling VideosCreditsApi->AddVideoCreditAlt1");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject11;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Credit >("/channels/{channel_id}/videos/{video_id}/credits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoCreditAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Credit a user in a video This method adds a user credit to the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject11"></param>
        /// <returns>Task of Credit</returns>
        public async System.Threading.Tasks.Task<Credit> AddVideoCreditAlt1Async (decimal channelId, decimal videoId, InlineObject11 inlineObject11)
        {
             VimeoOpenApi.Client.ApiResponse<Credit> localVarResponse = await AddVideoCreditAlt1AsyncWithHttpInfo(channelId, videoId, inlineObject11);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Credit a user in a video This method adds a user credit to the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject11"></param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Credit>> AddVideoCreditAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, InlineObject11 inlineObject11)
        {
            // verify the required parameter 'inlineObject11' is set
            if (inlineObject11 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject11' when calling VideosCreditsApi->AddVideoCreditAlt1");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject11;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Credit>("/channels/{channel_id}/videos/{video_id}/credits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoCreditAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the credit for a user in a video This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void DeleteVideoCredit (decimal creditId, decimal videoId)
        {
             DeleteVideoCreditWithHttpInfo(creditId, videoId);
        }

        /// <summary>
        /// Delete the credit for a user in a video This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteVideoCreditWithHttpInfo (decimal creditId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("credit_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(creditId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/videos/{video_id}/credits/{credit_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVideoCredit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the credit for a user in a video This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVideoCreditAsync (decimal creditId, decimal videoId)
        {
             await DeleteVideoCreditAsyncWithHttpInfo(creditId, videoId);

        }

        /// <summary>
        /// Delete the credit for a user in a video This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteVideoCreditAsyncWithHttpInfo (decimal creditId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("credit_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(creditId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/videos/{video_id}/credits/{credit_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVideoCredit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit the credit for a user in a video This method edits the specified user credit in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject58"> (optional)</param>
        /// <returns>Credit</returns>
        public Credit EditVideoCredit (decimal creditId, decimal videoId, InlineObject58 inlineObject58 = default(InlineObject58))
        {
             VimeoOpenApi.Client.ApiResponse<Credit> localVarResponse = EditVideoCreditWithHttpInfo(creditId, videoId, inlineObject58);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit the credit for a user in a video This method edits the specified user credit in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject58"> (optional)</param>
        /// <returns>ApiResponse of Credit</returns>
        public VimeoOpenApi.Client.ApiResponse< Credit > EditVideoCreditWithHttpInfo (decimal creditId, decimal videoId, InlineObject58 inlineObject58 = default(InlineObject58))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("credit_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(creditId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject58;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Credit >("/videos/{video_id}/credits/{credit_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditVideoCredit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit the credit for a user in a video This method edits the specified user credit in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject58"> (optional)</param>
        /// <returns>Task of Credit</returns>
        public async System.Threading.Tasks.Task<Credit> EditVideoCreditAsync (decimal creditId, decimal videoId, InlineObject58 inlineObject58 = default(InlineObject58))
        {
             VimeoOpenApi.Client.ApiResponse<Credit> localVarResponse = await EditVideoCreditAsyncWithHttpInfo(creditId, videoId, inlineObject58);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit the credit for a user in a video This method edits the specified user credit in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject58"> (optional)</param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Credit>> EditVideoCreditAsyncWithHttpInfo (decimal creditId, decimal videoId, InlineObject58 inlineObject58 = default(InlineObject58))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("credit_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(creditId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject58;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Credit>("/videos/{video_id}/credits/{credit_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditVideoCredit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific credited user in a video This method returns a single credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Credit</returns>
        public Credit GetVideoCredit (decimal creditId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Credit> localVarResponse = GetVideoCreditWithHttpInfo(creditId, videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific credited user in a video This method returns a single credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Credit</returns>
        public VimeoOpenApi.Client.ApiResponse< Credit > GetVideoCreditWithHttpInfo (decimal creditId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("credit_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(creditId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Credit >("/videos/{video_id}/credits/{credit_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoCredit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific credited user in a video This method returns a single credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Credit</returns>
        public async System.Threading.Tasks.Task<Credit> GetVideoCreditAsync (decimal creditId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Credit> localVarResponse = await GetVideoCreditAsyncWithHttpInfo(creditId, videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific credited user in a video This method returns a single credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditId">The ID of the credit.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Credit>> GetVideoCreditAsyncWithHttpInfo (decimal creditId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("credit_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(creditId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Credit>("/videos/{video_id}/credits/{credit_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoCredit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the credited users in a video This method returns every credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>List&lt;Credit&gt;</returns>
        public List<Credit> GetVideoCredits (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Credit>> localVarResponse = GetVideoCreditsWithHttpInfo(videoId, direction, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the credited users in a video This method returns every credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Credit&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Credit> > GetVideoCreditsWithHttpInfo (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Credit> >("/videos/{video_id}/credits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoCredits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the credited users in a video This method returns every credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>Task of List&lt;Credit&gt;</returns>
        public async System.Threading.Tasks.Task<List<Credit>> GetVideoCreditsAsync (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Credit>> localVarResponse = await GetVideoCreditsAsyncWithHttpInfo(videoId, direction, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the credited users in a video This method returns every credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Credit&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Credit>>> GetVideoCreditsAsyncWithHttpInfo (decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Credit>>("/videos/{video_id}/credits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoCredits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the credited users in a video This method returns every credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>List&lt;Credit&gt;</returns>
        public List<Credit> GetVideoCreditsAlt1 (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Credit>> localVarResponse = GetVideoCreditsAlt1WithHttpInfo(channelId, videoId, direction, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the credited users in a video This method returns every credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Credit&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Credit> > GetVideoCreditsAlt1WithHttpInfo (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Credit> >("/channels/{channel_id}/videos/{video_id}/credits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoCreditsAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the credited users in a video This method returns every credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>Task of List&lt;Credit&gt;</returns>
        public async System.Threading.Tasks.Task<List<Credit>> GetVideoCreditsAlt1Async (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Credit>> localVarResponse = await GetVideoCreditsAlt1AsyncWithHttpInfo(channelId, videoId, direction, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the credited users in a video This method returns every credited user in a video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Credit&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Credit>>> GetVideoCreditsAlt1AsyncWithHttpInfo (decimal channelId, decimal videoId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.credit+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("channel_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Credit>>("/channels/{channel_id}/videos/{video_id}/credits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoCreditsAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
