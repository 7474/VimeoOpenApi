/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersFollowersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check if the user is following another user
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is a follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        void CheckIfUserIsFollowing (decimal followUserId, decimal userId);

        /// <summary>
        /// Check if the user is following another user
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is a follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckIfUserIsFollowingWithHttpInfo (decimal followUserId, decimal userId);
        /// <summary>
        /// Check if the user is following another user
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is a follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns></returns>
        void CheckIfUserIsFollowingAlt1 (decimal followUserId);

        /// <summary>
        /// Check if the user is following another user
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is a follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckIfUserIsFollowingAlt1WithHttpInfo (decimal followUserId);
        /// <summary>
        /// Follow a specific user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        void FollowUser (decimal followUserId, decimal userId);

        /// <summary>
        /// Follow a specific user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FollowUserWithHttpInfo (decimal followUserId, decimal userId);
        /// <summary>
        /// Follow a specific user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns></returns>
        void FollowUserAlt1 (decimal followUserId);

        /// <summary>
        /// Follow a specific user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FollowUserAlt1WithHttpInfo (decimal followUserId);
        /// <summary>
        /// Follow a list of users
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject44"></param>
        /// <returns></returns>
        void FollowUsers (decimal userId, InlineObject44 inlineObject44);

        /// <summary>
        /// Follow a list of users
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject44"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FollowUsersWithHttpInfo (decimal userId, InlineObject44 inlineObject44);
        /// <summary>
        /// Follow a list of users
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"></param>
        /// <returns></returns>
        void FollowUsersAlt1 (InlineObject20 inlineObject20);

        /// <summary>
        /// Follow a list of users
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FollowUsersAlt1WithHttpInfo (InlineObject20 inlineObject20);
        /// <summary>
        /// Get all the followers of the user
        /// </summary>
        /// <remarks>
        /// This method returns every follower of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetFollowers (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the followers of the user
        /// </summary>
        /// <remarks>
        /// This method returns every follower of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetFollowersWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the followers of the user
        /// </summary>
        /// <remarks>
        /// This method returns every follower of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetFollowersAlt1 (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the followers of the user
        /// </summary>
        /// <remarks>
        /// This method returns every follower of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetFollowersAlt1WithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the users that the user is following
        /// </summary>
        /// <remarks>
        /// This method returns every user that the authenticated user is following.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetUserFollowing (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the users that the user is following
        /// </summary>
        /// <remarks>
        /// This method returns every user that the authenticated user is following.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetUserFollowingWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the users that the user is following
        /// </summary>
        /// <remarks>
        /// This method returns every user that the authenticated user is following.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetUserFollowingAlt1 (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the users that the user is following
        /// </summary>
        /// <remarks>
        /// This method returns every user that the authenticated user is following.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetUserFollowingAlt1WithHttpInfo (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to stop following another user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        void UnfollowUser (decimal followUserId, decimal userId);

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to stop following another user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnfollowUserWithHttpInfo (decimal followUserId, decimal userId);
        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to stop following another user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <returns></returns>
        void UnfollowUserAlt1 (decimal followUserId);

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to stop following another user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnfollowUserAlt1WithHttpInfo (decimal followUserId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersFollowersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check if the user is following another user
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is a follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckIfUserIsFollowingAsync (decimal followUserId, decimal userId);

        /// <summary>
        /// Check if the user is following another user
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is a follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckIfUserIsFollowingAsyncWithHttpInfo (decimal followUserId, decimal userId);
        /// <summary>
        /// Check if the user is following another user
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is a follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckIfUserIsFollowingAlt1Async (decimal followUserId);

        /// <summary>
        /// Check if the user is following another user
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is a follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckIfUserIsFollowingAlt1AsyncWithHttpInfo (decimal followUserId);
        /// <summary>
        /// Follow a specific user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FollowUserAsync (decimal followUserId, decimal userId);

        /// <summary>
        /// Follow a specific user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FollowUserAsyncWithHttpInfo (decimal followUserId, decimal userId);
        /// <summary>
        /// Follow a specific user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FollowUserAlt1Async (decimal followUserId);

        /// <summary>
        /// Follow a specific user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of the specified user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FollowUserAlt1AsyncWithHttpInfo (decimal followUserId);
        /// <summary>
        /// Follow a list of users
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject44"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FollowUsersAsync (decimal userId, InlineObject44 inlineObject44);

        /// <summary>
        /// Follow a list of users
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject44"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FollowUsersAsyncWithHttpInfo (decimal userId, InlineObject44 inlineObject44);
        /// <summary>
        /// Follow a list of users
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FollowUsersAlt1Async (InlineObject20 inlineObject20);

        /// <summary>
        /// Follow a list of users
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FollowUsersAlt1AsyncWithHttpInfo (InlineObject20 inlineObject20);
        /// <summary>
        /// Get all the followers of the user
        /// </summary>
        /// <remarks>
        /// This method returns every follower of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetFollowersAsync (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the followers of the user
        /// </summary>
        /// <remarks>
        /// This method returns every follower of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetFollowersAsyncWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the followers of the user
        /// </summary>
        /// <remarks>
        /// This method returns every follower of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetFollowersAlt1Async (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the followers of the user
        /// </summary>
        /// <remarks>
        /// This method returns every follower of the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetFollowersAlt1AsyncWithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the users that the user is following
        /// </summary>
        /// <remarks>
        /// This method returns every user that the authenticated user is following.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetUserFollowingAsync (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the users that the user is following
        /// </summary>
        /// <remarks>
        /// This method returns every user that the authenticated user is following.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetUserFollowingAsyncWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the users that the user is following
        /// </summary>
        /// <remarks>
        /// This method returns every user that the authenticated user is following.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetUserFollowingAlt1Async (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the users that the user is following
        /// </summary>
        /// <remarks>
        /// This method returns every user that the authenticated user is following.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetUserFollowingAlt1AsyncWithHttpInfo (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to stop following another user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnfollowUserAsync (decimal followUserId, decimal userId);

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to stop following another user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnfollowUserAsyncWithHttpInfo (decimal followUserId, decimal userId);
        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to stop following another user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnfollowUserAlt1Async (decimal followUserId);

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>
        /// This method causes the authenticated user to stop following another user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnfollowUserAlt1AsyncWithHttpInfo (decimal followUserId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersFollowersApi : IUsersFollowersApiSync, IUsersFollowersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersFollowersApi : IUsersFollowersApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersFollowersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersFollowersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersFollowersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersFollowersApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersFollowersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersFollowersApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersFollowersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersFollowersApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check if the user is following another user This method determines whether the authenticated user is a follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        public void CheckIfUserIsFollowing (decimal followUserId, decimal userId)
        {
             CheckIfUserIsFollowingWithHttpInfo(followUserId, userId);
        }

        /// <summary>
        /// Check if the user is following another user This method determines whether the authenticated user is a follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> CheckIfUserIsFollowingWithHttpInfo (decimal followUserId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/users/{user_id}/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserIsFollowing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the user is following another user This method determines whether the authenticated user is a follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckIfUserIsFollowingAsync (decimal followUserId, decimal userId)
        {
             await CheckIfUserIsFollowingAsyncWithHttpInfo(followUserId, userId);

        }

        /// <summary>
        /// Check if the user is following another user This method determines whether the authenticated user is a follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> CheckIfUserIsFollowingAsyncWithHttpInfo (decimal followUserId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/users/{user_id}/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserIsFollowing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the user is following another user This method determines whether the authenticated user is a follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns></returns>
        public void CheckIfUserIsFollowingAlt1 (decimal followUserId)
        {
             CheckIfUserIsFollowingAlt1WithHttpInfo(followUserId);
        }

        /// <summary>
        /// Check if the user is following another user This method determines whether the authenticated user is a follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> CheckIfUserIsFollowingAlt1WithHttpInfo (decimal followUserId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/me/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserIsFollowingAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the user is following another user This method determines whether the authenticated user is a follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckIfUserIsFollowingAlt1Async (decimal followUserId)
        {
             await CheckIfUserIsFollowingAlt1AsyncWithHttpInfo(followUserId);

        }

        /// <summary>
        /// Check if the user is following another user This method determines whether the authenticated user is a follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> CheckIfUserIsFollowingAlt1AsyncWithHttpInfo (decimal followUserId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/me/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserIsFollowingAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a specific user This method causes the authenticated user to become the follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        public void FollowUser (decimal followUserId, decimal userId)
        {
             FollowUserWithHttpInfo(followUserId, userId);
        }

        /// <summary>
        /// Follow a specific user This method causes the authenticated user to become the follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> FollowUserWithHttpInfo (decimal followUserId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/{user_id}/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a specific user This method causes the authenticated user to become the follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FollowUserAsync (decimal followUserId, decimal userId)
        {
             await FollowUserAsyncWithHttpInfo(followUserId, userId);

        }

        /// <summary>
        /// Follow a specific user This method causes the authenticated user to become the follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> FollowUserAsyncWithHttpInfo (decimal followUserId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/{user_id}/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a specific user This method causes the authenticated user to become the follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns></returns>
        public void FollowUserAlt1 (decimal followUserId)
        {
             FollowUserAlt1WithHttpInfo(followUserId);
        }

        /// <summary>
        /// Follow a specific user This method causes the authenticated user to become the follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> FollowUserAlt1WithHttpInfo (decimal followUserId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/me/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowUserAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a specific user This method causes the authenticated user to become the follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FollowUserAlt1Async (decimal followUserId)
        {
             await FollowUserAlt1AsyncWithHttpInfo(followUserId);

        }

        /// <summary>
        /// Follow a specific user This method causes the authenticated user to become the follower of the specified user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to follow.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> FollowUserAlt1AsyncWithHttpInfo (decimal followUserId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/me/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowUserAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a list of users This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject44"></param>
        /// <returns></returns>
        public void FollowUsers (decimal userId, InlineObject44 inlineObject44)
        {
             FollowUsersWithHttpInfo(userId, inlineObject44);
        }

        /// <summary>
        /// Follow a list of users This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject44"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> FollowUsersWithHttpInfo (decimal userId, InlineObject44 inlineObject44)
        {
            // verify the required parameter 'inlineObject44' is set
            if (inlineObject44 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject44' when calling UsersFollowersApi->FollowUsers");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject44;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/users/{user_id}/following", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a list of users This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject44"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FollowUsersAsync (decimal userId, InlineObject44 inlineObject44)
        {
             await FollowUsersAsyncWithHttpInfo(userId, inlineObject44);

        }

        /// <summary>
        /// Follow a list of users This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject44"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> FollowUsersAsyncWithHttpInfo (decimal userId, InlineObject44 inlineObject44)
        {
            // verify the required parameter 'inlineObject44' is set
            if (inlineObject44 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject44' when calling UsersFollowersApi->FollowUsers");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject44;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/users/{user_id}/following", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a list of users This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"></param>
        /// <returns></returns>
        public void FollowUsersAlt1 (InlineObject20 inlineObject20)
        {
             FollowUsersAlt1WithHttpInfo(inlineObject20);
        }

        /// <summary>
        /// Follow a list of users This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> FollowUsersAlt1WithHttpInfo (InlineObject20 inlineObject20)
        {
            // verify the required parameter 'inlineObject20' is set
            if (inlineObject20 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject20' when calling UsersFollowersApi->FollowUsersAlt1");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject20;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/me/following", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowUsersAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a list of users This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FollowUsersAlt1Async (InlineObject20 inlineObject20)
        {
             await FollowUsersAlt1AsyncWithHttpInfo(inlineObject20);

        }

        /// <summary>
        /// Follow a list of users This method causes the authenticated user to become the follower of multiple users. In the body of the request, specify the list of users to follow as an array of URIs, where &#x60;user01_id&#x60;, &#x60;user02_id&#x60;, &#x60;user03_id&#x60;, and so on, are the user IDs of the users in question:  &#x60;&#x60;&#x60; {  [      {\&quot;uri\&quot; : \&quot;/users/{user01_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user02_id}\&quot;},      {\&quot;uri\&quot; : \&quot;/users/{user03_id}\&quot;}  ] } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject20"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> FollowUsersAlt1AsyncWithHttpInfo (InlineObject20 inlineObject20)
        {
            // verify the required parameter 'inlineObject20' is set
            if (inlineObject20 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject20' when calling UsersFollowersApi->FollowUsersAlt1");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject20;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/me/following", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FollowUsersAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the followers of the user This method returns every follower of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetFollowers (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = GetFollowersWithHttpInfo(userId, direction, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the followers of the user This method returns every follower of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<User> > GetFollowersWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<User> >("/users/{user_id}/followers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the followers of the user This method returns every follower of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetFollowersAsync (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = await GetFollowersAsyncWithHttpInfo(userId, direction, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the followers of the user This method returns every follower of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<User>>> GetFollowersAsyncWithHttpInfo (decimal userId, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/users/{user_id}/followers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the followers of the user This method returns every follower of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetFollowersAlt1 (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = GetFollowersAlt1WithHttpInfo(direction, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the followers of the user This method returns every follower of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<User> > GetFollowersAlt1WithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<User> >("/me/followers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowersAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the followers of the user This method returns every follower of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetFollowersAlt1Async (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = await GetFollowersAlt1AsyncWithHttpInfo(direction, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the followers of the user This method returns every follower of the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<User>>> GetFollowersAlt1AsyncWithHttpInfo (string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/me/followers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowersAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the users that the user is following This method returns every user that the authenticated user is following.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetUserFollowing (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = GetUserFollowingWithHttpInfo(userId, direction, filter, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the users that the user is following This method returns every user that the authenticated user is following.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<User> > GetUserFollowingWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<User> >("/users/{user_id}/following", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserFollowing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the users that the user is following This method returns every user that the authenticated user is following.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetUserFollowingAsync (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = await GetUserFollowingAsyncWithHttpInfo(userId, direction, filter, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the users that the user is following This method returns every user that the authenticated user is following.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<User>>> GetUserFollowingAsyncWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/users/{user_id}/following", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserFollowing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the users that the user is following This method returns every user that the authenticated user is following.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetUserFollowingAlt1 (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = GetUserFollowingAlt1WithHttpInfo(direction, filter, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the users that the user is following This method returns every user that the authenticated user is following.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<User> > GetUserFollowingAlt1WithHttpInfo (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<User> >("/me/following", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserFollowingAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the users that the user is following This method returns every user that the authenticated user is following.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetUserFollowingAlt1Async (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<User>> localVarResponse = await GetUserFollowingAlt1AsyncWithHttpInfo(direction, filter, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the users that the user is following This method returns every user that the authenticated user is following.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;online&#x60; - Return users who are currently online.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;date&#x60; - Sort the results by date followed.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<User>>> GetUserFollowingAlt1AsyncWithHttpInfo (string direction = default(string), string filter = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.user+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/me/following", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserFollowingAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unfollow a user This method causes the authenticated user to stop following another user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns></returns>
        public void UnfollowUser (decimal followUserId, decimal userId)
        {
             UnfollowUserWithHttpInfo(followUserId, userId);
        }

        /// <summary>
        /// Unfollow a user This method causes the authenticated user to stop following another user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> UnfollowUserWithHttpInfo (decimal followUserId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{user_id}/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnfollowUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unfollow a user This method causes the authenticated user to stop following another user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnfollowUserAsync (decimal followUserId, decimal userId)
        {
             await UnfollowUserAsyncWithHttpInfo(followUserId, userId);

        }

        /// <summary>
        /// Unfollow a user This method causes the authenticated user to stop following another user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> UnfollowUserAsyncWithHttpInfo (decimal followUserId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{user_id}/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnfollowUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unfollow a user This method causes the authenticated user to stop following another user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <returns></returns>
        public void UnfollowUserAlt1 (decimal followUserId)
        {
             UnfollowUserAlt1WithHttpInfo(followUserId);
        }

        /// <summary>
        /// Unfollow a user This method causes the authenticated user to stop following another user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> UnfollowUserAlt1WithHttpInfo (decimal followUserId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/me/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnfollowUserAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unfollow a user This method causes the authenticated user to stop following another user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnfollowUserAlt1Async (decimal followUserId)
        {
             await UnfollowUserAlt1AsyncWithHttpInfo(followUserId);

        }

        /// <summary>
        /// Unfollow a user This method causes the authenticated user to stop following another user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUserId">The ID of the user to unfollow.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> UnfollowUserAlt1AsyncWithHttpInfo (decimal followUserId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("follow_user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(followUserId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/me/following/{follow_user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnfollowUserAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
