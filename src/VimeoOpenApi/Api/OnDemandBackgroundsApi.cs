/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandBackgroundsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a background to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Picture</returns>
        Picture CreateVodBackground (decimal ondemandId);

        /// <summary>
        /// Add a background to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> CreateVodBackgroundWithHttpInfo (decimal ondemandId);
        /// <summary>
        /// Delete a background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns></returns>
        void DeleteVodBackground (decimal backgroundId, decimal ondemandId);

        /// <summary>
        /// Delete a background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVodBackgroundWithHttpInfo (decimal backgroundId, decimal ondemandId);
        /// <summary>
        /// Edit a background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject31"> (optional)</param>
        /// <returns>Picture</returns>
        Picture EditVodBackground (decimal backgroundId, decimal ondemandId, InlineObject31 inlineObject31 = default(InlineObject31));

        /// <summary>
        /// Edit a background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject31"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> EditVodBackgroundWithHttpInfo (decimal backgroundId, decimal ondemandId, InlineObject31 inlineObject31 = default(InlineObject31));
        /// <summary>
        /// Get a specific background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Picture</returns>
        Picture GetVodBackground (decimal backgroundId, decimal ondemandId);

        /// <summary>
        /// Get a specific background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of Picture</returns>
        ApiResponse<Picture> GetVodBackgroundWithHttpInfo (decimal backgroundId, decimal ondemandId);
        /// <summary>
        /// Get all the backgrounds on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        List<Picture> GetVodBackgrounds (decimal ondemandId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the backgrounds on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        ApiResponse<List<Picture>> GetVodBackgroundsWithHttpInfo (decimal ondemandId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandBackgroundsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a background to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> CreateVodBackgroundAsync (decimal ondemandId);

        /// <summary>
        /// Add a background to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> CreateVodBackgroundAsyncWithHttpInfo (decimal ondemandId);
        /// <summary>
        /// Delete a background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVodBackgroundAsync (decimal backgroundId, decimal ondemandId);

        /// <summary>
        /// Delete a background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVodBackgroundAsyncWithHttpInfo (decimal backgroundId, decimal ondemandId);
        /// <summary>
        /// Edit a background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject31"> (optional)</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> EditVodBackgroundAsync (decimal backgroundId, decimal ondemandId, InlineObject31 inlineObject31 = default(InlineObject31));

        /// <summary>
        /// Edit a background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject31"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> EditVodBackgroundAsyncWithHttpInfo (decimal backgroundId, decimal ondemandId, InlineObject31 inlineObject31 = default(InlineObject31));
        /// <summary>
        /// Get a specific background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of Picture</returns>
        System.Threading.Tasks.Task<Picture> GetVodBackgroundAsync (decimal backgroundId, decimal ondemandId);

        /// <summary>
        /// Get a specific background on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        System.Threading.Tasks.Task<ApiResponse<Picture>> GetVodBackgroundAsyncWithHttpInfo (decimal backgroundId, decimal ondemandId);
        /// <summary>
        /// Get all the backgrounds on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        System.Threading.Tasks.Task<List<Picture>> GetVodBackgroundsAsync (decimal ondemandId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the backgrounds on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Picture>>> GetVodBackgroundsAsyncWithHttpInfo (decimal ondemandId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandBackgroundsApi : IOnDemandBackgroundsApiSync, IOnDemandBackgroundsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OnDemandBackgroundsApi : IOnDemandBackgroundsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandBackgroundsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnDemandBackgroundsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandBackgroundsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnDemandBackgroundsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandBackgroundsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OnDemandBackgroundsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandBackgroundsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OnDemandBackgroundsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a background to an On Demand page This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Picture</returns>
        public Picture CreateVodBackground (decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = CreateVodBackgroundWithHttpInfo(ondemandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a background to an On Demand page This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > CreateVodBackgroundWithHttpInfo (decimal ondemandId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Picture >("/ondemand/pages/{ondemand_id}/backgrounds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVodBackground", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a background to an On Demand page This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> CreateVodBackgroundAsync (decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await CreateVodBackgroundAsyncWithHttpInfo(ondemandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a background to an On Demand page This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> CreateVodBackgroundAsyncWithHttpInfo (decimal ondemandId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Picture>("/ondemand/pages/{ondemand_id}/backgrounds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVodBackground", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a background on an On Demand page This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns></returns>
        public void DeleteVodBackground (decimal backgroundId, decimal ondemandId)
        {
             DeleteVodBackgroundWithHttpInfo(backgroundId, ondemandId);
        }

        /// <summary>
        /// Delete a background on an On Demand page This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteVodBackgroundWithHttpInfo (decimal backgroundId, decimal ondemandId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("background_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(backgroundId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ondemand/pages/{ondemand_id}/backgrounds/{background_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVodBackground", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a background on an On Demand page This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVodBackgroundAsync (decimal backgroundId, decimal ondemandId)
        {
             await DeleteVodBackgroundAsyncWithHttpInfo(backgroundId, ondemandId);

        }

        /// <summary>
        /// Delete a background on an On Demand page This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteVodBackgroundAsyncWithHttpInfo (decimal backgroundId, decimal ondemandId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("background_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(backgroundId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ondemand/pages/{ondemand_id}/backgrounds/{background_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVodBackground", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a background on an On Demand page This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject31"> (optional)</param>
        /// <returns>Picture</returns>
        public Picture EditVodBackground (decimal backgroundId, decimal ondemandId, InlineObject31 inlineObject31 = default(InlineObject31))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = EditVodBackgroundWithHttpInfo(backgroundId, ondemandId, inlineObject31);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a background on an On Demand page This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject31"> (optional)</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > EditVodBackgroundWithHttpInfo (decimal backgroundId, decimal ondemandId, InlineObject31 inlineObject31 = default(InlineObject31))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("background_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(backgroundId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.Data = inlineObject31;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Picture >("/ondemand/pages/{ondemand_id}/backgrounds/{background_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditVodBackground", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a background on an On Demand page This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject31"> (optional)</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> EditVodBackgroundAsync (decimal backgroundId, decimal ondemandId, InlineObject31 inlineObject31 = default(InlineObject31))
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await EditVodBackgroundAsyncWithHttpInfo(backgroundId, ondemandId, inlineObject31);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a background on an On Demand page This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject31"> (optional)</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> EditVodBackgroundAsyncWithHttpInfo (decimal backgroundId, decimal ondemandId, InlineObject31 inlineObject31 = default(InlineObject31))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("background_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(backgroundId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.Data = inlineObject31;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Picture>("/ondemand/pages/{ondemand_id}/backgrounds/{background_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditVodBackground", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific background on an On Demand page This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Picture</returns>
        public Picture GetVodBackground (decimal backgroundId, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = GetVodBackgroundWithHttpInfo(backgroundId, ondemandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific background on an On Demand page This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of Picture</returns>
        public VimeoOpenApi.Client.ApiResponse< Picture > GetVodBackgroundWithHttpInfo (decimal backgroundId, decimal ondemandId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("background_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(backgroundId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Picture >("/ondemand/pages/{ondemand_id}/backgrounds/{background_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodBackground", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific background on an On Demand page This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of Picture</returns>
        public async System.Threading.Tasks.Task<Picture> GetVodBackgroundAsync (decimal backgroundId, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<Picture> localVarResponse = await GetVodBackgroundAsyncWithHttpInfo(backgroundId, ondemandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific background on an On Demand page This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backgroundId">The ID of the background image.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (Picture)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Picture>> GetVodBackgroundAsyncWithHttpInfo (decimal backgroundId, decimal ondemandId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("background_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(backgroundId)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Picture>("/ondemand/pages/{ondemand_id}/backgrounds/{background_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodBackground", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the backgrounds on an On Demand page This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Picture&gt;</returns>
        public List<Picture> GetVodBackgrounds (decimal ondemandId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = GetVodBackgroundsWithHttpInfo(ondemandId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the backgrounds on an On Demand page This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Picture&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Picture> > GetVodBackgroundsWithHttpInfo (decimal ondemandId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Picture> >("/ondemand/pages/{ondemand_id}/backgrounds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodBackgrounds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the backgrounds on an On Demand page This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Picture&gt;</returns>
        public async System.Threading.Tasks.Task<List<Picture>> GetVodBackgroundsAsync (decimal ondemandId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Picture>> localVarResponse = await GetVodBackgroundsAsyncWithHttpInfo(ondemandId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the backgrounds on an On Demand page This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Picture&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Picture>>> GetVodBackgroundsAsyncWithHttpInfo (decimal ondemandId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.picture+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Picture>>("/ondemand/pages/{ondemand_id}/backgrounds", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodBackgrounds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
