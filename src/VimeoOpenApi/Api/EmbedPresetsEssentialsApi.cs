/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbedPresetsEssentialsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Edit an embed preset
        /// </summary>
        /// <remarks>
        /// This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject47"> (optional)</param>
        /// <returns>Presets</returns>
        Presets EditEmbedPreset (decimal presetId, decimal userId, InlineObject47 inlineObject47 = default(InlineObject47));

        /// <summary>
        /// Edit an embed preset
        /// </summary>
        /// <remarks>
        /// This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject47"> (optional)</param>
        /// <returns>ApiResponse of Presets</returns>
        ApiResponse<Presets> EditEmbedPresetWithHttpInfo (decimal presetId, decimal userId, InlineObject47 inlineObject47 = default(InlineObject47));
        /// <summary>
        /// Edit an embed preset
        /// </summary>
        /// <remarks>
        /// This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="inlineObject23"> (optional)</param>
        /// <returns>Presets</returns>
        Presets EditEmbedPresetAlt1 (decimal presetId, InlineObject23 inlineObject23 = default(InlineObject23));

        /// <summary>
        /// Edit an embed preset
        /// </summary>
        /// <remarks>
        /// This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="inlineObject23"> (optional)</param>
        /// <returns>ApiResponse of Presets</returns>
        ApiResponse<Presets> EditEmbedPresetAlt1WithHttpInfo (decimal presetId, InlineObject23 inlineObject23 = default(InlineObject23));
        /// <summary>
        /// Get a specific embed preset
        /// </summary>
        /// <remarks>
        /// This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Presets</returns>
        Presets GetEmbedPreset (decimal presetId, decimal userId);

        /// <summary>
        /// Get a specific embed preset
        /// </summary>
        /// <remarks>
        /// This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Presets</returns>
        ApiResponse<Presets> GetEmbedPresetWithHttpInfo (decimal presetId, decimal userId);
        /// <summary>
        /// Get a specific embed preset
        /// </summary>
        /// <remarks>
        /// This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <returns>Presets</returns>
        Presets GetEmbedPresetAlt1 (decimal presetId);

        /// <summary>
        /// Get a specific embed preset
        /// </summary>
        /// <remarks>
        /// This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <returns>ApiResponse of Presets</returns>
        ApiResponse<Presets> GetEmbedPresetAlt1WithHttpInfo (decimal presetId);
        /// <summary>
        /// Get all the embed presets that a user has created
        /// </summary>
        /// <remarks>
        /// This method returns every embed preset that belongs to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Presets&gt;</returns>
        List<Presets> GetEmbedPresets (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the embed presets that a user has created
        /// </summary>
        /// <remarks>
        /// This method returns every embed preset that belongs to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Presets&gt;</returns>
        ApiResponse<List<Presets>> GetEmbedPresetsWithHttpInfo (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Get all the embed presets that a user has created
        /// </summary>
        /// <remarks>
        /// This method returns every embed preset that belongs to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Presets&gt;</returns>
        List<Presets> GetEmbedPresetsAlt1 (decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the embed presets that a user has created
        /// </summary>
        /// <remarks>
        /// This method returns every embed preset that belongs to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Presets&gt;</returns>
        ApiResponse<List<Presets>> GetEmbedPresetsAlt1WithHttpInfo (decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbedPresetsEssentialsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Edit an embed preset
        /// </summary>
        /// <remarks>
        /// This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject47"> (optional)</param>
        /// <returns>Task of Presets</returns>
        System.Threading.Tasks.Task<Presets> EditEmbedPresetAsync (decimal presetId, decimal userId, InlineObject47 inlineObject47 = default(InlineObject47));

        /// <summary>
        /// Edit an embed preset
        /// </summary>
        /// <remarks>
        /// This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject47"> (optional)</param>
        /// <returns>Task of ApiResponse (Presets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Presets>> EditEmbedPresetAsyncWithHttpInfo (decimal presetId, decimal userId, InlineObject47 inlineObject47 = default(InlineObject47));
        /// <summary>
        /// Edit an embed preset
        /// </summary>
        /// <remarks>
        /// This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="inlineObject23"> (optional)</param>
        /// <returns>Task of Presets</returns>
        System.Threading.Tasks.Task<Presets> EditEmbedPresetAlt1Async (decimal presetId, InlineObject23 inlineObject23 = default(InlineObject23));

        /// <summary>
        /// Edit an embed preset
        /// </summary>
        /// <remarks>
        /// This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="inlineObject23"> (optional)</param>
        /// <returns>Task of ApiResponse (Presets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Presets>> EditEmbedPresetAlt1AsyncWithHttpInfo (decimal presetId, InlineObject23 inlineObject23 = default(InlineObject23));
        /// <summary>
        /// Get a specific embed preset
        /// </summary>
        /// <remarks>
        /// This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Presets</returns>
        System.Threading.Tasks.Task<Presets> GetEmbedPresetAsync (decimal presetId, decimal userId);

        /// <summary>
        /// Get a specific embed preset
        /// </summary>
        /// <remarks>
        /// This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Presets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Presets>> GetEmbedPresetAsyncWithHttpInfo (decimal presetId, decimal userId);
        /// <summary>
        /// Get a specific embed preset
        /// </summary>
        /// <remarks>
        /// This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <returns>Task of Presets</returns>
        System.Threading.Tasks.Task<Presets> GetEmbedPresetAlt1Async (decimal presetId);

        /// <summary>
        /// Get a specific embed preset
        /// </summary>
        /// <remarks>
        /// This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <returns>Task of ApiResponse (Presets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Presets>> GetEmbedPresetAlt1AsyncWithHttpInfo (decimal presetId);
        /// <summary>
        /// Get all the embed presets that a user has created
        /// </summary>
        /// <remarks>
        /// This method returns every embed preset that belongs to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Presets&gt;</returns>
        System.Threading.Tasks.Task<List<Presets>> GetEmbedPresetsAsync (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the embed presets that a user has created
        /// </summary>
        /// <remarks>
        /// This method returns every embed preset that belongs to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Presets&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Presets>>> GetEmbedPresetsAsyncWithHttpInfo (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        /// <summary>
        /// Get all the embed presets that a user has created
        /// </summary>
        /// <remarks>
        /// This method returns every embed preset that belongs to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Presets&gt;</returns>
        System.Threading.Tasks.Task<List<Presets>> GetEmbedPresetsAlt1Async (decimal? page = default(decimal?), decimal? perPage = default(decimal?));

        /// <summary>
        /// Get all the embed presets that a user has created
        /// </summary>
        /// <remarks>
        /// This method returns every embed preset that belongs to the authenticated user.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Presets&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Presets>>> GetEmbedPresetsAlt1AsyncWithHttpInfo (decimal? page = default(decimal?), decimal? perPage = default(decimal?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbedPresetsEssentialsApi : IEmbedPresetsEssentialsApiSync, IEmbedPresetsEssentialsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmbedPresetsEssentialsApi : IEmbedPresetsEssentialsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedPresetsEssentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmbedPresetsEssentialsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedPresetsEssentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmbedPresetsEssentialsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedPresetsEssentialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmbedPresetsEssentialsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbedPresetsEssentialsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmbedPresetsEssentialsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Edit an embed preset This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject47"> (optional)</param>
        /// <returns>Presets</returns>
        public Presets EditEmbedPreset (decimal presetId, decimal userId, InlineObject47 inlineObject47 = default(InlineObject47))
        {
             VimeoOpenApi.Client.ApiResponse<Presets> localVarResponse = EditEmbedPresetWithHttpInfo(presetId, userId, inlineObject47);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an embed preset This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject47"> (optional)</param>
        /// <returns>ApiResponse of Presets</returns>
        public VimeoOpenApi.Client.ApiResponse< Presets > EditEmbedPresetWithHttpInfo (decimal presetId, decimal userId, InlineObject47 inlineObject47 = default(InlineObject47))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.preset+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("preset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(presetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject47;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Presets >("/users/{user_id}/presets/{preset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditEmbedPreset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an embed preset This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject47"> (optional)</param>
        /// <returns>Task of Presets</returns>
        public async System.Threading.Tasks.Task<Presets> EditEmbedPresetAsync (decimal presetId, decimal userId, InlineObject47 inlineObject47 = default(InlineObject47))
        {
             VimeoOpenApi.Client.ApiResponse<Presets> localVarResponse = await EditEmbedPresetAsyncWithHttpInfo(presetId, userId, inlineObject47);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an embed preset This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="inlineObject47"> (optional)</param>
        /// <returns>Task of ApiResponse (Presets)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Presets>> EditEmbedPresetAsyncWithHttpInfo (decimal presetId, decimal userId, InlineObject47 inlineObject47 = default(InlineObject47))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.preset+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("preset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(presetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = inlineObject47;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Presets>("/users/{user_id}/presets/{preset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditEmbedPreset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an embed preset This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="inlineObject23"> (optional)</param>
        /// <returns>Presets</returns>
        public Presets EditEmbedPresetAlt1 (decimal presetId, InlineObject23 inlineObject23 = default(InlineObject23))
        {
             VimeoOpenApi.Client.ApiResponse<Presets> localVarResponse = EditEmbedPresetAlt1WithHttpInfo(presetId, inlineObject23);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an embed preset This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="inlineObject23"> (optional)</param>
        /// <returns>ApiResponse of Presets</returns>
        public VimeoOpenApi.Client.ApiResponse< Presets > EditEmbedPresetAlt1WithHttpInfo (decimal presetId, InlineObject23 inlineObject23 = default(InlineObject23))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.preset+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("preset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(presetId)); // path parameter
            localVarRequestOptions.Data = inlineObject23;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Presets >("/me/presets/{preset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditEmbedPresetAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an embed preset This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="inlineObject23"> (optional)</param>
        /// <returns>Task of Presets</returns>
        public async System.Threading.Tasks.Task<Presets> EditEmbedPresetAlt1Async (decimal presetId, InlineObject23 inlineObject23 = default(InlineObject23))
        {
             VimeoOpenApi.Client.ApiResponse<Presets> localVarResponse = await EditEmbedPresetAlt1AsyncWithHttpInfo(presetId, inlineObject23);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an embed preset This method edits the specified embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="inlineObject23"> (optional)</param>
        /// <returns>Task of ApiResponse (Presets)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Presets>> EditEmbedPresetAlt1AsyncWithHttpInfo (decimal presetId, InlineObject23 inlineObject23 = default(InlineObject23))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.preset+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("preset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(presetId)); // path parameter
            localVarRequestOptions.Data = inlineObject23;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Presets>("/me/presets/{preset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditEmbedPresetAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific embed preset This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Presets</returns>
        public Presets GetEmbedPreset (decimal presetId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Presets> localVarResponse = GetEmbedPresetWithHttpInfo(presetId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific embed preset This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>ApiResponse of Presets</returns>
        public VimeoOpenApi.Client.ApiResponse< Presets > GetEmbedPresetWithHttpInfo (decimal presetId, decimal userId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("preset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(presetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Presets >("/users/{user_id}/presets/{preset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmbedPreset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific embed preset This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of Presets</returns>
        public async System.Threading.Tasks.Task<Presets> GetEmbedPresetAsync (decimal presetId, decimal userId)
        {
             VimeoOpenApi.Client.ApiResponse<Presets> localVarResponse = await GetEmbedPresetAsyncWithHttpInfo(presetId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific embed preset This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <param name="userId">The ID of the user.</param>
        /// <returns>Task of ApiResponse (Presets)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Presets>> GetEmbedPresetAsyncWithHttpInfo (decimal presetId, decimal userId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("preset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(presetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Presets>("/users/{user_id}/presets/{preset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmbedPreset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific embed preset This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <returns>Presets</returns>
        public Presets GetEmbedPresetAlt1 (decimal presetId)
        {
             VimeoOpenApi.Client.ApiResponse<Presets> localVarResponse = GetEmbedPresetAlt1WithHttpInfo(presetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific embed preset This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <returns>ApiResponse of Presets</returns>
        public VimeoOpenApi.Client.ApiResponse< Presets > GetEmbedPresetAlt1WithHttpInfo (decimal presetId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("preset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(presetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Presets >("/me/presets/{preset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmbedPresetAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific embed preset This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <returns>Task of Presets</returns>
        public async System.Threading.Tasks.Task<Presets> GetEmbedPresetAlt1Async (decimal presetId)
        {
             VimeoOpenApi.Client.ApiResponse<Presets> localVarResponse = await GetEmbedPresetAlt1AsyncWithHttpInfo(presetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific embed preset This method returns a single embed preset. The authenticated user must be the owner of the preset.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presetId">The ID of the preset.</param>
        /// <returns>Task of ApiResponse (Presets)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Presets>> GetEmbedPresetAlt1AsyncWithHttpInfo (decimal presetId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("preset_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(presetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Presets>("/me/presets/{preset_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmbedPresetAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the embed presets that a user has created This method returns every embed preset that belongs to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Presets&gt;</returns>
        public List<Presets> GetEmbedPresets (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Presets>> localVarResponse = GetEmbedPresetsWithHttpInfo(userId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the embed presets that a user has created This method returns every embed preset that belongs to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Presets&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Presets> > GetEmbedPresetsWithHttpInfo (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Presets> >("/users/{user_id}/presets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmbedPresets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the embed presets that a user has created This method returns every embed preset that belongs to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Presets&gt;</returns>
        public async System.Threading.Tasks.Task<List<Presets>> GetEmbedPresetsAsync (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Presets>> localVarResponse = await GetEmbedPresetsAsyncWithHttpInfo(userId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the embed presets that a user has created This method returns every embed preset that belongs to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Presets&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Presets>>> GetEmbedPresetsAsyncWithHttpInfo (decimal userId, decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Presets>>("/users/{user_id}/presets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmbedPresets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the embed presets that a user has created This method returns every embed preset that belongs to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>List&lt;Presets&gt;</returns>
        public List<Presets> GetEmbedPresetsAlt1 (decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Presets>> localVarResponse = GetEmbedPresetsAlt1WithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the embed presets that a user has created This method returns every embed preset that belongs to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>ApiResponse of List&lt;Presets&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Presets> > GetEmbedPresetsAlt1WithHttpInfo (decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Presets> >("/me/presets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmbedPresetsAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the embed presets that a user has created This method returns every embed preset that belongs to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of List&lt;Presets&gt;</returns>
        public async System.Threading.Tasks.Task<List<Presets>> GetEmbedPresetsAlt1Async (decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {
             VimeoOpenApi.Client.ApiResponse<List<Presets>> localVarResponse = await GetEmbedPresetsAlt1AsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the embed presets that a user has created This method returns every embed preset that belongs to the authenticated user.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Presets&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Presets>>> GetEmbedPresetsAlt1AsyncWithHttpInfo (decimal? page = default(decimal?), decimal? perPage = default(decimal?))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.preset+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Presets>>("/me/presets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmbedPresetsAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
