/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosTagsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a specific tag to a video
        /// </summary>
        /// <remarks>
        /// This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Tag</returns>
        Tag AddVideoTag (decimal videoId, string word);

        /// <summary>
        /// Add a specific tag to a video
        /// </summary>
        /// <remarks>
        /// This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> AddVideoTagWithHttpInfo (decimal videoId, string word);
        /// <summary>
        /// Add a list of tags to a video
        /// </summary>
        /// <remarks>
        /// This method adds multiple tags to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject61"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> AddVideoTags (decimal videoId, InlineObject61 inlineObject61);

        /// <summary>
        /// Add a list of tags to a video
        /// </summary>
        /// <remarks>
        /// This method adds multiple tags to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject61"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> AddVideoTagsWithHttpInfo (decimal videoId, InlineObject61 inlineObject61);
        /// <summary>
        /// Check if a tag has been added to a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Tag</returns>
        Tag CheckVideoForTag (decimal videoId, string word);

        /// <summary>
        /// Check if a tag has been added to a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> CheckVideoForTagWithHttpInfo (decimal videoId, string word);
        /// <summary>
        /// Remove a tag from a video
        /// </summary>
        /// <remarks>
        /// This method removes the specified tag from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns></returns>
        void DeleteVideoTag (decimal videoId, string word);

        /// <summary>
        /// Remove a tag from a video
        /// </summary>
        /// <remarks>
        /// This method removes the specified tag from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVideoTagWithHttpInfo (decimal videoId, string word);
        /// <summary>
        /// Get all the tags of a video
        /// </summary>
        /// <remarks>
        /// This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> GetVideoTags (decimal videoId);

        /// <summary>
        /// Get all the tags of a video
        /// </summary>
        /// <remarks>
        /// This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> GetVideoTagsWithHttpInfo (decimal videoId);
        /// <summary>
        /// Get all the videos with a specific tag
        /// </summary>
        /// <remarks>
        /// This method returns all the videos associated with the specified tag.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The tag word.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;created_time&#x60; - Sort the results by creation time.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;name&#x60; - Sort the results by name.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetVideosWithTag (string word, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the videos with a specific tag
        /// </summary>
        /// <remarks>
        /// This method returns all the videos associated with the specified tag.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The tag word.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;created_time&#x60; - Sort the results by creation time.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;name&#x60; - Sort the results by name.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetVideosWithTagWithHttpInfo (string word, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosTagsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a specific tag to a video
        /// </summary>
        /// <remarks>
        /// This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> AddVideoTagAsync (decimal videoId, string word);

        /// <summary>
        /// Add a specific tag to a video
        /// </summary>
        /// <remarks>
        /// This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> AddVideoTagAsyncWithHttpInfo (decimal videoId, string word);
        /// <summary>
        /// Add a list of tags to a video
        /// </summary>
        /// <remarks>
        /// This method adds multiple tags to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject61"></param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> AddVideoTagsAsync (decimal videoId, InlineObject61 inlineObject61);

        /// <summary>
        /// Add a list of tags to a video
        /// </summary>
        /// <remarks>
        /// This method adds multiple tags to the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject61"></param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> AddVideoTagsAsyncWithHttpInfo (decimal videoId, InlineObject61 inlineObject61);
        /// <summary>
        /// Check if a tag has been added to a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> CheckVideoForTagAsync (decimal videoId, string word);

        /// <summary>
        /// Check if a tag has been added to a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> CheckVideoForTagAsyncWithHttpInfo (decimal videoId, string word);
        /// <summary>
        /// Remove a tag from a video
        /// </summary>
        /// <remarks>
        /// This method removes the specified tag from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVideoTagAsync (decimal videoId, string word);

        /// <summary>
        /// Remove a tag from a video
        /// </summary>
        /// <remarks>
        /// This method removes the specified tag from a video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVideoTagAsyncWithHttpInfo (decimal videoId, string word);
        /// <summary>
        /// Get all the tags of a video
        /// </summary>
        /// <remarks>
        /// This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> GetVideoTagsAsync (decimal videoId);

        /// <summary>
        /// Get all the tags of a video
        /// </summary>
        /// <remarks>
        /// This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> GetVideoTagsAsyncWithHttpInfo (decimal videoId);
        /// <summary>
        /// Get all the videos with a specific tag
        /// </summary>
        /// <remarks>
        /// This method returns all the videos associated with the specified tag.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The tag word.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;created_time&#x60; - Sort the results by creation time.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;name&#x60; - Sort the results by name.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetVideosWithTagAsync (string word, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));

        /// <summary>
        /// Get all the videos with a specific tag
        /// </summary>
        /// <remarks>
        /// This method returns all the videos associated with the specified tag.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The tag word.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;created_time&#x60; - Sort the results by creation time.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;name&#x60; - Sort the results by name.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetVideosWithTagAsyncWithHttpInfo (string word, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosTagsApi : IVideosTagsApiSync, IVideosTagsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VideosTagsApi : IVideosTagsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosTagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosTagsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosTagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosTagsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosTagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VideosTagsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosTagsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VideosTagsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a specific tag to a video This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Tag</returns>
        public Tag AddVideoTag (decimal videoId, string word)
        {
             VimeoOpenApi.Client.ApiResponse<Tag> localVarResponse = AddVideoTagWithHttpInfo(videoId, word);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a specific tag to a video This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>ApiResponse of Tag</returns>
        public VimeoOpenApi.Client.ApiResponse< Tag > AddVideoTagWithHttpInfo (decimal videoId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling VideosTagsApi->AddVideoTag");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Tag >("/videos/{video_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a specific tag to a video This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> AddVideoTagAsync (decimal videoId, string word)
        {
             VimeoOpenApi.Client.ApiResponse<Tag> localVarResponse = await AddVideoTagAsyncWithHttpInfo(videoId, word);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a specific tag to a video This method adds a single tag to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Tag>> AddVideoTagAsyncWithHttpInfo (decimal videoId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling VideosTagsApi->AddVideoTag");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Tag>("/videos/{video_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of tags to a video This method adds multiple tags to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject61"></param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> AddVideoTags (decimal videoId, InlineObject61 inlineObject61)
        {
             VimeoOpenApi.Client.ApiResponse<List<Tag>> localVarResponse = AddVideoTagsWithHttpInfo(videoId, inlineObject61);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a list of tags to a video This method adds multiple tags to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject61"></param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Tag> > AddVideoTagsWithHttpInfo (decimal videoId, InlineObject61 inlineObject61)
        {
            // verify the required parameter 'inlineObject61' is set
            if (inlineObject61 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject61' when calling VideosTagsApi->AddVideoTags");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject61;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< List<Tag> >("/videos/{video_id}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of tags to a video This method adds multiple tags to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject61"></param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> AddVideoTagsAsync (decimal videoId, InlineObject61 inlineObject61)
        {
             VimeoOpenApi.Client.ApiResponse<List<Tag>> localVarResponse = await AddVideoTagsAsyncWithHttpInfo(videoId, inlineObject61);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a list of tags to a video This method adds multiple tags to the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject61"></param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Tag>>> AddVideoTagsAsyncWithHttpInfo (decimal videoId, InlineObject61 inlineObject61)
        {
            // verify the required parameter 'inlineObject61' is set
            if (inlineObject61 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject61' when calling VideosTagsApi->AddVideoTags");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject61;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<List<Tag>>("/videos/{video_id}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideoTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if a tag has been added to a video This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Tag</returns>
        public Tag CheckVideoForTag (decimal videoId, string word)
        {
             VimeoOpenApi.Client.ApiResponse<Tag> localVarResponse = CheckVideoForTagWithHttpInfo(videoId, word);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if a tag has been added to a video This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>ApiResponse of Tag</returns>
        public VimeoOpenApi.Client.ApiResponse< Tag > CheckVideoForTagWithHttpInfo (decimal videoId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling VideosTagsApi->CheckVideoForTag");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Tag >("/videos/{video_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckVideoForTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if a tag has been added to a video This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> CheckVideoForTagAsync (decimal videoId, string word)
        {
             VimeoOpenApi.Client.ApiResponse<Tag> localVarResponse = await CheckVideoForTagAsyncWithHttpInfo(videoId, word);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if a tag has been added to a video This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Tag>> CheckVideoForTagAsyncWithHttpInfo (decimal videoId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling VideosTagsApi->CheckVideoForTag");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Tag>("/videos/{video_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckVideoForTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a tag from a video This method removes the specified tag from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns></returns>
        public void DeleteVideoTag (decimal videoId, string word)
        {
             DeleteVideoTagWithHttpInfo(videoId, word);
        }

        /// <summary>
        /// Remove a tag from a video This method removes the specified tag from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteVideoTagWithHttpInfo (decimal videoId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling VideosTagsApi->DeleteVideoTag");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/videos/{video_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVideoTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a tag from a video This method removes the specified tag from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVideoTagAsync (decimal videoId, string word)
        {
             await DeleteVideoTagAsyncWithHttpInfo(videoId, word);

        }

        /// <summary>
        /// Remove a tag from a video This method removes the specified tag from a video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="word">The tag word.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteVideoTagAsyncWithHttpInfo (decimal videoId, string word)
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling VideosTagsApi->DeleteVideoTag");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/videos/{video_id}/tags/{word}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVideoTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the tags of a video This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> GetVideoTags (decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<List<Tag>> localVarResponse = GetVideoTagsWithHttpInfo(videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the tags of a video This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Tag> > GetVideoTagsWithHttpInfo (decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Tag> >("/videos/{video_id}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the tags of a video This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> GetVideoTagsAsync (decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<List<Tag>> localVarResponse = await GetVideoTagsAsyncWithHttpInfo(videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the tags of a video This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Tag>>> GetVideoTagsAsyncWithHttpInfo (decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.tag+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Tag>>("/videos/{video_id}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos with a specific tag This method returns all the videos associated with the specified tag.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The tag word.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;created_time&#x60; - Sort the results by creation time.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;name&#x60; - Sort the results by name.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetVideosWithTag (string word, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetVideosWithTagWithHttpInfo(word, direction, page, perPage, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the videos with a specific tag This method returns all the videos associated with the specified tag.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The tag word.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;created_time&#x60; - Sort the results by creation time.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;name&#x60; - Sort the results by name.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetVideosWithTagWithHttpInfo (string word, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling VideosTagsApi->GetVideosWithTag");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/tags/{word}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideosWithTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos with a specific tag This method returns all the videos associated with the specified tag.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The tag word.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;created_time&#x60; - Sort the results by creation time.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;name&#x60; - Sort the results by name.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetVideosWithTagAsync (string word, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetVideosWithTagAsyncWithHttpInfo(word, direction, page, perPage, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the videos with a specific tag This method returns all the videos associated with the specified tag.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The tag word.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;created_time&#x60; - Sort the results by creation time.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;name&#x60; - Sort the results by name.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetVideosWithTagAsyncWithHttpInfo (string word, string direction = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string))
        {
            // verify the required parameter 'word' is set
            if (word == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'word' when calling VideosTagsApi->GetVideosWithTag");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("word", VimeoOpenApi.Client.ClientUtils.ParameterToString(word)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/tags/{word}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideosWithTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
