/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosEssentialsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check if the user owns a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is the owner of the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Video</returns>
        Video CheckIfUserOwnsVideo (decimal userId, decimal videoId);

        /// <summary>
        /// Check if the user owns a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is the owner of the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> CheckIfUserOwnsVideoWithHttpInfo (decimal userId, decimal videoId);
        /// <summary>
        /// Check if the user owns a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is the owner of the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Video</returns>
        Video CheckIfUserOwnsVideoAlt1 (decimal videoId);

        /// <summary>
        /// Check if the user owns a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is the owner of the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> CheckIfUserOwnsVideoAlt1WithHttpInfo (decimal videoId);
        /// <summary>
        /// Delete a video
        /// </summary>
        /// <remarks>
        /// This method deletes the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        void DeleteVideo (decimal videoId);

        /// <summary>
        /// Delete a video
        /// </summary>
        /// <remarks>
        /// This method deletes the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVideoWithHttpInfo (decimal videoId);
        /// <summary>
        /// Edit a video
        /// </summary>
        /// <remarks>
        /// This method edits the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject51"></param>
        /// <returns>Video</returns>
        Video EditVideo (decimal videoId, InlineObject51 inlineObject51);

        /// <summary>
        /// Edit a video
        /// </summary>
        /// <remarks>
        /// This method edits the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject51"></param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> EditVideoWithHttpInfo (decimal videoId, InlineObject51 inlineObject51);
        /// <summary>
        /// Get all the videos in which the user appears
        /// </summary>
        /// <remarks>
        /// This method returns all the videos in which the authenticated user has a credited appearance.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetAppearances (decimal userId, string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos in which the user appears
        /// </summary>
        /// <remarks>
        /// This method returns all the videos in which the authenticated user has a credited appearance.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetAppearancesWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the videos in which the user appears
        /// </summary>
        /// <remarks>
        /// This method returns all the videos in which the authenticated user has a credited appearance.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetAppearancesAlt1 (string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos in which the user appears
        /// </summary>
        /// <remarks>
        /// This method returns all the videos in which the authenticated user has a credited appearance.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetAppearancesAlt1WithHttpInfo (string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get a specific video
        /// </summary>
        /// <remarks>
        /// This method returns a single video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Video</returns>
        Video GetVideo (decimal videoId);

        /// <summary>
        /// Get a specific video
        /// </summary>
        /// <remarks>
        /// This method returns a single video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> GetVideoWithHttpInfo (decimal videoId);
        /// <summary>
        /// Get all the videos that the user has uploaded
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that the authenticated user has uploaded.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetVideos (decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos that the user has uploaded
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that the authenticated user has uploaded.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetVideosWithHttpInfo (decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the videos that the user has uploaded
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that the authenticated user has uploaded.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> GetVideosAlt1 (string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos that the user has uploaded
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that the authenticated user has uploaded.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> GetVideosAlt1WithHttpInfo (string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Search for videos
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that match custom search criteria.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * &#x60;CC&#x60; - Return videos under any Creative Commons license.  * &#x60;CC-BY&#x60; - Return CC BY, or attribution-only, videos.  * &#x60;CC-BY-NC&#x60; - Return CC BY-NC, or Attribution-NonCommercial, videos.  * &#x60;CC-BY-NC-ND&#x60; - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * &#x60;CC-BY-NC-SA&#x60; - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * &#x60;CC-BY-ND&#x60; - Return CC BY-NDm or Attribution-NoDerivs, videos.  * &#x60;CC-BY-SA&#x60; - Return CC BY-SA, or Attribution-ShareAlike, videos.  * &#x60;CC0&#x60; - Return CC0, or public domain, videos.  * &#x60;categories&#x60; - Filter by categories.  * &#x60;duration&#x60; - Filter by duration.  * &#x60;in-progress&#x60; - Return in-progress videos.  * &#x60;minimum_likes&#x60; - Filter by minimum likes.  * &#x60;trending&#x60; - Return trending videos.  * &#x60;upload_date&#x60; - Filter by upload date.  (optional)</param>
        /// <param name="links">A comma-separated list of video URLs to find. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance.  (optional)</param>
        /// <param name="uris">A comma-separated list of video URIs to find. (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        List<Video> SearchVideos (string query, string direction = default(string), string filter = default(string), string links = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string), string uris = default(string));

        /// <summary>
        /// Search for videos
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that match custom search criteria.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * &#x60;CC&#x60; - Return videos under any Creative Commons license.  * &#x60;CC-BY&#x60; - Return CC BY, or attribution-only, videos.  * &#x60;CC-BY-NC&#x60; - Return CC BY-NC, or Attribution-NonCommercial, videos.  * &#x60;CC-BY-NC-ND&#x60; - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * &#x60;CC-BY-NC-SA&#x60; - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * &#x60;CC-BY-ND&#x60; - Return CC BY-NDm or Attribution-NoDerivs, videos.  * &#x60;CC-BY-SA&#x60; - Return CC BY-SA, or Attribution-ShareAlike, videos.  * &#x60;CC0&#x60; - Return CC0, or public domain, videos.  * &#x60;categories&#x60; - Filter by categories.  * &#x60;duration&#x60; - Filter by duration.  * &#x60;in-progress&#x60; - Return in-progress videos.  * &#x60;minimum_likes&#x60; - Filter by minimum likes.  * &#x60;trending&#x60; - Return trending videos.  * &#x60;upload_date&#x60; - Filter by upload date.  (optional)</param>
        /// <param name="links">A comma-separated list of video URLs to find. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance.  (optional)</param>
        /// <param name="uris">A comma-separated list of video URIs to find. (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        ApiResponse<List<Video>> SearchVideosWithHttpInfo (string query, string direction = default(string), string filter = default(string), string links = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string), string uris = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosEssentialsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check if the user owns a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is the owner of the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> CheckIfUserOwnsVideoAsync (decimal userId, decimal videoId);

        /// <summary>
        /// Check if the user owns a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is the owner of the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> CheckIfUserOwnsVideoAsyncWithHttpInfo (decimal userId, decimal videoId);
        /// <summary>
        /// Check if the user owns a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is the owner of the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> CheckIfUserOwnsVideoAlt1Async (decimal videoId);

        /// <summary>
        /// Check if the user owns a video
        /// </summary>
        /// <remarks>
        /// This method determines whether the authenticated user is the owner of the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> CheckIfUserOwnsVideoAlt1AsyncWithHttpInfo (decimal videoId);
        /// <summary>
        /// Delete a video
        /// </summary>
        /// <remarks>
        /// This method deletes the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVideoAsync (decimal videoId);

        /// <summary>
        /// Delete a video
        /// </summary>
        /// <remarks>
        /// This method deletes the specified video. The authenticated user must be the owner of the video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVideoAsyncWithHttpInfo (decimal videoId);
        /// <summary>
        /// Edit a video
        /// </summary>
        /// <remarks>
        /// This method edits the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject51"></param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> EditVideoAsync (decimal videoId, InlineObject51 inlineObject51);

        /// <summary>
        /// Edit a video
        /// </summary>
        /// <remarks>
        /// This method edits the specified video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject51"></param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> EditVideoAsyncWithHttpInfo (decimal videoId, InlineObject51 inlineObject51);
        /// <summary>
        /// Get all the videos in which the user appears
        /// </summary>
        /// <remarks>
        /// This method returns all the videos in which the authenticated user has a credited appearance.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetAppearancesAsync (decimal userId, string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos in which the user appears
        /// </summary>
        /// <remarks>
        /// This method returns all the videos in which the authenticated user has a credited appearance.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetAppearancesAsyncWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the videos in which the user appears
        /// </summary>
        /// <remarks>
        /// This method returns all the videos in which the authenticated user has a credited appearance.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetAppearancesAlt1Async (string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos in which the user appears
        /// </summary>
        /// <remarks>
        /// This method returns all the videos in which the authenticated user has a credited appearance.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetAppearancesAlt1AsyncWithHttpInfo (string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get a specific video
        /// </summary>
        /// <remarks>
        /// This method returns a single video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> GetVideoAsync (decimal videoId);

        /// <summary>
        /// Get a specific video
        /// </summary>
        /// <remarks>
        /// This method returns a single video.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> GetVideoAsyncWithHttpInfo (decimal videoId);
        /// <summary>
        /// Get all the videos that the user has uploaded
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that the authenticated user has uploaded.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetVideosAsync (decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos that the user has uploaded
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that the authenticated user has uploaded.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetVideosAsyncWithHttpInfo (decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Get all the videos that the user has uploaded
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that the authenticated user has uploaded.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> GetVideosAlt1Async (string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));

        /// <summary>
        /// Get all the videos that the user has uploaded
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that the authenticated user has uploaded.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> GetVideosAlt1AsyncWithHttpInfo (string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string));
        /// <summary>
        /// Search for videos
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that match custom search criteria.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * &#x60;CC&#x60; - Return videos under any Creative Commons license.  * &#x60;CC-BY&#x60; - Return CC BY, or attribution-only, videos.  * &#x60;CC-BY-NC&#x60; - Return CC BY-NC, or Attribution-NonCommercial, videos.  * &#x60;CC-BY-NC-ND&#x60; - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * &#x60;CC-BY-NC-SA&#x60; - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * &#x60;CC-BY-ND&#x60; - Return CC BY-NDm or Attribution-NoDerivs, videos.  * &#x60;CC-BY-SA&#x60; - Return CC BY-SA, or Attribution-ShareAlike, videos.  * &#x60;CC0&#x60; - Return CC0, or public domain, videos.  * &#x60;categories&#x60; - Filter by categories.  * &#x60;duration&#x60; - Filter by duration.  * &#x60;in-progress&#x60; - Return in-progress videos.  * &#x60;minimum_likes&#x60; - Filter by minimum likes.  * &#x60;trending&#x60; - Return trending videos.  * &#x60;upload_date&#x60; - Filter by upload date.  (optional)</param>
        /// <param name="links">A comma-separated list of video URLs to find. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance.  (optional)</param>
        /// <param name="uris">A comma-separated list of video URIs to find. (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        System.Threading.Tasks.Task<List<Video>> SearchVideosAsync (string query, string direction = default(string), string filter = default(string), string links = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string), string uris = default(string));

        /// <summary>
        /// Search for videos
        /// </summary>
        /// <remarks>
        /// This method returns all the videos that match custom search criteria.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * &#x60;CC&#x60; - Return videos under any Creative Commons license.  * &#x60;CC-BY&#x60; - Return CC BY, or attribution-only, videos.  * &#x60;CC-BY-NC&#x60; - Return CC BY-NC, or Attribution-NonCommercial, videos.  * &#x60;CC-BY-NC-ND&#x60; - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * &#x60;CC-BY-NC-SA&#x60; - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * &#x60;CC-BY-ND&#x60; - Return CC BY-NDm or Attribution-NoDerivs, videos.  * &#x60;CC-BY-SA&#x60; - Return CC BY-SA, or Attribution-ShareAlike, videos.  * &#x60;CC0&#x60; - Return CC0, or public domain, videos.  * &#x60;categories&#x60; - Filter by categories.  * &#x60;duration&#x60; - Filter by duration.  * &#x60;in-progress&#x60; - Return in-progress videos.  * &#x60;minimum_likes&#x60; - Filter by minimum likes.  * &#x60;trending&#x60; - Return trending videos.  * &#x60;upload_date&#x60; - Filter by upload date.  (optional)</param>
        /// <param name="links">A comma-separated list of video URLs to find. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance.  (optional)</param>
        /// <param name="uris">A comma-separated list of video URIs to find. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Video>>> SearchVideosAsyncWithHttpInfo (string query, string direction = default(string), string filter = default(string), string links = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string), string uris = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosEssentialsApi : IVideosEssentialsApiSync, IVideosEssentialsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VideosEssentialsApi : IVideosEssentialsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosEssentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosEssentialsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosEssentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosEssentialsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosEssentialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VideosEssentialsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosEssentialsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VideosEssentialsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check if the user owns a video This method determines whether the authenticated user is the owner of the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Video</returns>
        public Video CheckIfUserOwnsVideo (decimal userId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = CheckIfUserOwnsVideoWithHttpInfo(userId, videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if the user owns a video This method determines whether the authenticated user is the owner of the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Video</returns>
        public VimeoOpenApi.Client.ApiResponse< Video > CheckIfUserOwnsVideoWithHttpInfo (decimal userId, decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Video >("/users/{user_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserOwnsVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the user owns a video This method determines whether the authenticated user is the owner of the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> CheckIfUserOwnsVideoAsync (decimal userId, decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = await CheckIfUserOwnsVideoAsyncWithHttpInfo(userId, videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if the user owns a video This method determines whether the authenticated user is the owner of the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Video>> CheckIfUserOwnsVideoAsyncWithHttpInfo (decimal userId, decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Video>("/users/{user_id}/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserOwnsVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the user owns a video This method determines whether the authenticated user is the owner of the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Video</returns>
        public Video CheckIfUserOwnsVideoAlt1 (decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = CheckIfUserOwnsVideoAlt1WithHttpInfo(videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if the user owns a video This method determines whether the authenticated user is the owner of the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Video</returns>
        public VimeoOpenApi.Client.ApiResponse< Video > CheckIfUserOwnsVideoAlt1WithHttpInfo (decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Video >("/me/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserOwnsVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the user owns a video This method determines whether the authenticated user is the owner of the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> CheckIfUserOwnsVideoAlt1Async (decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = await CheckIfUserOwnsVideoAlt1AsyncWithHttpInfo(videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if the user owns a video This method determines whether the authenticated user is the owner of the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Video>> CheckIfUserOwnsVideoAlt1AsyncWithHttpInfo (decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Video>("/me/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfUserOwnsVideoAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a video This method deletes the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns></returns>
        public void DeleteVideo (decimal videoId)
        {
             DeleteVideoWithHttpInfo(videoId);
        }

        /// <summary>
        /// Delete a video This method deletes the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteVideoWithHttpInfo (decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a video This method deletes the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVideoAsync (decimal videoId)
        {
             await DeleteVideoAsyncWithHttpInfo(videoId);

        }

        /// <summary>
        /// Delete a video This method deletes the specified video. The authenticated user must be the owner of the video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteVideoAsyncWithHttpInfo (decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a video This method edits the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject51"></param>
        /// <returns>Video</returns>
        public Video EditVideo (decimal videoId, InlineObject51 inlineObject51)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = EditVideoWithHttpInfo(videoId, inlineObject51);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a video This method edits the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject51"></param>
        /// <returns>ApiResponse of Video</returns>
        public VimeoOpenApi.Client.ApiResponse< Video > EditVideoWithHttpInfo (decimal videoId, InlineObject51 inlineObject51)
        {
            // verify the required parameter 'inlineObject51' is set
            if (inlineObject51 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject51' when calling VideosEssentialsApi->EditVideo");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject51;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Video >("/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a video This method edits the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject51"></param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> EditVideoAsync (decimal videoId, InlineObject51 inlineObject51)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = await EditVideoAsyncWithHttpInfo(videoId, inlineObject51);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a video This method edits the specified video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <param name="inlineObject51"></param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Video>> EditVideoAsyncWithHttpInfo (decimal videoId, InlineObject51 inlineObject51)
        {
            // verify the required parameter 'inlineObject51' is set
            if (inlineObject51 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject51' when calling VideosEssentialsApi->EditVideo");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = inlineObject51;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Video>("/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in which the user appears This method returns all the videos in which the authenticated user has a credited appearance.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetAppearances (decimal userId, string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetAppearancesWithHttpInfo(userId, direction, filter, filterEmbeddable, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the videos in which the user appears This method returns all the videos in which the authenticated user has a credited appearance.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetAppearancesWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/users/{user_id}/appearances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppearances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in which the user appears This method returns all the videos in which the authenticated user has a credited appearance.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetAppearancesAsync (decimal userId, string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetAppearancesAsyncWithHttpInfo(userId, direction, filter, filterEmbeddable, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the videos in which the user appears This method returns all the videos in which the authenticated user has a credited appearance.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetAppearancesAsyncWithHttpInfo (decimal userId, string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/users/{user_id}/appearances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppearances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in which the user appears This method returns all the videos in which the authenticated user has a credited appearance.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetAppearancesAlt1 (string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetAppearancesAlt1WithHttpInfo(direction, filter, filterEmbeddable, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the videos in which the user appears This method returns all the videos in which the authenticated user has a credited appearance.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetAppearancesAlt1WithHttpInfo (string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/me/appearances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppearancesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos in which the user appears This method returns all the videos in which the authenticated user has a credited appearance.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetAppearancesAlt1Async (string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetAppearancesAlt1AsyncWithHttpInfo(direction, filter, filterEmbeddable, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the videos in which the user appears This method returns all the videos in which the authenticated user has a credited appearance.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;embeddable&#x60; - Return embeddable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetAppearancesAlt1AsyncWithHttpInfo (string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/me/appearances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppearancesAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific video This method returns a single video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Video</returns>
        public Video GetVideo (decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = GetVideoWithHttpInfo(videoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific video This method returns a single video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>ApiResponse of Video</returns>
        public VimeoOpenApi.Client.ApiResponse< Video > GetVideoWithHttpInfo (decimal videoId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Video >("/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific video This method returns a single video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> GetVideoAsync (decimal videoId)
        {
             VimeoOpenApi.Client.ApiResponse<Video> localVarResponse = await GetVideoAsyncWithHttpInfo(videoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific video This method returns a single video.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The ID of the video.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Video>> GetVideoAsyncWithHttpInfo (decimal videoId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("video_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Video>("/videos/{video_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos that the user has uploaded This method returns all the videos that the authenticated user has uploaded.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetVideos (decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetVideosWithHttpInfo(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the videos that the user has uploaded This method returns all the videos that the authenticated user has uploaded.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetVideosWithHttpInfo (decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (containingUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "containing_uri", containingUri));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (filterPlayable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_playable", filterPlayable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/users/{user_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos that the user has uploaded This method returns all the videos that the authenticated user has uploaded.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetVideosAsync (decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetVideosAsyncWithHttpInfo(userId, containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the videos that the user has uploaded This method returns all the videos that the authenticated user has uploaded.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user.</param>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetVideosAsyncWithHttpInfo (decimal userId, string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("user_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (containingUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "containing_uri", containingUri));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (filterPlayable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_playable", filterPlayable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/users/{user_id}/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos that the user has uploaded This method returns all the videos that the authenticated user has uploaded.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> GetVideosAlt1 (string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = GetVideosAlt1WithHttpInfo(containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the videos that the user has uploaded This method returns all the videos that the authenticated user has uploaded.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > GetVideosAlt1WithHttpInfo (string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containingUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "containing_uri", containingUri));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (filterPlayable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_playable", filterPlayable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/me/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideosAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the videos that the user has uploaded This method returns all the videos that the authenticated user has uploaded.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> GetVideosAlt1Async (string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await GetVideosAlt1AsyncWithHttpInfo(containingUri, direction, filter, filterEmbeddable, filterPlayable, page, perPage, query, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the videos that the user has uploaded This method returns all the videos that the authenticated user has uploaded.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containingUri">The page that contains the video URI. The field is available only when not paired with **query**. (optional)</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results.  Option descriptions:  * &#x60;app_only&#x60; - Return app-only videos.  * &#x60;embeddable&#x60; - Return embeddable videos.  * &#x60;featured&#x60; - Return featured videos.  * &#x60;playable&#x60; - Return playable videos.  (optional)</param>
        /// <param name="filterEmbeddable">Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). This parameter is required only when **filter** is &#x60;embeddable&#x60;. (optional)</param>
        /// <param name="filterPlayable">Whether to filter the results by playable videos (&#x60;true&#x60;) or non-playable videos (&#x60;false&#x60;). (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="query">The search query to use to filter the results. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically by title.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;default&#x60; - Use the default sorting method.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;last_user_action_event_date&#x60; - Sort the results by last user interaction.  * &#x60;likes&#x60; - Sort the results by number of likes. To use this option, **direction** must be &#x60;desc&#x60;.  * &#x60;modified_time&#x60; - Sort the results by last modification.  * &#x60;plays&#x60; - Sort the results by number of plays. To use this option, **direction** must be &#x60;desc&#x60;.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> GetVideosAlt1AsyncWithHttpInfo (string containingUri = default(string), string direction = default(string), string filter = default(string), bool? filterEmbeddable = default(bool?), bool? filterPlayable = default(bool?), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string query = default(string), string sort = default(string))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containingUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "containing_uri", containingUri));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterEmbeddable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_embeddable", filterEmbeddable));
            }
            if (filterPlayable != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter_playable", filterPlayable));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/me/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideosAlt1", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for videos This method returns all the videos that match custom search criteria.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * &#x60;CC&#x60; - Return videos under any Creative Commons license.  * &#x60;CC-BY&#x60; - Return CC BY, or attribution-only, videos.  * &#x60;CC-BY-NC&#x60; - Return CC BY-NC, or Attribution-NonCommercial, videos.  * &#x60;CC-BY-NC-ND&#x60; - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * &#x60;CC-BY-NC-SA&#x60; - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * &#x60;CC-BY-ND&#x60; - Return CC BY-NDm or Attribution-NoDerivs, videos.  * &#x60;CC-BY-SA&#x60; - Return CC BY-SA, or Attribution-ShareAlike, videos.  * &#x60;CC0&#x60; - Return CC0, or public domain, videos.  * &#x60;categories&#x60; - Filter by categories.  * &#x60;duration&#x60; - Filter by duration.  * &#x60;in-progress&#x60; - Return in-progress videos.  * &#x60;minimum_likes&#x60; - Filter by minimum likes.  * &#x60;trending&#x60; - Return trending videos.  * &#x60;upload_date&#x60; - Filter by upload date.  (optional)</param>
        /// <param name="links">A comma-separated list of video URLs to find. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance.  (optional)</param>
        /// <param name="uris">A comma-separated list of video URIs to find. (optional)</param>
        /// <returns>List&lt;Video&gt;</returns>
        public List<Video> SearchVideos (string query, string direction = default(string), string filter = default(string), string links = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string), string uris = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = SearchVideosWithHttpInfo(query, direction, filter, links, page, perPage, sort, uris);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for videos This method returns all the videos that match custom search criteria.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * &#x60;CC&#x60; - Return videos under any Creative Commons license.  * &#x60;CC-BY&#x60; - Return CC BY, or attribution-only, videos.  * &#x60;CC-BY-NC&#x60; - Return CC BY-NC, or Attribution-NonCommercial, videos.  * &#x60;CC-BY-NC-ND&#x60; - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * &#x60;CC-BY-NC-SA&#x60; - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * &#x60;CC-BY-ND&#x60; - Return CC BY-NDm or Attribution-NoDerivs, videos.  * &#x60;CC-BY-SA&#x60; - Return CC BY-SA, or Attribution-ShareAlike, videos.  * &#x60;CC0&#x60; - Return CC0, or public domain, videos.  * &#x60;categories&#x60; - Filter by categories.  * &#x60;duration&#x60; - Filter by duration.  * &#x60;in-progress&#x60; - Return in-progress videos.  * &#x60;minimum_likes&#x60; - Filter by minimum likes.  * &#x60;trending&#x60; - Return trending videos.  * &#x60;upload_date&#x60; - Filter by upload date.  (optional)</param>
        /// <param name="links">A comma-separated list of video URLs to find. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance.  (optional)</param>
        /// <param name="uris">A comma-separated list of video URIs to find. (optional)</param>
        /// <returns>ApiResponse of List&lt;Video&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<Video> > SearchVideosWithHttpInfo (string query, string direction = default(string), string filter = default(string), string links = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string), string uris = default(string))
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'query' when calling VideosEssentialsApi->SearchVideos");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (links != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "links", links));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (uris != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "uris", uris));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Video> >("/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for videos This method returns all the videos that match custom search criteria.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * &#x60;CC&#x60; - Return videos under any Creative Commons license.  * &#x60;CC-BY&#x60; - Return CC BY, or attribution-only, videos.  * &#x60;CC-BY-NC&#x60; - Return CC BY-NC, or Attribution-NonCommercial, videos.  * &#x60;CC-BY-NC-ND&#x60; - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * &#x60;CC-BY-NC-SA&#x60; - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * &#x60;CC-BY-ND&#x60; - Return CC BY-NDm or Attribution-NoDerivs, videos.  * &#x60;CC-BY-SA&#x60; - Return CC BY-SA, or Attribution-ShareAlike, videos.  * &#x60;CC0&#x60; - Return CC0, or public domain, videos.  * &#x60;categories&#x60; - Filter by categories.  * &#x60;duration&#x60; - Filter by duration.  * &#x60;in-progress&#x60; - Return in-progress videos.  * &#x60;minimum_likes&#x60; - Filter by minimum likes.  * &#x60;trending&#x60; - Return trending videos.  * &#x60;upload_date&#x60; - Filter by upload date.  (optional)</param>
        /// <param name="links">A comma-separated list of video URLs to find. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance.  (optional)</param>
        /// <param name="uris">A comma-separated list of video URIs to find. (optional)</param>
        /// <returns>Task of List&lt;Video&gt;</returns>
        public async System.Threading.Tasks.Task<List<Video>> SearchVideosAsync (string query, string direction = default(string), string filter = default(string), string links = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string), string uris = default(string))
        {
             VimeoOpenApi.Client.ApiResponse<List<Video>> localVarResponse = await SearchVideosAsyncWithHttpInfo(query, direction, filter, links, page, perPage, sort, uris);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for videos This method returns all the videos that match custom search criteria.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="direction">The sort direction of the results.  Option descriptions:  * &#x60;asc&#x60; - Sort the results in ascending order.  * &#x60;desc&#x60; - Sort the results in descending order.  (optional)</param>
        /// <param name="filter">The attribute by which to filter the results. &#x60;CC&#x60; and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.  Option descriptions:  * &#x60;CC&#x60; - Return videos under any Creative Commons license.  * &#x60;CC-BY&#x60; - Return CC BY, or attribution-only, videos.  * &#x60;CC-BY-NC&#x60; - Return CC BY-NC, or Attribution-NonCommercial, videos.  * &#x60;CC-BY-NC-ND&#x60; - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.  * &#x60;CC-BY-NC-SA&#x60; - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.  * &#x60;CC-BY-ND&#x60; - Return CC BY-NDm or Attribution-NoDerivs, videos.  * &#x60;CC-BY-SA&#x60; - Return CC BY-SA, or Attribution-ShareAlike, videos.  * &#x60;CC0&#x60; - Return CC0, or public domain, videos.  * &#x60;categories&#x60; - Filter by categories.  * &#x60;duration&#x60; - Filter by duration.  * &#x60;in-progress&#x60; - Return in-progress videos.  * &#x60;minimum_likes&#x60; - Filter by minimum likes.  * &#x60;trending&#x60; - Return trending videos.  * &#x60;upload_date&#x60; - Filter by upload date.  (optional)</param>
        /// <param name="links">A comma-separated list of video URLs to find. (optional)</param>
        /// <param name="page">The page number of the results to show. (optional)</param>
        /// <param name="perPage">The number of items to show on each page of results, up to a maximum of 100. (optional)</param>
        /// <param name="sort">The way to sort the results.  Option descriptions:  * &#x60;alphabetical&#x60; - Sort the results alphabetically.  * &#x60;comments&#x60; - Sort the results by number of comments.  * &#x60;date&#x60; - Sort the results by date.  * &#x60;duration&#x60; - Sort the results by duration.  * &#x60;likes&#x60; - Sort the results by number of likes.  * &#x60;plays&#x60; - Sort the results by number of plays.  * &#x60;relevant&#x60; - Sort the results by relevance.  (optional)</param>
        /// <param name="uris">A comma-separated list of video URIs to find. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Video&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<Video>>> SearchVideosAsyncWithHttpInfo (string query, string direction = default(string), string filter = default(string), string links = default(string), decimal? page = default(decimal?), decimal? perPage = default(decimal?), string sort = default(string), string uris = default(string))
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'query' when calling VideosEssentialsApi->SearchVideos");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.video+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (links != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "links", links));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (uris != null)
            {
                localVarRequestOptions.QueryParameters.Add(VimeoOpenApi.Client.ClientUtils.ParameterToMultiMap("", "uris", uris));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Video>>("/videos", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchVideos", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
