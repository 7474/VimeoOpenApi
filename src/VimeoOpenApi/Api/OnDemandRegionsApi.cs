/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VimeoOpenApi.Client;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandRegionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a specific region to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to add.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandRegion</returns>
        OnDemandRegion AddVodRegion (string country, decimal ondemandId);

        /// <summary>
        /// Add a specific region to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to add.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandRegion</returns>
        ApiResponse<OnDemandRegion> AddVodRegionWithHttpInfo (string country, decimal ondemandId);
        /// <summary>
        /// Remove a specific region from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to remove.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns></returns>
        void DeleteVodRegion (string country, decimal ondemandId);

        /// <summary>
        /// Remove a specific region from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to remove.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVodRegionWithHttpInfo (string country, decimal ondemandId);
        /// <summary>
        /// Remove a list of regions from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject35"> (optional)</param>
        /// <returns>List&lt;OnDemandRegion&gt;</returns>
        List<OnDemandRegion> DeleteVodRegions (decimal ondemandId, InlineObject35 inlineObject35 = default(InlineObject35));

        /// <summary>
        /// Remove a list of regions from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject35"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OnDemandRegion&gt;</returns>
        ApiResponse<List<OnDemandRegion>> DeleteVodRegionsWithHttpInfo (decimal ondemandId, InlineObject35 inlineObject35 = default(InlineObject35));
        /// <summary>
        /// Get a specific On Demand region
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand region.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <returns>OnDemandRegion</returns>
        OnDemandRegion GetRegion (string country);

        /// <summary>
        /// Get a specific On Demand region
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand region.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <returns>ApiResponse of OnDemandRegion</returns>
        ApiResponse<OnDemandRegion> GetRegionWithHttpInfo (string country);
        /// <summary>
        /// Get all the On Demand regions
        /// </summary>
        /// <remarks>
        /// This method returns every existing On Demand region.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OnDemandRegion&gt;</returns>
        List<OnDemandRegion> GetRegions ();

        /// <summary>
        /// Get all the On Demand regions
        /// </summary>
        /// <remarks>
        /// This method returns every existing On Demand region.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OnDemandRegion&gt;</returns>
        ApiResponse<List<OnDemandRegion>> GetRegionsWithHttpInfo ();
        /// <summary>
        /// Get a specific region on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandRegion</returns>
        OnDemandRegion GetVodRegion (string country, decimal ondemandId);

        /// <summary>
        /// Get a specific region on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandRegion</returns>
        ApiResponse<OnDemandRegion> GetVodRegionWithHttpInfo (string country, decimal ondemandId);
        /// <summary>
        /// Get all the regions on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>List&lt;OnDemandRegion&gt;</returns>
        List<OnDemandRegion> GetVodRegions (decimal ondemandId);

        /// <summary>
        /// Get all the regions on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of List&lt;OnDemandRegion&gt;</returns>
        ApiResponse<List<OnDemandRegion>> GetVodRegionsWithHttpInfo (decimal ondemandId);
        /// <summary>
        /// Add a list of regions to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject34"></param>
        /// <returns>OnDemandRegion</returns>
        OnDemandRegion SetVodRegions (decimal ondemandId, InlineObject34 inlineObject34);

        /// <summary>
        /// Add a list of regions to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject34"></param>
        /// <returns>ApiResponse of OnDemandRegion</returns>
        ApiResponse<OnDemandRegion> SetVodRegionsWithHttpInfo (decimal ondemandId, InlineObject34 inlineObject34);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandRegionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a specific region to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to add.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandRegion</returns>
        System.Threading.Tasks.Task<OnDemandRegion> AddVodRegionAsync (string country, decimal ondemandId);

        /// <summary>
        /// Add a specific region to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to add.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandRegion)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandRegion>> AddVodRegionAsyncWithHttpInfo (string country, decimal ondemandId);
        /// <summary>
        /// Remove a specific region from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to remove.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVodRegionAsync (string country, decimal ondemandId);

        /// <summary>
        /// Remove a specific region from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to remove.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVodRegionAsyncWithHttpInfo (string country, decimal ondemandId);
        /// <summary>
        /// Remove a list of regions from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject35"> (optional)</param>
        /// <returns>Task of List&lt;OnDemandRegion&gt;</returns>
        System.Threading.Tasks.Task<List<OnDemandRegion>> DeleteVodRegionsAsync (decimal ondemandId, InlineObject35 inlineObject35 = default(InlineObject35));

        /// <summary>
        /// Remove a list of regions from an On Demand page
        /// </summary>
        /// <remarks>
        /// This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject35"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandRegion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OnDemandRegion>>> DeleteVodRegionsAsyncWithHttpInfo (decimal ondemandId, InlineObject35 inlineObject35 = default(InlineObject35));
        /// <summary>
        /// Get a specific On Demand region
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand region.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <returns>Task of OnDemandRegion</returns>
        System.Threading.Tasks.Task<OnDemandRegion> GetRegionAsync (string country);

        /// <summary>
        /// Get a specific On Demand region
        /// </summary>
        /// <remarks>
        /// This method returns a single On Demand region.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <returns>Task of ApiResponse (OnDemandRegion)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandRegion>> GetRegionAsyncWithHttpInfo (string country);
        /// <summary>
        /// Get all the On Demand regions
        /// </summary>
        /// <remarks>
        /// This method returns every existing On Demand region.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OnDemandRegion&gt;</returns>
        System.Threading.Tasks.Task<List<OnDemandRegion>> GetRegionsAsync ();

        /// <summary>
        /// Get all the On Demand regions
        /// </summary>
        /// <remarks>
        /// This method returns every existing On Demand region.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OnDemandRegion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OnDemandRegion>>> GetRegionsAsyncWithHttpInfo ();
        /// <summary>
        /// Get a specific region on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandRegion</returns>
        System.Threading.Tasks.Task<OnDemandRegion> GetVodRegionAsync (string country, decimal ondemandId);

        /// <summary>
        /// Get a specific region on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandRegion)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandRegion>> GetVodRegionAsyncWithHttpInfo (string country, decimal ondemandId);
        /// <summary>
        /// Get all the regions on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of List&lt;OnDemandRegion&gt;</returns>
        System.Threading.Tasks.Task<List<OnDemandRegion>> GetVodRegionsAsync (decimal ondemandId);

        /// <summary>
        /// Get all the regions on an On Demand page
        /// </summary>
        /// <remarks>
        /// This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandRegion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OnDemandRegion>>> GetVodRegionsAsyncWithHttpInfo (decimal ondemandId);
        /// <summary>
        /// Add a list of regions to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject34"></param>
        /// <returns>Task of OnDemandRegion</returns>
        System.Threading.Tasks.Task<OnDemandRegion> SetVodRegionsAsync (decimal ondemandId, InlineObject34 inlineObject34);

        /// <summary>
        /// Add a list of regions to an On Demand page
        /// </summary>
        /// <remarks>
        /// This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </remarks>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject34"></param>
        /// <returns>Task of ApiResponse (OnDemandRegion)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnDemandRegion>> SetVodRegionsAsyncWithHttpInfo (decimal ondemandId, InlineObject34 inlineObject34);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnDemandRegionsApi : IOnDemandRegionsApiSync, IOnDemandRegionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OnDemandRegionsApi : IOnDemandRegionsApi
    {
        private VimeoOpenApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandRegionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnDemandRegionsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandRegionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnDemandRegionsApi(String basePath)
        {
            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                new VimeoOpenApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandRegionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OnDemandRegionsApi(VimeoOpenApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VimeoOpenApi.Client.Configuration.MergeConfigurations(
                VimeoOpenApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VimeoOpenApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnDemandRegionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OnDemandRegionsApi(VimeoOpenApi.Client.ISynchronousClient client,VimeoOpenApi.Client.IAsynchronousClient asyncClient, VimeoOpenApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VimeoOpenApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VimeoOpenApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VimeoOpenApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VimeoOpenApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VimeoOpenApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a specific region to an On Demand page This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to add.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandRegion</returns>
        public OnDemandRegion AddVodRegion (string country, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandRegion> localVarResponse = AddVodRegionWithHttpInfo(country, ondemandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a specific region to an On Demand page This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to add.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandRegion</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandRegion > AddVodRegionWithHttpInfo (string country, decimal ondemandId)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'country' when calling OnDemandRegionsApi->AddVodRegion");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("country", VimeoOpenApi.Client.ClientUtils.ParameterToString(country)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< OnDemandRegion >("/ondemand/pages/{ondemand_id}/regions/{country}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVodRegion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a specific region to an On Demand page This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to add.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandRegion</returns>
        public async System.Threading.Tasks.Task<OnDemandRegion> AddVodRegionAsync (string country, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandRegion> localVarResponse = await AddVodRegionAsyncWithHttpInfo(country, ondemandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a specific region to an On Demand page This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to add.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandRegion)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandRegion>> AddVodRegionAsyncWithHttpInfo (string country, decimal ondemandId)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'country' when calling OnDemandRegionsApi->AddVodRegion");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("country", VimeoOpenApi.Client.ClientUtils.ParameterToString(country)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<OnDemandRegion>("/ondemand/pages/{ondemand_id}/regions/{country}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVodRegion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific region from an On Demand page This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to remove.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns></returns>
        public void DeleteVodRegion (string country, decimal ondemandId)
        {
             DeleteVodRegionWithHttpInfo(country, ondemandId);
        }

        /// <summary>
        /// Remove a specific region from an On Demand page This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to remove.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public VimeoOpenApi.Client.ApiResponse<Object> DeleteVodRegionWithHttpInfo (string country, decimal ondemandId)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'country' when calling OnDemandRegionsApi->DeleteVodRegion");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("country", VimeoOpenApi.Client.ClientUtils.ParameterToString(country)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/ondemand/pages/{ondemand_id}/regions/{country}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVodRegion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a specific region from an On Demand page This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to remove.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVodRegionAsync (string country, decimal ondemandId)
        {
             await DeleteVodRegionAsyncWithHttpInfo(country, ondemandId);

        }

        /// <summary>
        /// Remove a specific region from an On Demand page This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to remove.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<Object>> DeleteVodRegionAsyncWithHttpInfo (string country, decimal ondemandId)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'country' when calling OnDemandRegionsApi->DeleteVodRegion");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("country", VimeoOpenApi.Client.ClientUtils.ParameterToString(country)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/ondemand/pages/{ondemand_id}/regions/{country}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVodRegion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a list of regions from an On Demand page This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject35"> (optional)</param>
        /// <returns>List&lt;OnDemandRegion&gt;</returns>
        public List<OnDemandRegion> DeleteVodRegions (decimal ondemandId, InlineObject35 inlineObject35 = default(InlineObject35))
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandRegion>> localVarResponse = DeleteVodRegionsWithHttpInfo(ondemandId, inlineObject35);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a list of regions from an On Demand page This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject35"> (optional)</param>
        /// <returns>ApiResponse of List&lt;OnDemandRegion&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<OnDemandRegion> > DeleteVodRegionsWithHttpInfo (decimal ondemandId, InlineObject35 inlineObject35 = default(InlineObject35))
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.Data = inlineObject35;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete< List<OnDemandRegion> >("/ondemand/pages/{ondemand_id}/regions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVodRegions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a list of regions from an On Demand page This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject35"> (optional)</param>
        /// <returns>Task of List&lt;OnDemandRegion&gt;</returns>
        public async System.Threading.Tasks.Task<List<OnDemandRegion>> DeleteVodRegionsAsync (decimal ondemandId, InlineObject35 inlineObject35 = default(InlineObject35))
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandRegion>> localVarResponse = await DeleteVodRegionsAsyncWithHttpInfo(ondemandId, inlineObject35);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a list of regions from an On Demand page This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject35"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandRegion&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<OnDemandRegion>>> DeleteVodRegionsAsyncWithHttpInfo (decimal ondemandId, InlineObject35 inlineObject35 = default(InlineObject35))
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.Data = inlineObject35;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<OnDemandRegion>>("/ondemand/pages/{ondemand_id}/regions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVodRegions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific On Demand region This method returns a single On Demand region.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <returns>OnDemandRegion</returns>
        public OnDemandRegion GetRegion (string country)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandRegion> localVarResponse = GetRegionWithHttpInfo(country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific On Demand region This method returns a single On Demand region.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <returns>ApiResponse of OnDemandRegion</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandRegion > GetRegionWithHttpInfo (string country)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'country' when calling OnDemandRegionsApi->GetRegion");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("country", VimeoOpenApi.Client.ClientUtils.ParameterToString(country)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnDemandRegion >("/ondemand/regions/{country}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific On Demand region This method returns a single On Demand region.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <returns>Task of OnDemandRegion</returns>
        public async System.Threading.Tasks.Task<OnDemandRegion> GetRegionAsync (string country)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandRegion> localVarResponse = await GetRegionAsyncWithHttpInfo(country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific On Demand region This method returns a single On Demand region.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <returns>Task of ApiResponse (OnDemandRegion)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandRegion>> GetRegionAsyncWithHttpInfo (string country)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'country' when calling OnDemandRegionsApi->GetRegion");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("country", VimeoOpenApi.Client.ClientUtils.ParameterToString(country)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnDemandRegion>("/ondemand/regions/{country}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the On Demand regions This method returns every existing On Demand region.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OnDemandRegion&gt;</returns>
        public List<OnDemandRegion> GetRegions ()
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandRegion>> localVarResponse = GetRegionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the On Demand regions This method returns every existing On Demand region.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OnDemandRegion&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<OnDemandRegion> > GetRegionsWithHttpInfo ()
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<OnDemandRegion> >("/ondemand/regions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the On Demand regions This method returns every existing On Demand region.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OnDemandRegion&gt;</returns>
        public async System.Threading.Tasks.Task<List<OnDemandRegion>> GetRegionsAsync ()
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandRegion>> localVarResponse = await GetRegionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the On Demand regions This method returns every existing On Demand region.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OnDemandRegion&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<OnDemandRegion>>> GetRegionsAsyncWithHttpInfo ()
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OnDemandRegion>>("/ondemand/regions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific region on an On Demand page This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>OnDemandRegion</returns>
        public OnDemandRegion GetVodRegion (string country, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandRegion> localVarResponse = GetVodRegionWithHttpInfo(country, ondemandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific region on an On Demand page This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of OnDemandRegion</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandRegion > GetVodRegionWithHttpInfo (string country, decimal ondemandId)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'country' when calling OnDemandRegionsApi->GetVodRegion");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("country", VimeoOpenApi.Client.ClientUtils.ParameterToString(country)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnDemandRegion >("/ondemand/pages/{ondemand_id}/regions/{country}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodRegion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific region on an On Demand page This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of OnDemandRegion</returns>
        public async System.Threading.Tasks.Task<OnDemandRegion> GetVodRegionAsync (string country, decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandRegion> localVarResponse = await GetVodRegionAsyncWithHttpInfo(country, ondemandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific region on an On Demand page This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country code of the region to return.</param>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (OnDemandRegion)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandRegion>> GetVodRegionAsyncWithHttpInfo (string country, decimal ondemandId)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'country' when calling OnDemandRegionsApi->GetVodRegion");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("country", VimeoOpenApi.Client.ClientUtils.ParameterToString(country)); // path parameter
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnDemandRegion>("/ondemand/pages/{ondemand_id}/regions/{country}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodRegion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the regions on an On Demand page This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>List&lt;OnDemandRegion&gt;</returns>
        public List<OnDemandRegion> GetVodRegions (decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandRegion>> localVarResponse = GetVodRegionsWithHttpInfo(ondemandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the regions on an On Demand page This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>ApiResponse of List&lt;OnDemandRegion&gt;</returns>
        public VimeoOpenApi.Client.ApiResponse< List<OnDemandRegion> > GetVodRegionsWithHttpInfo (decimal ondemandId)
        {
            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<OnDemandRegion> >("/ondemand/pages/{ondemand_id}/regions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodRegions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the regions on an On Demand page This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of List&lt;OnDemandRegion&gt;</returns>
        public async System.Threading.Tasks.Task<List<OnDemandRegion>> GetVodRegionsAsync (decimal ondemandId)
        {
             VimeoOpenApi.Client.ApiResponse<List<OnDemandRegion>> localVarResponse = await GetVodRegionsAsyncWithHttpInfo(ondemandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the regions on an On Demand page This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <returns>Task of ApiResponse (List&lt;OnDemandRegion&gt;)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<List<OnDemandRegion>>> GetVodRegionsAsyncWithHttpInfo (decimal ondemandId)
        {

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OnDemandRegion>>("/ondemand/pages/{ondemand_id}/regions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVodRegions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of regions to an On Demand page This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject34"></param>
        /// <returns>OnDemandRegion</returns>
        public OnDemandRegion SetVodRegions (decimal ondemandId, InlineObject34 inlineObject34)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandRegion> localVarResponse = SetVodRegionsWithHttpInfo(ondemandId, inlineObject34);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a list of regions to an On Demand page This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject34"></param>
        /// <returns>ApiResponse of OnDemandRegion</returns>
        public VimeoOpenApi.Client.ApiResponse< OnDemandRegion > SetVodRegionsWithHttpInfo (decimal ondemandId, InlineObject34 inlineObject34)
        {
            // verify the required parameter 'inlineObject34' is set
            if (inlineObject34 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject34' when calling OnDemandRegionsApi->SetVodRegions");

            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            var localVarContentType = VimeoOpenApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = VimeoOpenApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.Data = inlineObject34;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< OnDemandRegion >("/ondemand/pages/{ondemand_id}/regions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetVodRegions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a list of regions to an On Demand page This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject34"></param>
        /// <returns>Task of OnDemandRegion</returns>
        public async System.Threading.Tasks.Task<OnDemandRegion> SetVodRegionsAsync (decimal ondemandId, InlineObject34 inlineObject34)
        {
             VimeoOpenApi.Client.ApiResponse<OnDemandRegion> localVarResponse = await SetVodRegionsAsyncWithHttpInfo(ondemandId, inlineObject34);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a list of regions to an On Demand page This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.
        /// </summary>
        /// <exception cref="VimeoOpenApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ondemandId">The ID of the On Demand page.</param>
        /// <param name="inlineObject34"></param>
        /// <returns>Task of ApiResponse (OnDemandRegion)</returns>
        public async System.Threading.Tasks.Task<VimeoOpenApi.Client.ApiResponse<OnDemandRegion>> SetVodRegionsAsyncWithHttpInfo (decimal ondemandId, InlineObject34 inlineObject34)
        {
            // verify the required parameter 'inlineObject34' is set
            if (inlineObject34 == null)
                throw new VimeoOpenApi.Client.ApiException(400, "Missing required parameter 'inlineObject34' when calling OnDemandRegionsApi->SetVodRegions");


            VimeoOpenApi.Client.RequestOptions localVarRequestOptions = new VimeoOpenApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/vnd.vimeo.ondemand.region+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("ondemand_id", VimeoOpenApi.Client.ClientUtils.ParameterToString(ondemandId)); // path parameter
            localVarRequestOptions.Data = inlineObject34;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<OnDemandRegion>("/ondemand/pages/{ondemand_id}/regions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetVodRegions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
