/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using VimeoOpenApi.Client;
using VimeoOpenApi.Api;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Test
{
    /// <summary>
    ///  Class for testing VideosVideoCommentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class VideosVideoCommentsApiTests : IDisposable
    {
        private VideosVideoCommentsApi instance;

        public VideosVideoCommentsApiTests()
        {
            instance = new VideosVideoCommentsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VideosVideoCommentsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' VideosVideoCommentsApi
            //Assert.IsType(typeof(VideosVideoCommentsApi), instance, "instance is a VideosVideoCommentsApi");
        }

        
        /// <summary>
        /// Test CreateComment
        /// </summary>
        [Fact]
        public void CreateCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal videoId = null;
            //InlineObject54 inlineObject54 = null;
            //var response = instance.CreateComment(videoId, inlineObject54);
            //Assert.IsType<Comment> (response, "response is Comment");
        }
        
        /// <summary>
        /// Test CreateCommentAlt1
        /// </summary>
        [Fact]
        public void CreateCommentAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //decimal videoId = null;
            //InlineObject10 inlineObject10 = null;
            //var response = instance.CreateCommentAlt1(channelId, videoId, inlineObject10);
            //Assert.IsType<Comment> (response, "response is Comment");
        }
        
        /// <summary>
        /// Test CreateCommentReply
        /// </summary>
        [Fact]
        public void CreateCommentReplyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal commentId = null;
            //decimal videoId = null;
            //InlineObject56 inlineObject56 = null;
            //var response = instance.CreateCommentReply(commentId, videoId, inlineObject56);
            //Assert.IsType<Comment> (response, "response is Comment");
        }
        
        /// <summary>
        /// Test DeleteComment
        /// </summary>
        [Fact]
        public void DeleteCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal commentId = null;
            //decimal videoId = null;
            //instance.DeleteComment(commentId, videoId);
            
        }
        
        /// <summary>
        /// Test EditComment
        /// </summary>
        [Fact]
        public void EditCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal commentId = null;
            //decimal videoId = null;
            //InlineObject55 inlineObject55 = null;
            //var response = instance.EditComment(commentId, videoId, inlineObject55);
            //Assert.IsType<Comment> (response, "response is Comment");
        }
        
        /// <summary>
        /// Test GetComment
        /// </summary>
        [Fact]
        public void GetCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal commentId = null;
            //decimal videoId = null;
            //var response = instance.GetComment(commentId, videoId);
            //Assert.IsType<Comment> (response, "response is Comment");
        }
        
        /// <summary>
        /// Test GetCommentReplies
        /// </summary>
        [Fact]
        public void GetCommentRepliesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal commentId = null;
            //decimal videoId = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //var response = instance.GetCommentReplies(commentId, videoId, page, perPage);
            //Assert.IsType<List<Comment>> (response, "response is List<Comment>");
        }
        
        /// <summary>
        /// Test GetComments
        /// </summary>
        [Fact]
        public void GetCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal videoId = null;
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //var response = instance.GetComments(videoId, direction, page, perPage);
            //Assert.IsType<List<Comment>> (response, "response is List<Comment>");
        }
        
        /// <summary>
        /// Test GetCommentsAlt1
        /// </summary>
        [Fact]
        public void GetCommentsAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //decimal videoId = null;
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //var response = instance.GetCommentsAlt1(channelId, videoId, direction, page, perPage);
            //Assert.IsType<List<Comment>> (response, "response is List<Comment>");
        }
        
    }

}
