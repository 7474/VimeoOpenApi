/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using VimeoOpenApi.Client;
using VimeoOpenApi.Api;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Test
{
    /// <summary>
    ///  Class for testing ChannelsSubscriptionsAndSubscribersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ChannelsSubscriptionsAndSubscribersApiTests : IDisposable
    {
        private ChannelsSubscriptionsAndSubscribersApi instance;

        public ChannelsSubscriptionsAndSubscribersApiTests()
        {
            instance = new ChannelsSubscriptionsAndSubscribersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ChannelsSubscriptionsAndSubscribersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ChannelsSubscriptionsAndSubscribersApi
            //Assert.IsType(typeof(ChannelsSubscriptionsAndSubscribersApi), instance, "instance is a ChannelsSubscriptionsAndSubscribersApi");
        }

        
        /// <summary>
        /// Test CheckIfUserSubscribedToChannel
        /// </summary>
        [Fact]
        public void CheckIfUserSubscribedToChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //decimal userId = null;
            //instance.CheckIfUserSubscribedToChannel(channelId, userId);
            
        }
        
        /// <summary>
        /// Test CheckIfUserSubscribedToChannelAlt1
        /// </summary>
        [Fact]
        public void CheckIfUserSubscribedToChannelAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //instance.CheckIfUserSubscribedToChannelAlt1(channelId);
            
        }
        
        /// <summary>
        /// Test GetChannelSubscribers
        /// </summary>
        [Fact]
        public void GetChannelSubscribersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //string filter = null;
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetChannelSubscribers(channelId, filter, direction, page, perPage, query, sort);
            //Assert.IsType<List<User>> (response, "response is List<User>");
        }
        
        /// <summary>
        /// Test SubscribeToChannel
        /// </summary>
        [Fact]
        public void SubscribeToChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //decimal userId = null;
            //instance.SubscribeToChannel(channelId, userId);
            
        }
        
        /// <summary>
        /// Test SubscribeToChannelAlt1
        /// </summary>
        [Fact]
        public void SubscribeToChannelAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //instance.SubscribeToChannelAlt1(channelId);
            
        }
        
        /// <summary>
        /// Test UnsubscribeFromChannel
        /// </summary>
        [Fact]
        public void UnsubscribeFromChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //decimal userId = null;
            //instance.UnsubscribeFromChannel(channelId, userId);
            
        }
        
        /// <summary>
        /// Test UnsubscribeFromChannelAlt1
        /// </summary>
        [Fact]
        public void UnsubscribeFromChannelAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //instance.UnsubscribeFromChannelAlt1(channelId);
            
        }
        
    }

}
