/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using VimeoOpenApi.Client;
using VimeoOpenApi.Api;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Test
{
    /// <summary>
    ///  Class for testing UsersFollowersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersFollowersApiTests : IDisposable
    {
        private UsersFollowersApi instance;

        public UsersFollowersApiTests()
        {
            instance = new UsersFollowersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersFollowersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersFollowersApi
            //Assert.IsType(typeof(UsersFollowersApi), instance, "instance is a UsersFollowersApi");
        }

        
        /// <summary>
        /// Test CheckIfUserIsFollowing
        /// </summary>
        [Fact]
        public void CheckIfUserIsFollowingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal followUserId = null;
            //decimal userId = null;
            //instance.CheckIfUserIsFollowing(followUserId, userId);
            
        }
        
        /// <summary>
        /// Test CheckIfUserIsFollowingAlt1
        /// </summary>
        [Fact]
        public void CheckIfUserIsFollowingAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal followUserId = null;
            //instance.CheckIfUserIsFollowingAlt1(followUserId);
            
        }
        
        /// <summary>
        /// Test FollowUser
        /// </summary>
        [Fact]
        public void FollowUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal followUserId = null;
            //decimal userId = null;
            //instance.FollowUser(followUserId, userId);
            
        }
        
        /// <summary>
        /// Test FollowUserAlt1
        /// </summary>
        [Fact]
        public void FollowUserAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal followUserId = null;
            //instance.FollowUserAlt1(followUserId);
            
        }
        
        /// <summary>
        /// Test FollowUsers
        /// </summary>
        [Fact]
        public void FollowUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //InlineObject44 inlineObject44 = null;
            //instance.FollowUsers(userId, inlineObject44);
            
        }
        
        /// <summary>
        /// Test FollowUsersAlt1
        /// </summary>
        [Fact]
        public void FollowUsersAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject20 inlineObject20 = null;
            //instance.FollowUsersAlt1(inlineObject20);
            
        }
        
        /// <summary>
        /// Test GetFollowers
        /// </summary>
        [Fact]
        public void GetFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetFollowers(userId, direction, page, perPage, query, sort);
            //Assert.IsType<List<User>> (response, "response is List<User>");
        }
        
        /// <summary>
        /// Test GetFollowersAlt1
        /// </summary>
        [Fact]
        public void GetFollowersAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetFollowersAlt1(direction, page, perPage, query, sort);
            //Assert.IsType<List<User>> (response, "response is List<User>");
        }
        
        /// <summary>
        /// Test GetUserFollowing
        /// </summary>
        [Fact]
        public void GetUserFollowingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //string direction = null;
            //string filter = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetUserFollowing(userId, direction, filter, page, perPage, query, sort);
            //Assert.IsType<List<User>> (response, "response is List<User>");
        }
        
        /// <summary>
        /// Test GetUserFollowingAlt1
        /// </summary>
        [Fact]
        public void GetUserFollowingAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //string filter = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetUserFollowingAlt1(direction, filter, page, perPage, query, sort);
            //Assert.IsType<List<User>> (response, "response is List<User>");
        }
        
        /// <summary>
        /// Test UnfollowUser
        /// </summary>
        [Fact]
        public void UnfollowUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal followUserId = null;
            //decimal userId = null;
            //instance.UnfollowUser(followUserId, userId);
            
        }
        
        /// <summary>
        /// Test UnfollowUserAlt1
        /// </summary>
        [Fact]
        public void UnfollowUserAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal followUserId = null;
            //instance.UnfollowUserAlt1(followUserId);
            
        }
        
    }

}
