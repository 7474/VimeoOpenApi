/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using VimeoOpenApi.Client;
using VimeoOpenApi.Api;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Test
{
    /// <summary>
    ///  Class for testing FoldersVideosApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FoldersVideosApiTests : IDisposable
    {
        private FoldersVideosApi instance;

        public FoldersVideosApiTests()
        {
            instance = new FoldersVideosApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FoldersVideosApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FoldersVideosApi
            //Assert.IsType(typeof(FoldersVideosApi), instance, "instance is a FoldersVideosApi");
        }

        
        /// <summary>
        /// Test AddVideoToProject
        /// </summary>
        [Fact]
        public void AddVideoToProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //decimal userId = null;
            //decimal videoId = null;
            //instance.AddVideoToProject(projectId, userId, videoId);
            
        }
        
        /// <summary>
        /// Test AddVideoToProjectAlt1
        /// </summary>
        [Fact]
        public void AddVideoToProjectAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //decimal videoId = null;
            //instance.AddVideoToProjectAlt1(projectId, videoId);
            
        }
        
        /// <summary>
        /// Test AddVideosToProject
        /// </summary>
        [Fact]
        public void AddVideosToProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //decimal userId = null;
            //string uris = null;
            //instance.AddVideosToProject(projectId, userId, uris);
            
        }
        
        /// <summary>
        /// Test AddVideosToProjectAlt1
        /// </summary>
        [Fact]
        public void AddVideosToProjectAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //string uris = null;
            //instance.AddVideosToProjectAlt1(projectId, uris);
            
        }
        
        /// <summary>
        /// Test GetProjectVideos
        /// </summary>
        [Fact]
        public void GetProjectVideosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //decimal userId = null;
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetProjectVideos(projectId, userId, direction, page, perPage, query, sort);
            //Assert.IsType<List<Video>> (response, "response is List<Video>");
        }
        
        /// <summary>
        /// Test GetProjectVideosAlt1
        /// </summary>
        [Fact]
        public void GetProjectVideosAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetProjectVideosAlt1(projectId, direction, page, perPage, query, sort);
            //Assert.IsType<List<Video>> (response, "response is List<Video>");
        }
        
        /// <summary>
        /// Test RemoveVideoFromProject
        /// </summary>
        [Fact]
        public void RemoveVideoFromProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //decimal userId = null;
            //decimal videoId = null;
            //instance.RemoveVideoFromProject(projectId, userId, videoId);
            
        }
        
        /// <summary>
        /// Test RemoveVideoFromProjectAlt1
        /// </summary>
        [Fact]
        public void RemoveVideoFromProjectAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //decimal videoId = null;
            //instance.RemoveVideoFromProjectAlt1(projectId, videoId);
            
        }
        
        /// <summary>
        /// Test RemoveVideosFromProject
        /// </summary>
        [Fact]
        public void RemoveVideosFromProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //decimal userId = null;
            //string uris = null;
            //bool? shouldDeleteClips = null;
            //instance.RemoveVideosFromProject(projectId, userId, uris, shouldDeleteClips);
            
        }
        
        /// <summary>
        /// Test RemoveVideosFromProjectAlt1
        /// </summary>
        [Fact]
        public void RemoveVideosFromProjectAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //string uris = null;
            //bool? shouldDeleteClips = null;
            //instance.RemoveVideosFromProjectAlt1(projectId, uris, shouldDeleteClips);
            
        }
        
    }

}
