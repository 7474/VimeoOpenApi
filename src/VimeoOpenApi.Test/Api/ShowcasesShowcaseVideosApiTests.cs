/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using VimeoOpenApi.Client;
using VimeoOpenApi.Api;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Test
{
    /// <summary>
    ///  Class for testing ShowcasesShowcaseVideosApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ShowcasesShowcaseVideosApiTests : IDisposable
    {
        private ShowcasesShowcaseVideosApi instance;

        public ShowcasesShowcaseVideosApiTests()
        {
            instance = new ShowcasesShowcaseVideosApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ShowcasesShowcaseVideosApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ShowcasesShowcaseVideosApi
            //Assert.IsType(typeof(ShowcasesShowcaseVideosApi), instance, "instance is a ShowcasesShowcaseVideosApi");
        }

        
        /// <summary>
        /// Test AddVideoToShowcase
        /// </summary>
        [Fact]
        public void AddVideoToShowcaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal userId = null;
            //decimal videoId = null;
            //instance.AddVideoToShowcase(albumId, userId, videoId);
            
        }
        
        /// <summary>
        /// Test AddVideoToShowcaseAlt1
        /// </summary>
        [Fact]
        public void AddVideoToShowcaseAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal videoId = null;
            //instance.AddVideoToShowcaseAlt1(albumId, videoId);
            
        }
        
        /// <summary>
        /// Test GetAvailableShowcaseVideos
        /// </summary>
        [Fact]
        public void GetAvailableShowcaseVideosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string sort = null;
            //var response = instance.GetAvailableShowcaseVideos(albumId, direction, page, perPage, sort);
            //Assert.IsType<List<Video>> (response, "response is List<Video>");
        }
        
        /// <summary>
        /// Test GetAvailableVideoShowcases
        /// </summary>
        [Fact]
        public void GetAvailableVideoShowcasesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal videoId = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //var response = instance.GetAvailableVideoShowcases(videoId, page, perPage);
            //Assert.IsType<List<Album>> (response, "response is List<Album>");
        }
        
        /// <summary>
        /// Test GetShowcaseVideo
        /// </summary>
        [Fact]
        public void GetShowcaseVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal userId = null;
            //decimal videoId = null;
            //string password = null;
            //var response = instance.GetShowcaseVideo(albumId, userId, videoId, password);
            //Assert.IsType<Video> (response, "response is Video");
        }
        
        /// <summary>
        /// Test GetShowcaseVideoAlt1
        /// </summary>
        [Fact]
        public void GetShowcaseVideoAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal videoId = null;
            //string password = null;
            //var response = instance.GetShowcaseVideoAlt1(albumId, videoId, password);
            //Assert.IsType<Video> (response, "response is Video");
        }
        
        /// <summary>
        /// Test GetShowcaseVideos
        /// </summary>
        [Fact]
        public void GetShowcaseVideosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal userId = null;
            //string containingUri = null;
            //string direction = null;
            //string filter = null;
            //bool? filterEmbeddable = null;
            //decimal? page = null;
            //string password = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //bool? weakSearch = null;
            //var response = instance.GetShowcaseVideos(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
            //Assert.IsType<List<Video>> (response, "response is List<Video>");
        }
        
        /// <summary>
        /// Test GetShowcaseVideosAlt1
        /// </summary>
        [Fact]
        public void GetShowcaseVideosAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //string containingUri = null;
            //string direction = null;
            //string filter = null;
            //bool? filterEmbeddable = null;
            //decimal? page = null;
            //string password = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //bool? weakSearch = null;
            //var response = instance.GetShowcaseVideosAlt1(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
            //Assert.IsType<List<Video>> (response, "response is List<Video>");
        }
        
        /// <summary>
        /// Test RemoveVideoFromShowcase
        /// </summary>
        [Fact]
        public void RemoveVideoFromShowcaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal userId = null;
            //decimal videoId = null;
            //instance.RemoveVideoFromShowcase(albumId, userId, videoId);
            
        }
        
        /// <summary>
        /// Test RemoveVideoFromShowcaseAlt1
        /// </summary>
        [Fact]
        public void RemoveVideoFromShowcaseAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal videoId = null;
            //instance.RemoveVideoFromShowcaseAlt1(albumId, videoId);
            
        }
        
        /// <summary>
        /// Test ReplaceVideosInShowcase
        /// </summary>
        [Fact]
        public void ReplaceVideosInShowcaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal userId = null;
            //InlineObject42 inlineObject42 = null;
            //instance.ReplaceVideosInShowcase(albumId, userId, inlineObject42);
            
        }
        
        /// <summary>
        /// Test ReplaceVideosInShowcaseAlt1
        /// </summary>
        [Fact]
        public void ReplaceVideosInShowcaseAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //InlineObject18 inlineObject18 = null;
            //instance.ReplaceVideosInShowcaseAlt1(albumId, inlineObject18);
            
        }
        
        /// <summary>
        /// Test SetVideoAsShowcaseFeatured
        /// </summary>
        [Fact]
        public void SetVideoAsShowcaseFeaturedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal userId = null;
            //decimal videoId = null;
            //var response = instance.SetVideoAsShowcaseFeatured(albumId, userId, videoId);
            //Assert.IsType<Album> (response, "response is Album");
        }
        
        /// <summary>
        /// Test SetVideoAsShowcaseFeaturedAlt1
        /// </summary>
        [Fact]
        public void SetVideoAsShowcaseFeaturedAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal videoId = null;
            //var response = instance.SetVideoAsShowcaseFeaturedAlt1(albumId, videoId);
            //Assert.IsType<Album> (response, "response is Album");
        }
        
        /// <summary>
        /// Test SetVideoAsShowcaseThumbnail
        /// </summary>
        [Fact]
        public void SetVideoAsShowcaseThumbnailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal userId = null;
            //decimal videoId = null;
            //InlineObject43 inlineObject43 = null;
            //var response = instance.SetVideoAsShowcaseThumbnail(albumId, userId, videoId, inlineObject43);
            //Assert.IsType<Album> (response, "response is Album");
        }
        
        /// <summary>
        /// Test SetVideoAsShowcaseThumbnailAlt1
        /// </summary>
        [Fact]
        public void SetVideoAsShowcaseThumbnailAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal videoId = null;
            //InlineObject19 inlineObject19 = null;
            //var response = instance.SetVideoAsShowcaseThumbnailAlt1(albumId, videoId, inlineObject19);
            //Assert.IsType<Album> (response, "response is Album");
        }
        
    }

}
