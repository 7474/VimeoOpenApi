/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using VimeoOpenApi.Client;
using VimeoOpenApi.Api;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Test
{
    /// <summary>
    ///  Class for testing ChannelsModeratorsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ChannelsModeratorsApiTests : IDisposable
    {
        private ChannelsModeratorsApi instance;

        public ChannelsModeratorsApiTests()
        {
            instance = new ChannelsModeratorsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ChannelsModeratorsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ChannelsModeratorsApi
            //Assert.IsType(typeof(ChannelsModeratorsApi), instance, "instance is a ChannelsModeratorsApi");
        }

        
        /// <summary>
        /// Test AddChannelModerator
        /// </summary>
        [Fact]
        public void AddChannelModeratorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //decimal userId = null;
            //instance.AddChannelModerator(channelId, userId);
            
        }
        
        /// <summary>
        /// Test AddChannelModerators
        /// </summary>
        [Fact]
        public void AddChannelModeratorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //InlineObject3 inlineObject3 = null;
            //instance.AddChannelModerators(channelId, inlineObject3);
            
        }
        
        /// <summary>
        /// Test GetChannelModerator
        /// </summary>
        [Fact]
        public void GetChannelModeratorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //decimal userId = null;
            //var response = instance.GetChannelModerator(channelId, userId);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetChannelModerators
        /// </summary>
        [Fact]
        public void GetChannelModeratorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetChannelModerators(channelId, direction, page, perPage, query, sort);
            //Assert.IsType<List<User>> (response, "response is List<User>");
        }
        
        /// <summary>
        /// Test RemoveChannelModerator
        /// </summary>
        [Fact]
        public void RemoveChannelModeratorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //decimal userId = null;
            //instance.RemoveChannelModerator(channelId, userId);
            
        }
        
        /// <summary>
        /// Test RemoveChannelModerators
        /// </summary>
        [Fact]
        public void RemoveChannelModeratorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //InlineObject4 inlineObject4 = null;
            //instance.RemoveChannelModerators(channelId, inlineObject4);
            
        }
        
        /// <summary>
        /// Test ReplaceChannelModerators
        /// </summary>
        [Fact]
        public void ReplaceChannelModeratorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //InlineObject5 inlineObject5 = null;
            //var response = instance.ReplaceChannelModerators(channelId, inlineObject5);
            //Assert.IsType<List<User>> (response, "response is List<User>");
        }
        
    }

}
