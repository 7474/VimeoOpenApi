/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using VimeoOpenApi.Client;
using VimeoOpenApi.Api;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Test
{
    /// <summary>
    ///  Class for testing ShowcasesEssentialsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ShowcasesEssentialsApiTests : IDisposable
    {
        private ShowcasesEssentialsApi instance;

        public ShowcasesEssentialsApiTests()
        {
            instance = new ShowcasesEssentialsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ShowcasesEssentialsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ShowcasesEssentialsApi
            //Assert.IsType(typeof(ShowcasesEssentialsApi), instance, "instance is a ShowcasesEssentialsApi");
        }

        
        /// <summary>
        /// Test CreateShowcase
        /// </summary>
        [Fact]
        public void CreateShowcaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //InlineObject38 inlineObject38 = null;
            //var response = instance.CreateShowcase(userId, inlineObject38);
            //Assert.IsType<Album> (response, "response is Album");
        }
        
        /// <summary>
        /// Test CreateShowcaseAlt1
        /// </summary>
        [Fact]
        public void CreateShowcaseAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject16 inlineObject16 = null;
            //var response = instance.CreateShowcaseAlt1(inlineObject16);
            //Assert.IsType<Album> (response, "response is Album");
        }
        
        /// <summary>
        /// Test DeleteShowcase
        /// </summary>
        [Fact]
        public void DeleteShowcaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal userId = null;
            //instance.DeleteShowcase(albumId, userId);
            
        }
        
        /// <summary>
        /// Test DeleteShowcaseAlt1
        /// </summary>
        [Fact]
        public void DeleteShowcaseAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //instance.DeleteShowcaseAlt1(albumId);
            
        }
        
        /// <summary>
        /// Test EditShowcase
        /// </summary>
        [Fact]
        public void EditShowcaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal userId = null;
            //InlineObject39 inlineObject39 = null;
            //var response = instance.EditShowcase(albumId, userId, inlineObject39);
            //Assert.IsType<Album> (response, "response is Album");
        }
        
        /// <summary>
        /// Test EditShowcaseAlt1
        /// </summary>
        [Fact]
        public void EditShowcaseAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //InlineObject17 inlineObject17 = null;
            //var response = instance.EditShowcaseAlt1(albumId, inlineObject17);
            //Assert.IsType<Album> (response, "response is Album");
        }
        
        /// <summary>
        /// Test GetShowcase
        /// </summary>
        [Fact]
        public void GetShowcaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //decimal userId = null;
            //var response = instance.GetShowcase(albumId, userId);
            //Assert.IsType<Album> (response, "response is Album");
        }
        
        /// <summary>
        /// Test GetShowcaseAlt1
        /// </summary>
        [Fact]
        public void GetShowcaseAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal albumId = null;
            //var response = instance.GetShowcaseAlt1(albumId);
            //Assert.IsType<Album> (response, "response is Album");
        }
        
        /// <summary>
        /// Test GetShowcases
        /// </summary>
        [Fact]
        public void GetShowcasesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetShowcases(userId, direction, page, perPage, query, sort);
            //Assert.IsType<List<Album>> (response, "response is List<Album>");
        }
        
        /// <summary>
        /// Test GetShowcasesAlt1
        /// </summary>
        [Fact]
        public void GetShowcasesAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetShowcasesAlt1(direction, page, perPage, query, sort);
            //Assert.IsType<List<Album>> (response, "response is List<Album>");
        }
        
    }

}
