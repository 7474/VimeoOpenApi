/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using VimeoOpenApi.Client;
using VimeoOpenApi.Api;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Test
{
    /// <summary>
    ///  Class for testing WatchLaterQueueEssentialsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WatchLaterQueueEssentialsApiTests : IDisposable
    {
        private WatchLaterQueueEssentialsApi instance;

        public WatchLaterQueueEssentialsApiTests()
        {
            instance = new WatchLaterQueueEssentialsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WatchLaterQueueEssentialsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WatchLaterQueueEssentialsApi
            //Assert.IsType(typeof(WatchLaterQueueEssentialsApi), instance, "instance is a WatchLaterQueueEssentialsApi");
        }

        
        /// <summary>
        /// Test AddVideoToWatchLater
        /// </summary>
        [Fact]
        public void AddVideoToWatchLaterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //decimal videoId = null;
            //instance.AddVideoToWatchLater(userId, videoId);
            
        }
        
        /// <summary>
        /// Test AddVideoToWatchLaterAlt1
        /// </summary>
        [Fact]
        public void AddVideoToWatchLaterAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal videoId = null;
            //instance.AddVideoToWatchLaterAlt1(videoId);
            
        }
        
        /// <summary>
        /// Test CheckWatchLaterQueue
        /// </summary>
        [Fact]
        public void CheckWatchLaterQueueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //decimal videoId = null;
            //var response = instance.CheckWatchLaterQueue(userId, videoId);
            //Assert.IsType<Video> (response, "response is Video");
        }
        
        /// <summary>
        /// Test CheckWatchLaterQueueAlt1
        /// </summary>
        [Fact]
        public void CheckWatchLaterQueueAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal videoId = null;
            //var response = instance.CheckWatchLaterQueueAlt1(videoId);
            //Assert.IsType<Video> (response, "response is Video");
        }
        
        /// <summary>
        /// Test DeleteVideoFromWatchLater
        /// </summary>
        [Fact]
        public void DeleteVideoFromWatchLaterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //decimal videoId = null;
            //instance.DeleteVideoFromWatchLater(userId, videoId);
            
        }
        
        /// <summary>
        /// Test DeleteVideoFromWatchLaterAlt1
        /// </summary>
        [Fact]
        public void DeleteVideoFromWatchLaterAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal videoId = null;
            //instance.DeleteVideoFromWatchLaterAlt1(videoId);
            
        }
        
        /// <summary>
        /// Test GetWatchLaterQueue
        /// </summary>
        [Fact]
        public void GetWatchLaterQueueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //string direction = null;
            //string filter = null;
            //bool? filterEmbeddable = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetWatchLaterQueue(userId, direction, filter, filterEmbeddable, page, perPage, query, sort);
            //Assert.IsType<List<Video>> (response, "response is List<Video>");
        }
        
        /// <summary>
        /// Test GetWatchLaterQueueAlt1
        /// </summary>
        [Fact]
        public void GetWatchLaterQueueAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //string filter = null;
            //bool? filterEmbeddable = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetWatchLaterQueueAlt1(direction, filter, filterEmbeddable, page, perPage, query, sort);
            //Assert.IsType<List<Video>> (response, "response is List<Video>");
        }
        
    }

}
