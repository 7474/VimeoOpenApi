/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using VimeoOpenApi.Client;
using VimeoOpenApi.Api;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Test
{
    /// <summary>
    ///  Class for testing ChannelsEssentialsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ChannelsEssentialsApiTests : IDisposable
    {
        private ChannelsEssentialsApi instance;

        public ChannelsEssentialsApiTests()
        {
            instance = new ChannelsEssentialsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ChannelsEssentialsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ChannelsEssentialsApi
            //Assert.IsType(typeof(ChannelsEssentialsApi), instance, "instance is a ChannelsEssentialsApi");
        }

        
        /// <summary>
        /// Test CreateChannel
        /// </summary>
        [Fact]
        public void CreateChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject inlineObject = null;
            //var response = instance.CreateChannel(inlineObject);
            //Assert.IsType<Channel> (response, "response is Channel");
        }
        
        /// <summary>
        /// Test DeleteChannel
        /// </summary>
        [Fact]
        public void DeleteChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //instance.DeleteChannel(channelId);
            
        }
        
        /// <summary>
        /// Test EditChannel
        /// </summary>
        [Fact]
        public void EditChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //InlineObject1 inlineObject1 = null;
            //var response = instance.EditChannel(channelId, inlineObject1);
            //Assert.IsType<Channel> (response, "response is Channel");
        }
        
        /// <summary>
        /// Test GetChannel
        /// </summary>
        [Fact]
        public void GetChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //var response = instance.GetChannel(channelId);
            //Assert.IsType<Channel> (response, "response is Channel");
        }
        
        /// <summary>
        /// Test GetChannelSubscriptions
        /// </summary>
        [Fact]
        public void GetChannelSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //string direction = null;
            //string filter = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetChannelSubscriptions(userId, direction, filter, page, perPage, query, sort);
            //Assert.IsType<List<Channel>> (response, "response is List<Channel>");
        }
        
        /// <summary>
        /// Test GetChannelSubscriptionsAlt1
        /// </summary>
        [Fact]
        public void GetChannelSubscriptionsAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //string filter = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetChannelSubscriptionsAlt1(direction, filter, page, perPage, query, sort);
            //Assert.IsType<List<Channel>> (response, "response is List<Channel>");
        }
        
        /// <summary>
        /// Test GetChannels
        /// </summary>
        [Fact]
        public void GetChannelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //string filter = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetChannels(direction, filter, page, perPage, query, sort);
            //Assert.IsType<List<Channel>> (response, "response is List<Channel>");
        }
        
    }

}
