/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using VimeoOpenApi.Client;
using VimeoOpenApi.Api;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Test
{
    /// <summary>
    ///  Class for testing ChannelsVideosApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ChannelsVideosApiTests : IDisposable
    {
        private ChannelsVideosApi instance;

        public ChannelsVideosApiTests()
        {
            instance = new ChannelsVideosApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ChannelsVideosApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ChannelsVideosApi
            //Assert.IsType(typeof(ChannelsVideosApi), instance, "instance is a ChannelsVideosApi");
        }

        
        /// <summary>
        /// Test AddVideoToChannel
        /// </summary>
        [Fact]
        public void AddVideoToChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //decimal videoId = null;
            //instance.AddVideoToChannel(channelId, videoId);
            
        }
        
        /// <summary>
        /// Test AddVideosToChannel
        /// </summary>
        [Fact]
        public void AddVideosToChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //InlineObject8 inlineObject8 = null;
            //instance.AddVideosToChannel(channelId, inlineObject8);
            
        }
        
        /// <summary>
        /// Test DeleteVideoFromChannel
        /// </summary>
        [Fact]
        public void DeleteVideoFromChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //decimal videoId = null;
            //instance.DeleteVideoFromChannel(channelId, videoId);
            
        }
        
        /// <summary>
        /// Test GetAvailableVideoChannels
        /// </summary>
        [Fact]
        public void GetAvailableVideoChannelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal videoId = null;
            //var response = instance.GetAvailableVideoChannels(videoId);
            //Assert.IsType<List<Channel>> (response, "response is List<Channel>");
        }
        
        /// <summary>
        /// Test GetChannelVideo
        /// </summary>
        [Fact]
        public void GetChannelVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //decimal videoId = null;
            //var response = instance.GetChannelVideo(channelId, videoId);
            //Assert.IsType<Video> (response, "response is Video");
        }
        
        /// <summary>
        /// Test GetChannelVideos
        /// </summary>
        [Fact]
        public void GetChannelVideosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //string containingUri = null;
            //string direction = null;
            //string filter = null;
            //bool? filterEmbeddable = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string query = null;
            //string sort = null;
            //var response = instance.GetChannelVideos(channelId, containingUri, direction, filter, filterEmbeddable, page, perPage, query, sort);
            //Assert.IsType<List<Video>> (response, "response is List<Video>");
        }
        
        /// <summary>
        /// Test RemoveVideosFromChannel
        /// </summary>
        [Fact]
        public void RemoveVideosFromChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal channelId = null;
            //InlineObject9 inlineObject9 = null;
            //instance.RemoveVideosFromChannel(channelId, inlineObject9);
            
        }
        
    }

}
