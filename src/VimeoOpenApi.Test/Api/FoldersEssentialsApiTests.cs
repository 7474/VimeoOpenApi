/* 
 * Vimeo API
 *
 * Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using VimeoOpenApi.Client;
using VimeoOpenApi.Api;
using VimeoOpenApi.Model;

namespace VimeoOpenApi.Test
{
    /// <summary>
    ///  Class for testing FoldersEssentialsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FoldersEssentialsApiTests : IDisposable
    {
        private FoldersEssentialsApi instance;

        public FoldersEssentialsApiTests()
        {
            instance = new FoldersEssentialsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FoldersEssentialsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FoldersEssentialsApi
            //Assert.IsType(typeof(FoldersEssentialsApi), instance, "instance is a FoldersEssentialsApi");
        }

        
        /// <summary>
        /// Test CreateProject
        /// </summary>
        [Fact]
        public void CreateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //InlineObject48 inlineObject48 = null;
            //var response = instance.CreateProject(userId, inlineObject48);
            //Assert.IsType<Project> (response, "response is Project");
        }
        
        /// <summary>
        /// Test CreateProjectAlt1
        /// </summary>
        [Fact]
        public void CreateProjectAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject24 inlineObject24 = null;
            //var response = instance.CreateProjectAlt1(inlineObject24);
            //Assert.IsType<Project> (response, "response is Project");
        }
        
        /// <summary>
        /// Test DeleteProject
        /// </summary>
        [Fact]
        public void DeleteProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //decimal userId = null;
            //bool? shouldDeleteClips = null;
            //instance.DeleteProject(projectId, userId, shouldDeleteClips);
            
        }
        
        /// <summary>
        /// Test DeleteProjectAlt1
        /// </summary>
        [Fact]
        public void DeleteProjectAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //bool? shouldDeleteClips = null;
            //instance.DeleteProjectAlt1(projectId, shouldDeleteClips);
            
        }
        
        /// <summary>
        /// Test EditProject
        /// </summary>
        [Fact]
        public void EditProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //decimal userId = null;
            //InlineObject49 inlineObject49 = null;
            //var response = instance.EditProject(projectId, userId, inlineObject49);
            //Assert.IsType<Project> (response, "response is Project");
        }
        
        /// <summary>
        /// Test EditProjectAlt1
        /// </summary>
        [Fact]
        public void EditProjectAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //InlineObject25 inlineObject25 = null;
            //var response = instance.EditProjectAlt1(projectId, inlineObject25);
            //Assert.IsType<Project> (response, "response is Project");
        }
        
        /// <summary>
        /// Test GetProject
        /// </summary>
        [Fact]
        public void GetProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //decimal userId = null;
            //var response = instance.GetProject(projectId, userId);
            //Assert.IsType<Project> (response, "response is Project");
        }
        
        /// <summary>
        /// Test GetProjectAlt1
        /// </summary>
        [Fact]
        public void GetProjectAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal projectId = null;
            //var response = instance.GetProjectAlt1(projectId);
            //Assert.IsType<Project> (response, "response is Project");
        }
        
        /// <summary>
        /// Test GetProjects
        /// </summary>
        [Fact]
        public void GetProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal userId = null;
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string sort = null;
            //var response = instance.GetProjects(userId, direction, page, perPage, sort);
            //Assert.IsType<List<Project>> (response, "response is List<Project>");
        }
        
        /// <summary>
        /// Test GetProjectsAlt1
        /// </summary>
        [Fact]
        public void GetProjectsAlt1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string direction = null;
            //decimal? page = null;
            //decimal? perPage = null;
            //string sort = null;
            //var response = instance.GetProjectsAlt1(direction, page, perPage, sort);
            //Assert.IsType<List<Project>> (response, "response is List<Project>");
        }
        
    }

}
